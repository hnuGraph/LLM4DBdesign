{"id": "67552f0a13602ec03b41a78b", "question": "The airline company operates as follows:\nThe company owns multiple airplanes, each with an Airplane Number, Model, and Passenger Capacity.\nEach airplane can perform multiple flights. Flight information includes Flight Number, Departure Time, Arrival Time, Origin, Destination, Airplane Number, Captain ID, First Officer ID, Start Time, and End Time.\nEach flight is operated by a captain and a first officer, each having their own ID, Name, and Phone Number.", "answer": "CREATE TABLE Airplane (\n    Airplane_Number INTEGER PRIMARY KEY,\n    Model VARCHAR(255),\n    Passenger_Capacity INTEGER\n);\n\nCREATE TABLE Crew (\n    Name VARCHAR(255),\n    Personnel_ID INTEGER PRIMARY KEY,\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Flight (\n    Airplane_Number INTEGER NOT NULL,\n    Arrival_Time DATETIME,\n    Captain_ID INTEGER NOT NULL,\n    Departure_Time DATETIME,\n    Destination VARCHAR(255),\n    End_Time DATETIME,\n    First_Officer_ID INTEGER NOT NULL,\n    Flight_Number INTEGER PRIMARY KEY,\n    Origin VARCHAR(255),\n    Start_Time DATETIME,\n    FOREIGN KEY (Airplane_Number) REFERENCES Airplane(Airplane_Number),\n    FOREIGN KEY (Captain_ID) REFERENCES Crew(Personnel_ID),\n    FOREIGN KEY (First_Officer_ID) REFERENCES Crew(Personnel_ID)\n);", "remarks": "外键的模式名由中文改成schema_0", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["交通运输、仓储和邮政业", "航空运输业"]}
{"id": "67552f0a13602ec03b41a798", "question": "The telecommunications service company has multiple customers, and each customer can subscribe to multiple service plans. Each service plan has a unique plan number, name, price, and included services. The company needs to record customers' personal information, including customer number, name, phone number, address, and email. Each time a customer subscribes to or unsubscribes from a service plan, the subscription time, cancellation time, and operating personnel need to be recorded.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Customer_Number VARCHAR(255) PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Service_Plan (\n    Plan_Name VARCHAR(255),\n    Plan_Number INTEGER PRIMARY KEY,\n    Price INTEGER,\n    Service_Content VARCHAR(255)\n);\n\nCREATE TABLE Subscription_Record (\n    Cancellation_Time DATETIME,\n    Customer_Number VARCHAR(255) NOT NULL,\n    Operating_Personnel VARCHAR(255),\n    Plan_Number INTEGER NOT NULL,\n    Subscription_Time DATETIME,\n    PRIMARY KEY (Customer_Number, Plan_Number, Subscription_Time),\n    FOREIGN KEY (Customer_Number) REFERENCES Customer(Customer_Number),\n    FOREIGN KEY (Plan_Number) REFERENCES Service_Plan(Plan_Number)\n);", "remarks": "WQ: 无修改", "assign_to": "szc", "assign_to_round2": "wq", "domain": ["信息传输、软件和信息技术服务业", "电信、广播电视和卫星传输服务"]}
{"id": "67552f0a13602ec03b41a79b", "question": "The business requirements for a service management system are described as follows: The system manages multiple services, each with a service ID, name, type, price and description. There are multiple users in the system, each with a user ID and name. Each service usage needs to record the operating user ID, service ID, usage time and duration. The system needs to support real-time monitoring and performance evaluation of service usage.", "answer": "CREATE TABLE Service (\n    Service_ID INTEGER PRIMARY KEY,\n    Service_description VARCHAR(255),\n    Service_name VARCHAR(255),\n    Service_price FLOAT,\n    Service_type VARCHAR(255)\n);\n\nCREATE TABLE User (\n    User_ID INTEGER PRIMARY KEY,\n    User_name VARCHAR(255)\n);\n\nCREATE TABLE Service_usage_record (\n    Operating_user_ID INTEGER NOT NULL,\n    Service_ID INTEGER NOT NULL,\n    Usage_duration BOOL,\n    Usage_time DATETIME,\n    PRIMARY KEY (Operating_user_ID, Service_ID, Usage_time),\n    FOREIGN KEY (Operating_user_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Service_ID) REFERENCES Service(Service_ID)\n);", "remarks": "WQ：无修改", "assign_to": "hzb", "assign_to_round2": "wq", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a79f", "question": "The business requirements for the company's equipment management system are as follows:\nThe company owns multiple pieces of equipment, each equipped with an equipment ID, name, model, and usage status.\nThe company also employs several maintenance personnel, each with a unique maintenance personnel ID, name, telephone, and email.\nWhenever equipment requires maintenance, a maintenance record is generated, which includes the equipment ID, maintenance time, maintenance results, and the personnel responsible for the maintenance.\nThe system needs to manage equipment information, maintenance personnel information, and equipment maintenance records to ensure the tracking of each piece of equipment's maintenance history and responsible personnel.\n", "answer": "CREATE TABLE Equipment (\n    Equipment_ID INTEGER PRIMARY KEY,\n    Model VARCHAR(255),\n    Name VARCHAR(255),\n    Usage_Status VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_Personnel (\n    Email VARCHAR(255),\n    Maintenance_Personnel_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Telephone VARCHAR(255)\n);\n\nCREATE TABLE Equipment_Maintenance (\n    Equipment_ID INTEGER PRIMARY KEY NOT NULL,\n    Maintenance_Personnel_ID INTEGER NOT NULL,\n    Maintenance_Result VARCHAR(255),\n    Maintenance_Time DATETIME,\n    FOREIGN KEY (Equipment_ID) REFERENCES Equipment(Equipment_ID),\n    FOREIGN KEY (Maintenance_Personnel_ID) REFERENCES Maintenance_Personnel(Maintenance_Personnel_ID)\n);", "remarks": "修改需求描述，维护记录是关系，不是实体，将维护记录改为关系，schema外键格式问题", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["制造业", "其他制造业"]}
{"id": "67552f0a13602ec03b41a7aa", "question": "The agricultural machinery and equipment management system needs to manage the machinery and equipment of multiple farms. Each equipment has equipment ID, name, model, purchase date, usage status (such as \"normal\", \"maintenance\", \"disabled\", etc.), maintenance record and operator. Each farm has farm ID, name, address and contact information. Each maintenance record includes equipment ID, maintenance date, maintenance type (such as \"routine inspection\", \"fault repair\", etc.), operator and maintenance result (such as \"completed\", \"uncompleted\", etc.). It is necessary to record the basic information of the operator (operator ID, name, phone number) to facilitate the tracing of operation records.", "answer": "CREATE TABLE Farm (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Farm_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Operator (\n    Name VARCHAR(255),\n    Operator_ID INTEGER PRIMARY KEY,\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Equipment (\n    Equipment_ID INTEGER PRIMARY KEY,\n    Farm_ID INTEGER NOT NULL,\n    Model VARCHAR(255),\n    Name VARCHAR(255),\n    Purchase_Date DATETIME,\n    Usage_Status BOOL,\n    FOREIGN KEY (Farm_ID) REFERENCES Farm(Farm_ID)\n);\n\nCREATE TABLE Maintenance_Record (\n    Equipment_ID INTEGER NOT NULL,\n    Maintenance_Date DATETIME,\n    Maintenance_Result VARCHAR(255),\n    Maintenance_Type VARCHAR(255),\n    Operator_ID INTEGER NOT NULL,\n    PRIMARY KEY (Device_ID, Operator_ID, Maintenance_Date),\n    FOREIGN KEY (Equipment_ID) REFERENCES Equipment(Equipment_ID),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID)\n);", "remarks": "修改了业务需求描述的markdown格式，需求增加操作员的信息。将维护记录设置为关系而不是实体。", "assign_to": "tk", "assign_to_round2": "szc", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0a13602ec03b41a7ab", "question": "Agricultural Product Warehouse Management System requires managing multiple warehouses, where each warehouse can store various agricultural products. Agricultural products in a warehouse may have the same name, depending on the cultural differences of different regions.  \nEach warehouse has a Warehouse ID, name, address, capacity, and current inventory.  \nEach type of agricultural product has a Product ID, name, specification, date of storage, date of dispatch, quantity stored, quantity dispatched, and current inventory.  \nEach storage record includes Warehouse ID, Product ID, storage date, quantity stored, and operator.  \nEach dispatch record includes Warehouse ID, Product ID, dispatch date, quantity dispatched, and operator.", "answer": "CREATE TABLE Warehouse (\n    Address VARCHAR(255),\n    Capacity FLOAT,\n    Current_Inventory FLOAT,\n    Warehouse_ID INTEGER PRIMARY KEY,\n    Warehouse_Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Inventory FLOAT,\n    Product_Name VARCHAR(255),\n    Specification VARCHAR(255)\n);\n\nCREATE TABLE Product_Circulation_Record (\n    Change_Quantity FLOAT,\n    Date DATETIME,\n    Operator VARCHAR(255),\n    Product_ID INTEGER,\n    Record_ID INTEGER PRIMARY KEY,\n    Warehouse_ID INTEGER NOT NULL,\n    FOREIGN KEY (Warehouse_ID) REFERENCES Warehouse(Warehouse_ID),\n    FOREIGN KEY (Warehouse_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "gcc", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0a13602ec03b41a7ac", "question": "The Agricultural Meteorological Data Management System needs to record meteorological data from multiple weather stations. Each weather station can observe weather changes.\n- Each weather station has a Weather Station ID, name, location, person in charge, and contact information.\n- Each record includes Weather Station ID, recording date, temperature, humidity, precipitation, wind speed, and wind direction.\n- Each farm can subscribe to data from multiple weather stations, recording the subscription date and unsubscription date.", "answer": "CREATE TABLE Weather_Station (\n    Contact_Information INTEGER,\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Person_in_Charge VARCHAR(255),\n    Weather_Station_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Meteorological_Data (\n    Data_ID INTEGER PRIMARY KEY,\n    Humidity FLOAT,\n    Precipitation INTEGER,\n    Recording_Date DATETIME,\n    Temperature FLOAT,\n    Weather_Station_ID INTEGER NOT NULL,\n    Wind_Direction VARCHAR(255),\n    Wind_Speed FLOAT,\n    FOREIGN KEY (Weather_Station_ID) REFERENCES Weather_Station(Weather_Station_ID)\n);\n\nCREATE TABLE Subscription_Data (\n    Farm_Name VARCHAR(255),\n    Subscription_Date DATETIME,\n    Unsubscription_Date DATETIME,\n    Weather_Station_ID INTEGER NOT NULL,\n    PRIMARY KEY (Farm_Name, Weather_Station_ID),\n    FOREIGN KEY (Weather_Station_ID) REFERENCES Weather_Station(Weather_Station_ID)\n);", "remarks": "农场只是提了一嘴，无需特别维护农场的表，避免冗余", "assign_to": "zp", "assign_to_round2": "szh", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0a13602ec03b41a7ad", "question": "  The Agricultural Irrigation Management System shall manage multiple irrigation systems, each capable of irrigating several plots. Each plot has a Plot ID, area, soil type, and current irrigation status (such as \"Irrigated\", \"Not Irrigated\"). Each irrigation system possesses a System ID, name, type (such as \"Drip\", \"Spray\"), installation date, and maintenance records. Each irrigation record includes System ID, Plot ID, irrigation date, irrigation duration, and irrigation amount.\n", "answer": "CREATE TABLE Irrigation_System (\n    Installation_Date DATETIME,\n    Maintenance_Records VARCHAR(255),\n    Name VARCHAR(255),\n    System_ID INTEGER PRIMARY KEY,\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Plot (\n    Area FLOAT,\n    Current_Irrigation_Status BOOL,\n    Plot_ID INTEGER PRIMARY KEY,\n    Soil_Type VARCHAR(255)\n);\n\nCREATE TABLE Irrigation_Record (\n    Irrigation_Amount INTEGER,\n    Irrigation_Date DATETIME,\n    Irrigation_Duration FLOAT,\n    Plot_ID INTEGER NOT NULL,\n    System_ID INTEGER NOT NULL,\n    PRIMARY KEY (Irrigation_Date, System_ID, Plot_ID),\n    FOREIGN KEY (Plot_ID) REFERENCES Plot(Plot_ID),\n    FOREIGN KEY (System_ID) REFERENCES Irrigation_System(System_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "hzb", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0a13602ec03b41a7af", "question": "The agricultural planting plan management system needs to manage planting plans for multiple farms. Each farm has a farm ID, name, address, and contact information. Each planting plan includes a farm ID, plot ID, crop type, planting time, expected harvest time, planting quantity, and operator. Each plot has a plot ID, area, soil type, and current status (e.g., “idle,” “planting in progress,” etc.).\n", "answer": "CREATE TABLE Farm (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Farm_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Plot (\n    Area VARCHAR(255),\n    Current_Status BOOL,\n    Plot_ID INTEGER PRIMARY KEY,\n    Soil_Type VARCHAR(255)\n);\n\nCREATE TABLE Planting_Plan (\n    Crop_Type VARCHAR(255),\n    Expected_Harvest_Time DATETIME,\n    Farm_ID INTEGER NOT NULL,\n    Operator VARCHAR(255),\n    Planting_Quantity VARCHAR(255),\n    Planting_Time DATETIME,\n    Plot_ID INTEGER NOT NULL,\n    PRIMARY KEY (Farm_ID, Plot_ID, Planting_Time),\n    FOREIGN KEY (Farm_ID) REFERENCES Farm(Farm_ID),\n    FOREIGN KEY (Plot_ID) REFERENCES Plot(Plot_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "hzb", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0a13602ec03b41a7b5", "question": "The business requirements for a forest product processing management system are described as follows: This system is mainly used for managing the production operations of forest product processing factories. For workshop management, the system needs to record each workshop's ID, name and address information. Each workshop is equipped with multiple workers, whose information includes worker ID, name and contact number. In their daily work, workers need to record detailed processing information, including raw materials used, processing time, specific product name, production quantity and product quality rating. The system also needs to manage the inventory of raw materials for each workshop, recording the name and real-time inventory quantity of various raw materials. For production quality management, the system will automatically calculate production performance metrics for each workshop based on workers' processing records, including monthly total processing volume, product qualification rate and other assessment indicators. Managers can use this data to understand production status in real time and make adjustments to production planning and quality control.", "answer": "CREATE TABLE Worker (\n    Contact_number VARCHAR(255),\n    Name VARCHAR(255),\n    Worker_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Workshop (\n    Workshop_ID INTEGER PRIMARY KEY,\n    Workshop_address VARCHAR(255),\n    Workshop_name VARCHAR(255)\n);\n\nCREATE TABLE Raw_material (\n    Raw_material_ID INTEGER PRIMARY KEY,\n    Raw_material_name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_name VARCHAR(255)\n);\n\nCREATE TABLE Workshop_raw_material_management (\n    Inventory_quantity INTEGER,\n    Raw_material_ID INTEGER NOT NULL,\n    Workshop_ID INTEGER NOT NULL,\n    PRIMARY KEY (Workshop_ID, Raw_material_ID),\n    FOREIGN KEY (Raw_material_ID) REFERENCES Raw_material(Raw_material_ID),\n    FOREIGN KEY (Workshop_ID) REFERENCES Workshop(Workshop_ID)\n);\n\nCREATE TABLE Product_processing_task (\n    Processing_task_ID INTEGER PRIMARY KEY,\n    Processing_time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Product_quality_rating INTEGER,\n    Production_quantity INTEGER,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Worker_processing_product (\n    Processing_task_ID INTEGER NOT NULL,\n    Worker_ID INTEGER NOT NULL,\n    PRIMARY KEY (Processing_task_ID, Worker_ID),\n    FOREIGN KEY (Processing_task_ID) REFERENCES Product_processing_task(Processing_task_ID),\n    FOREIGN KEY (Worker_ID) REFERENCES Worker(Worker_ID)\n);\n\nCREATE TABLE Raw_materials_involved_in_product_processing (\n    Processing_task_ID INTEGER NOT NULL,\n    Raw_material_ID INTEGER NOT NULL,\n    PRIMARY KEY (Processing_task_ID, Raw_material_ID),\n    FOREIGN KEY (Processing_task_ID) REFERENCES Product_processing_task(Processing_task_ID),\n    FOREIGN KEY (Raw_material_ID) REFERENCES Raw_material(Raw_material_ID)\n);", "remarks": "WQ:应该不是加工原材料，而是加工产品，将加工原材料的schema进行修改。具体不同可参见原始entity、relation和修改后的schema之间的差异。", "assign_to": "hzb", "assign_to_round2": "wq", "domain": ["农、林、牧、渔业", "林业"]}
{"id": "67552f0a13602ec03b41a7b6", "question": "The business requirements for a company's equipment management system are as follows: The company owns various types of equipment, each with a unique Equipment ID, name, model, and usage frequency. To effectively manage the equipment, the system needs to record each equipment's usage, including usage time, user, and location. It should also track the equipment's maintenance history, including maintenance time, maintenance content, and maintenance personnel. The system must manage equipment information, usage records, and maintenance records to enable querying of equipment usage and maintenance history.", "answer": "CREATE TABLE Equipment (\n    Equipment_ID INTEGER PRIMARY KEY,\n    Model VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Usage_Record (\n    Equipment_ID INTEGER NOT NULL,\n    Usage_Location VARCHAR(255),\n    Usage_Time DATETIME,\n    User VARCHAR(255),\n    PRIMARY KEY (Equipment_ID, Usage_Time),\n    FOREIGN KEY (Equipment_ID) REFERENCES Equipment(Equipment_ID)\n);\n\nCREATE TABLE Maintenance_Record (\n    Equipment_ID INTEGER NOT NULL,\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Record_ID INTEGER,\n    Maintenance_Time DATETIME,\n    PRIMARY KEY (Equipment_ID, Maintenance_Time),\n    FOREIGN KEY (Equipment_ID) REFERENCES Equipment(Equipment_ID)\n);", "remarks": "王琴: 将schema_1和schema_2中单独的主键ID去除，去除维护人员schema，需求中没有细致提到这个实体。", "assign_to": "dyq", "assign_to_round2": "wq", "domain": ["居民服务、修理和其他服务业", "机动车、电子产品和日用产品修理业"]}
{"id": "67552f0a13602ec03b41a7ba", "question": "The restaurant receives multiple orders, each of which has an order number, customer information, order time, and total amount. The order contains multiple dishes, each of which has a name and price. The restaurant needs to record the detailed information of each dish and the status of the order (such as received, prepared, and delivered).\n\n\n\n", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Dish (\n    Dish_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Price FLOAT\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_status VARCHAR(255),\n    Order_time DATETIME,\n    Total_amount INTEGER,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order_Details (\n    Dish_ID INTEGER NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Dish_ID),\n    FOREIGN KEY (Dish_ID) REFERENCES Dish(Dish_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "王琴：无修改", "assign_to": "tk", "assign_to_round2": "wq", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a7bb", "question": "Restaurants purchase ingredients from multiple suppliers. Each supplier has a name, contact information, and address. Ingredients have a name, specification, and price. Each purchase must record supplier information, ingredient information, purchase quantity, purchase date, and purchase amount.", "answer": "CREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Contact_Information INTEGER,\n    Name VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Ingredient (\n    Ingredient_ID INTEGER PRIMARY KEY,\n    Ingredient_Name VARCHAR(255),\n    Ingredient_Specification VARCHAR(255),\n    Price FLOAT\n);\n\nCREATE TABLE Purchase_Record (\n    Ingredient_ID INTEGER NOT NULL,\n    Purchase_Amount FLOAT,\n    Purchase_Date DATETIME,\n    Purchase_ID INTEGER,\n    Purchase_Quantity FLOAT,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supplier_ID, Ingredient_ID),\n    FOREIGN KEY (Ingredient_ID) REFERENCES Ingredient(Ingredient_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);", "remarks": "多对多采购关系主键多余", "assign_to": "zp", "assign_to_round2": "gcc", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a7bc", "question": "An employee scheduling management system primarily manages employee basic information, shift arrangements, and tracks employee schedules. The specific business requirements of the system are as follows:\n\nEmployee Management:  \nThe system shall manage basic information for each employee, including the employee's name, date of birth, gender, phone number, and position. Employee basic information serves as the foundation for scheduling management, ensuring appropriate personnel are assigned based on different positions.  \n\nShift Management:  \nThe system shall manage basic information for multiple shifts, recording details such as the shift name, start time, and end time. Shift arrangements help ensure employees attend work on time and achieve reasonable work time allocation.  \n\nEmployee Scheduling Management:  \nThe system shall associate employees with shifts and record each employee's schedule, including the scheduled time and assigned shift. This ensures each employee completes their work during the designated time period and provides administrators with the ability to view and adjust scheduling arrangements.  \n\nThrough these functions, the system shall efficiently manage employee scheduling, ensuring each employee participates in work according to job requirements and position assignments. It also facilitates administrators in viewing and adjusting schedules while ensuring reasonable allocation of work hours.", "answer": "CREATE TABLE Employee (\n    Date_of_Birth DATETIME,\n    Employee_ID INTEGER PRIMARY KEY,\n    Employee_Name VARCHAR(255),\n    Gender VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Shift (\n    End_Time DATETIME,\n    Shift_ID INTEGER PRIMARY KEY,\n    Shift_Name VARCHAR(255),\n    Start_Time DATETIME\n);\n\nCREATE TABLE Schedule (\n    Employee_ID INTEGER NOT NULL,\n    Scheduled_Time DATETIME,\n    Shift_ID INTEGER NOT NULL,\n    PRIMARY KEY (Employee_ID, Shift_ID, Scheduled_Time),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Shift_ID) REFERENCES Shift(Shift_ID)\n);", "remarks": "CS 1/22 round2 edit", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a7c7", "question": "A textile enterprise needs to manage the production, inventory, and sales of textiles. Each textile has information such as name, type, production date, and price. The enterprise has multiple departments, and each department has a name, manager, and contact information. Employee management includes employee ID, name, gender, phone, and position. For each production, the system needs to record the produced product, quantity, producer, and production time. For inventory management, the system should record the products in stock, quantity, and stock-in time. For sales, the system should record the products sold, quantity, sales personnel, customer, and sales time. The system should also support performance evaluation for each department. The performance evaluation should record the evaluation date and performance score of each employee.", "answer": "CREATE TABLE Textile (\n    Name VARCHAR(255),\n    Price FLOAT,\n    Production_Date DATETIME,\n    Textile_ID INTEGER PRIMARY KEY,\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Department (\n    Contact_Information VARCHAR(255),\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Manager VARCHAR(255)\n);\n\nCREATE TABLE Inventory (\n    Inventory_ID INTEGER PRIMARY KEY,\n    Quantity VARCHAR(255),\n    Stock-in_Time DATETIME,\n    Textile_ID INTEGER NOT NULL,\n    FOREIGN KEY (Textile_ID) REFERENCES Textile(Textile_ID)\n);\n\nCREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Production_Relationship (\n    Producer_ID INTEGER NOT NULL,\n    Production_Time DATETIME,\n    Quantity VARCHAR(255),\n    Textile_ID INTEGER NOT NULL,\n    PRIMARY KEY (Textile_ID, Producer_ID, Production_Time),\n    FOREIGN KEY (Producer_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Textile_ID) REFERENCES Textile(Textile_ID)\n);\n\nCREATE TABLE Sales_Relationship (\n    Customer VARCHAR(255),\n    Quantity VARCHAR(255),\n    Sales_Personnel_ID INTEGER NOT NULL,\n    Sales_Time DATETIME,\n    Textile_ID INTEGER NOT NULL,\n    PRIMARY KEY (Textile_ID, Sales_Personnel_ID, Sales_Time),\n    FOREIGN KEY (Sales_Personnel_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Textile_ID) REFERENCES Textile(Textile_ID)\n);\n\nCREATE TABLE Performance_Evaluation (\n    Employee_ID INTEGER NOT NULL,\n    Evaluation_Date DATETIME,\n    Performance_ID INTEGER PRIMARY KEY,\n    Score FLOAT,\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "删除一些冗余的业务描述。", "assign_to": "gcc", "assign_to_round2": "szc", "domain": ["制造业", "纺织服装、服饰业"]}
{"id": "67552f0a13602ec03b41a7c8", "question": "The textile and apparel company needs to manage clothing production, inventory, and sales, so a high-performance database is used to manage the entire production line. Clothing has information such as name, style, production date, and price. Multiple departments in the company collaborate, and each department has a department name, person in charge, and contact information. Employee management includes employee ID, name, gender, phone number, and position. During each production, the products produced, quantity, producer, and production time need to be recorded. During inventory management, the products in stock, quantity, and storage time are recorded. During sales, the products sold, quantity, salesperson, customer, and sales time are recorded. The system needs to support performance appraisal of each department.", "answer": "CREATE TABLE Department (\n    Contact_Information VARCHAR(255),\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Person_in_Charge VARCHAR(255)\n);\n\nCREATE TABLE Clothing (\n    Inventory INTEGER,\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Production_Date DATETIME,\n    Style VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Production_Record (\n    Producer_Employee_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Production_Time DATETIME,\n    Quantity INTEGER,\n    PRIMARY KEY (Product_ID, Producer_Employee_ID, Production_Time),\n    FOREIGN KEY (Producer_Employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Clothing(Product_ID)\n);\n\nCREATE TABLE Sales_Record (\n    Customer VARCHAR(255),\n    Product_ID INTEGER NOT NULL,\n    Sales_Quantity INTEGER,\n    Sales_Time DATETIME,\n    Salesperson_Employee_ID INTEGER NOT NULL,\n    PRIMARY KEY (Product_ID, Salesperson_Employee_ID, Sales_Time),\n    FOREIGN KEY (Product_ID) REFERENCES Clothing(Product_ID),\n    FOREIGN KEY (Salesperson_Employee_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "调整需求描述，修改了一些属性名称，调整销售记录表的主键，删除记录ID", "assign_to": "zp", "assign_to_round2": "hzb", "domain": ["制造业", "纺织服装、服饰业"]}
{"id": "67552f0a13602ec03b41a7d1", "question": "Residential Moving Service Company provides moving services for homes, offices, and other locations. The company has several moving teams, each consisting of multiple movers. Each moving task includes a task ID, customer information (customer name, customer phone number), moving date, starting address, destination address, quantity of items moved, and moving cost. Upon completion of the move, customer feedback must be recorded. The performance evaluation of the movers is based on the number of tasks completed and customer satisfaction.\n", "answer": "CREATE TABLE Moving_Team (\n    Team_ID INTEGER PRIMARY KEY,\n    Team_Name VARCHAR(255)\n);\n\nCREATE TABLE Mover (\n    Age INTEGER,\n    Assigned_Team_ID INTEGER NOT NULL,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number INTEGER,\n    Worker_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Assigned_Team_ID) REFERENCES Moving_Team(Team_ID)\n);\n\nCREATE TABLE Moving_Task (\n    Assigned_Team_ID INTEGER NOT NULL,\n    Customer_Feedback INTEGER,\n    Customer_Name VARCHAR(255),\n    Customer_Phone_Number INTEGER,\n    Destination_Address VARCHAR(255),\n    Moving_Cost FLOAT,\n    Moving_Date DATETIME,\n    Quantity_of_Items_Moved INTEGER,\n    Starting_Address VARCHAR(255),\n    Task_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Assigned_Team_ID) REFERENCES Moving_Team(Team_ID)\n);", "remarks": "WQ: 不需要单独的评价表和记录表，可通过统计得出，已修改。", "assign_to": "szc", "assign_to_round2": "wq", "domain": ["交通运输、仓储和邮政业", "装卸搬运和仓储业"]}
{"id": "67552f0a13602ec03b41a7d3", "question": "The car rental company provides vehicle leasing services. The company has multiple rental locations, each with several rental vehicles. Each rental task includes a task ID, customer information (customer name, customer phone number), rental date, rental duration, and rental cost. Upon completion of the rental, the vehicle condition and customer feedback need to be recorded. The performance assessment of each rental location is based on the number of rental tasks completed and customer satisfaction.", "answer": "CREATE TABLE Rental_Location (\n    Rental_Location_Address VARCHAR(255),\n    Rental_Location_ID INTEGER PRIMARY KEY,\n    Rental_Location_Name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255),\n    Customer_Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Vehicle (\n    Rental_Location_ID INTEGER NOT NULL,\n    Vehicle_ID INTEGER PRIMARY KEY,\n    Vehicle_Model VARCHAR(255),\n    FOREIGN KEY (Rental_Location_ID) REFERENCES Rental_Location(Rental_Location_ID)\n);\n\nCREATE TABLE Rental_Task (\n    Customer_Feedback VARCHAR(255),\n    Customer_ID INTEGER NOT NULL,\n    Rental_Cost FLOAT,\n    Rental_Date DATETIME,\n    Rental_Duration DATETIME,\n    Vehicle_Condition_After_Rental VARCHAR(255),\n    Vehicle_ID INTEGER NOT NULL,\n    PRIMARY KEY (Vehicle_ID, Customer_ID, Rental_Date),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Vehicle_ID) REFERENCES Vehicle(Vehicle_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh", "domain": ["租赁和商务服务业", "租赁业"]}
{"id": "67552f0a13602ec03b41a7d4", "question": "An electronic product sales company sells products such as mobile phones, computers, and other electronic goods. Each product has information including name, model, and price. The company has multiple sales teams, each with a team ID, team name, manager, and contact information. Each team has multiple sales personnel, whose details include name, phone number, position, and gender. Each sales task includes customer information (customer name, customer phone number), product details (product name, model, price), sales date, quantity, and sales cost. After the sale, customer feedback and rating need to be recorded.", "answer": "CREATE TABLE Electronic_Product (\n    Model VARCHAR(255),\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Sales_Team (\n    Contact_Information VARCHAR(255),\n    Manager VARCHAR(255),\n    Team_ID INTEGER PRIMARY KEY,\n    Team_Name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255),\n    Customer_Phone VARCHAR(255)\n);\n\nCREATE TABLE Sales_Task (\n    Sales_Cost FLOAT,\n    Sales_Date DATETIME,\n    Sales_Quantity INTEGER,\n    Sales_Task_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Sales_Personnel (\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255),\n    Sales_Personnel_ID INTEGER PRIMARY KEY,\n    Team_ID INTEGER NOT NULL,\n    FOREIGN KEY (Team_ID) REFERENCES Sales_Team(Team_ID)\n);\n\nCREATE TABLE Sales_Task_Customer (\n    Customer_ID INTEGER NOT NULL,\n    Feedback VARCHAR(255),\n    Rating FLOAT,\n    Sales_Task_ID INTEGER NOT NULL,\n    PRIMARY KEY (Sales_Task_ID, Customer_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Sales_Task_ID) REFERENCES Sales_Task(Sales_Task_ID)\n);\n\nCREATE TABLE Sales_Task_Product (\n    Product_ID INTEGER NOT NULL,\n    Sales_Task_ID INTEGER NOT NULL,\n    PRIMARY KEY (Sales_Task_ID, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Electronic_Product(Product_ID),\n    FOREIGN KEY (Sales_Task_ID) REFERENCES Sales_Task(Sales_Task_ID)\n);", "remarks": "较大改动：补充销售人员遗漏属性，移除原来的绩效表，原来的销售任务表遗漏了客户信息，补充后为三实体关系，所以拆分成了三个schema", "assign_to": "gcc", "assign_to_round2": "hzb", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a7d8", "question": "  A civil engineering company owns multiple pieces of equipment. Each piece of equipment has an equipment ID, equipment name, model, purchase date, purchase price, and status. The company has multiple projects. Each project has a project ID, project name, project description, and creation time. Each project can use multiple pieces of equipment. Equipment usage records need to include project ID, equipment ID, usage date, usage time, and user. The equipment management information system needs to be able to record equipment and equipment usage.\n", "answer": "CREATE TABLE equipment (\n    equipment_ID INTEGER PRIMARY KEY,\n    equipment_name VARCHAR(255),\n    model VARCHAR(255),\n    purchase_date DATETIME,\n    purchase_price FLOAT,\n    status VARCHAR(255)\n);\n\nCREATE TABLE project (\n    creation_time DATETIME,\n    project_ID INTEGER PRIMARY KEY,\n    project_description BLOB,\n    project_name VARCHAR(255)\n);\n\nCREATE TABLE equipment_usage_record (\n    equipment_ID INTEGER NOT NULL,\n    project_ID INTEGER NOT NULL,\n    usage_date DATETIME,\n    usage_record_ID INTEGER,\n    usage_time DATETIME,\n    user VARCHAR(255),\n    PRIMARY KEY (project_ID, equipment_ID, usage_date),\n    FOREIGN KEY (equipment_ID) REFERENCES equipment(equipment_ID),\n    FOREIGN KEY (project_ID) REFERENCES project(project_ID)\n);", "remarks": "将原来的外键引用模式名改为schema_i", "assign_to": "dyq", "assign_to_round2": "hzb", "domain": ["建筑业", "土木工程建筑业"]}
{"id": "67552f0a13602ec03b41a7da", "question": "The main functions of a project management system are to manage customer information, project progress, and customer feedback and satisfaction with projects. The system supports the input of customer information, project management, and records customer feedback for each project, including satisfaction ratings and comments. The following are specific business descriptions:\n\nCustomer Management:\n\nThe system shall be able to manage basic customer information, including customer name, phone number, email, and address. This customer information is the foundation for project management, ensuring that personalized services and support can be provided to different customers.\n\nProject Management:\n\nThe system shall be able to manage basic information for multiple projects, recording each project's name, start date, estimated completion date, actual completion date, and project budget. Detailed project information helps track project progress and budget control.\n\nCustomer and Project Association:\n\nThe system shall support relationship management between customers and projects, recording the projects each customer participates in and allowing customers to provide feedback and satisfaction ratings for each project. This helps the company understand customer feedback on projects, improve service quality, and enhance customer satisfaction.\n\nThrough these functions, the system can efficiently manage customer information and project progress, ensure customer needs are met, and track customer satisfaction with projects in a timely manner, providing references for future project improvements.\n", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Project (\n    Actual_Completion_Date DATETIME,\n    Estimated_Completion_Date DATETIME,\n    Project_Budget FLOAT,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Name VARCHAR(255),\n    Start_Date DATETIME\n);\n\nCREATE TABLE Customer_Project_Relationship (\n    Customer_ID INTEGER NOT NULL,\n    Feedback VARCHAR(255),\n    Project_ID INTEGER NOT NULL,\n    Satisfaction_Rating FLOAT,\n    PRIMARY KEY (Customer_ID, Project_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "CS 1/22 round2 edit", "assign_to": "dyq", "assign_to_round2": "cs", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a7db", "question": "The main function of a contract and project management system is to manage the contracts between the company and the customer and the execution of each project. The system supports the entry and tracking of contracts, the progress and budget control of projects, and can record contract change information. The following is a specific business description:\nContract management: The system can manage various contracts signed between the company and the customer, including basic information of the contract, such as contract name, signing date, amount, status, etc. Each contract is associated with a specific project to ensure that the performance of the contract is synchronized with the progress of the project.\nProject management: The system can record and manage the detailed information of multiple projects, including project name, start date, expected completion date, actual completion date, budget and location, etc. The project management function helps monitor the implementation of the project to ensure that the project is carried out as planned and the budget is effectively controlled.\nRelationship management between projects and contracts: The system supports the association between each project and multiple contracts. By managing the relationship between projects and contracts, it can ensure that each project has corresponding contract support, and at the same time track the execution of the contract during the project implementation process.\nContract change record: The system can record the change history of each contract, including information such as the change date, change content, and the changed contract amount. Contract change records help track the contract adjustment process and ensure that contract changes can be followed up and managed in a timely manner.\nThe system is designed to ensure efficient management of contracts and projects, support the tracking of contract changes, and help companies fully understand project progress and contract performance through the association between projects and contracts, thereby improving the transparency and control of project execution.\n\n", "answer": "CREATE TABLE Project (\n    Actual_Completion_Date DATETIME,\n    Budget FLOAT,\n    Expected_Completion_Date DATETIME,\n    Location VARCHAR(255),\n    Project_Name VARCHAR(255),\n    Project_Number INTEGER PRIMARY KEY,\n    Start_Date DATETIME\n);\n\nCREATE TABLE Contract (\n    Contract_Amount FLOAT,\n    Contract_Name VARCHAR(255),\n    Contract_Number INTEGER PRIMARY KEY,\n    Contract_Status VARCHAR(255),\n    Project_Number INTEGER NOT NULL,\n    Signing_Date DATETIME,\n    FOREIGN KEY (Project_Number) REFERENCES Project(Project_Number)\n);\n\nCREATE TABLE Project_Includes_Contract (\n    Contract_Number INTEGER NOT NULL,\n    Project_Number INTEGER NOT NULL,\n    PRIMARY KEY (Project_Number, Contract_Number),\n    FOREIGN KEY (Contract_Number) REFERENCES Contract(Contract_Number),\n    FOREIGN KEY (Project_Number) REFERENCES Project(Project_Number)\n);\n\nCREATE TABLE Contract_Change_Record (\n    Change_Amount INTEGER,\n    Change_Content VARCHAR(255),\n    Change_Date DATETIME,\n    Change_Number INTEGER PRIMARY KEY,\n    Contract_Number INTEGER NOT NULL,\n    FOREIGN KEY (Contract_Number) REFERENCES Contract(Contract_Number)\n);", "remarks": "CS 1/22 round2 edit", "assign_to": "tk", "assign_to_round2": "cs", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a7dc", "question": "Civil Engineering Project Quality Inspection Management System\nThe main function of the Civil Engineering Project Quality Inspection Management System is to manage the basic information of civil engineering projects and track the quality inspection process for each project. The system supports project entry and management, inspector management, and the record-keeping of each quality inspection, ensuring that the project quality meets the required standards. The following are the specific business descriptions:\nCivil Engineering Project Management:\nThe system can manage detailed information for multiple civil engineering projects, including project name, project manager, start date, expected completion date, actual completion date, project budget, and project location. The project management function helps monitor the execution progress and budget control of the projects, ensuring that the projects proceed according to plan.\nInspector Management:\nThe system can record and manage the quality inspectors’ information for the projects, including the inspector’s name, position, and contact information. Inspectors are a critical part of project quality control, and the system ensures that each project is assigned qualified personnel to carry out quality inspections.\nProject Quality Inspection Tracking:\nThe system can track the quality inspection status for each project, including the inspector, inspection date, inspection content, and inspection results. Each inspection record is associated with the corresponding project and inspector, ensuring that the project quality meets the required standards. Detailed information from each inspection is recorded to provide a basis for future reviews and improvements.\nThrough these features, the system helps project managers comprehensively monitor project progress, quality inspection status, and personnel allocation, ensuring that civil engineering projects are executed efficiently and meet quality standards.", "answer": "CREATE TABLE Civil_Engineering_Project (\n    Actual_Completion_Date DATETIME,\n    Expected_Completion_Date DATETIME,\n    Project_Budget FLOAT,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Location VARCHAR(255),\n    Project_Manager VARCHAR(255),\n    Project_Name VARCHAR(255),\n    Start_Date DATETIME\n);\n\nCREATE TABLE Inspector (\n    Contact_Information VARCHAR(255),\n    Inspector_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Project_Quality_Inspection (\n    Inspection_Content VARCHAR(255),\n    Inspection_Date DATETIME,\n    Inspection_Result VARCHAR(255),\n    Inspector_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    PRIMARY KEY (Project_ID, Inspector_ID, Inspection_Date),\n    FOREIGN KEY (Inspector_ID) REFERENCES Inspector(Inspector_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Civil_Engineering_Project(Project_ID)\n);", "remarks": "CS 2025/1/22 round2 edit\n", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["建筑业", "土木工程建筑业"]}
{"id": "67552f0a13602ec03b41a7e2", "question": "The Company Manages Multiple Civil Engineering Projects\nEach project has a project ID, name, location, start date, expected completion date, actual completion date, and is supervised by a project manager. Each building is part of a project and records the number of floors, area, and price. Sales records track the sales status of buildings, involving sales personnel and customer information. The sales personnel include their ID, name, position, and contact information. The project manager includes their ID, name, position, and contact information.", "answer": "CREATE TABLE Sales_Personnel (\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Sales_Personnel_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Project_Manager (\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Project_Manager_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Civil_Engineering_Project (\n    Actual_Completion_Date DATETIME,\n    Expected_Completion_Date DATETIME,\n    Location VARCHAR(255),\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Manager_ID INTEGER NOT NULL,\n    Project_Name VARCHAR(255),\n    Start_Date DATETIME,\n    FOREIGN KEY (Project_Manager_ID) REFERENCES Project_Manager(Project_Manager_ID)\n);\n\nCREATE TABLE Building (\n    Area FLOAT,\n    Building_ID INTEGER PRIMARY KEY,\n    Number_of_Floors INTEGER,\n    Price FLOAT,\n    Project_ID INTEGER NOT NULL,\n    FOREIGN KEY (Project_ID) REFERENCES Civil_Engineering_Project(Project_ID)\n);\n\nCREATE TABLE Building_Sale (\n    Building_ID INTEGER NOT NULL,\n    Customer_Contact_Information VARCHAR(255),\n    Customer_Name VARCHAR(255),\n    Price FLOAT,\n    Sales_Date DATETIME,\n    Sales_Personnel_ID INTEGER NOT NULL,\n    PRIMARY KEY (Building_ID, Sales_Personnel_ID, Sales_Date),\n    FOREIGN KEY (Building_ID) REFERENCES Building(Building_ID),\n    FOREIGN KEY (Sales_Personnel_ID) REFERENCES Sales_Personnel(Sales_Personnel_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szh", "domain": ["建筑业", "土木工程建筑业"]}
{"id": "67552f0a13602ec03b41a7e6", "question": "The main functions of a real estate sales management system are to manage real estate sales information and track the sales activities of each salesperson. The system supports the management of property information, customer information entry, salesperson assignment, and the recording and tracking of sales contracts. The following are specific business descriptions:\n\nProperty Management:\n\nThe system shall be able to manage detailed information of multiple properties, including the property address, area, sales price, and sales status. The property management function helps administrators and salespeople understand the basic situation of each property and its current sales status (such as whether it has been sold), providing information support for subsequent sales work.\n\nSalesperson Management:\n\nThe system shall be able to record and manage the basic information of salespeople, including name, phone number, and email. Salespeople are key roles in the sales process, and the system ensures reasonable allocation and execution of sales tasks by managing salesperson information.\n\nCustomer Management:\n\nThe system shall be able to manage the basic information of customers, including name, phone number, email, and address. Customer information is the core of sales activities, ensuring that salespeople can provide property information based on customer needs, follow up on the sales process, and ultimately facilitate transactions.\n\nSales Contract Management:\n\nThe system shall be able to record and manage sales contracts signed with customers, including contract date, contract price, signing time, and specific content of the contract. Each sales contract is associated with a specific property and customer, ensuring that the contract fulfillment process can be effectively tracked.\n\nSales Tracking:\n\nThe system shall be able to record the properties sold by each salesperson and track the execution status of each sales contract. The relationship table between salespeople and sales contracts can help the company understand the performance of each salesperson, which properties have been successfully sold, and which sales processes need further follow-up.\n\nThrough the above functions, the system can help real estate companies efficiently manage property resources, interactions between salespeople and customers, and the execution of sales contracts, ensuring that sales activities proceed smoothly and maximize performance.", "answer": "CREATE TABLE Property_Information (\n    Property_Address VARCHAR(255),\n    Property_Area VARCHAR(255),\n    Property_ID INTEGER PRIMARY KEY,\n    Sales_Price FLOAT,\n    Sales_Status VARCHAR(255)\n);\n\nCREATE TABLE Salesperson (\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Salesperson_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Customer_Information (\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Sales_Contract (\n    Contract_Date DATETIME,\n    Contract_Price FLOAT,\n    Contract_Signing_Time INTEGER,\n    Contract_Specific_Content VARCHAR(255),\n    Customer_ID INTEGER NOT NULL,\n    Property_ID INTEGER NOT NULL,\n    Sales_Contract_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer_Information(Customer_ID),\n    FOREIGN KEY (Property_ID) REFERENCES Property_Information(Property_ID)\n);\n\nCREATE TABLE Salesperson_Sold_Property (\n    Sales_Contract_ID INTEGER NOT NULL,\n    Salesperson_ID INTEGER NOT NULL,\n    PRIMARY KEY (Salesperson_ID, Sales_Contract_ID),\n    FOREIGN KEY (Sales_Contract_ID) REFERENCES Sales_Contract(Sales_Contract_ID),\n    FOREIGN KEY (Salesperson_ID) REFERENCES Salesperson(Salesperson_ID)\n);", "remarks": "CS 1/22 round2 edit", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a7e7", "question": "Business requirement description:\nThe real estate company manages the property management of multiple communities. Each community has a community number, name, location and property manager. The property manager can manage multiple communities, but each community has only one property manager, and the name, phone number and email address of the property manager need to be recorded. Each community has multiple residents, and each resident has a resident number, name, phone number, email address and building number. Every time the property is repaired, the maintenance order number, community number, resident number, maintenance date, maintenance content, maintenance cost and maintenance personnel information must be recorded. The maintenance personnel information includes the maintenance personnel number, name and phone number.", "answer": "CREATE TABLE Property_Manager (\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Property_Manager_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Repair_Staff (\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Repair_Staff_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Community (\n    Community_ID INTEGER PRIMARY KEY,\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Property_Manager_ID INTEGER NOT NULL,\n    FOREIGN KEY (Property_Manager_ID) REFERENCES Property_Manager(Property_Manager_ID)\n);\n\nCREATE TABLE Resident (\n    Building_ID INTEGER,\n    Community_ID INTEGER NOT NULL,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Resident_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Community_ID) REFERENCES Community(Community_ID)\n);\n\nCREATE TABLE Management (\n    Community_ID INTEGER NOT NULL,\n    Property_Manager_ID INTEGER NOT NULL,\n    PRIMARY KEY (Property_Manager_ID, Community_ID),\n    FOREIGN KEY (Community_ID) REFERENCES Community(Community_ID),\n    FOREIGN KEY (Property_Manager_ID) REFERENCES Property_Manager(Property_Manager_ID)\n);\n\nCREATE TABLE Repair_Order (\n    Community_ID INTEGER NOT NULL,\n    Repair_Content VARCHAR(255),\n    Repair_Cost FLOAT,\n    Repair_Date DATETIME,\n    Repair_Order_ID INTEGER PRIMARY KEY,\n    Repair_Staff_ID INTEGER NOT NULL,\n    Resident_ID INTEGER NOT NULL,\n    FOREIGN KEY (Community_ID) REFERENCES Community(Community_ID),\n    FOREIGN KEY (Repair_Staff_ID) REFERENCES Repair_Staff(Repair_Staff_ID),\n    FOREIGN KEY (Resident_ID) REFERENCES Resident(Resident_ID)\n);\n\nCREATE TABLE Residence (\n    Building_ID INTEGER,\n    Community_ID INTEGER NOT NULL,\n    Resident_ID INTEGER NOT NULL,\n    PRIMARY KEY (Resident_ID, Community_ID),\n    FOREIGN KEY (Community_ID) REFERENCES Community(Community_ID),\n    FOREIGN KEY (Resident_ID) REFERENCES Resident(Resident_ID)\n);\n\nCREATE TABLE Execution (\n    Repair_Order_ID INTEGER NOT NULL,\n    Repair_Staff_ID INTEGER NOT NULL,\n    PRIMARY KEY (Repair_Order_ID, Repair_Staff_ID),\n    FOREIGN KEY (Repair_Order_ID) REFERENCES Repair_Order(Repair_Order_ID),\n    FOREIGN KEY (Repair_Staff_ID) REFERENCES Repair_Staff(Repair_Staff_ID)\n);", "remarks": "修改需求描述，增加了维修人员、物业经理信息属性", "assign_to": "szh", "assign_to_round2": "gcc", "domain": ["房地产业", "房地产业"]}
{"id": "67552f0a13602ec03b41a7f3", "question": "This is a real estate company's property market analysis system. For property basic information management, the system records property ID, address, area, sales price and sales date. For analysis report management, the system maintains report ID, report date, report type (such as sales trends, price analysis, etc.) and analysis results. For the report generation process, each time when generating an analysis report, the system records the report ID, property ID, report date, report type and analysis results.", "answer": "CREATE TABLE Property (\n    Address VARCHAR(255),\n    Area FLOAT,\n    Property_ID INTEGER PRIMARY KEY,\n    Sales_date DATETIME,\n    Sales_price FLOAT\n);\n\nCREATE TABLE Analysis_report (\n    Analysis_result VARCHAR(255),\n    Property_ID INTEGER NOT NULL,\n    Report_ID INTEGER PRIMARY KEY,\n    Report_date DATETIME,\n    Report_type VARCHAR(255),\n    FOREIGN KEY (Property_ID) REFERENCES Property(Property_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["房地产业", "房地产业"]}
{"id": "67552f0a13602ec03b41a7fe", "question": "The retail supermarket needs to develop a membership points management system to manage members' points, shopping records, and point redemption records.\n  The system shall record basic information of members, including Member ID, Name, Phone Number, and Current Points. Each member shall have a unique Member ID.\n  Each time a member shops, the system shall record the Shopping Time, Total Price of Goods, and Points Change. The shopping record shall be associated with the member, and each purchase shall affect the member's points (increase or decrease).\n  In addition, the system shall also record members' point redemption records, including Redemption Time, Redeemed Product Name, Redemption Quantity, and Points Consumed. Each redemption shall reduce the member's points, and the redemption record shall also be associated with the member.\n  The system shall support querying all shopping records, all point redemption records, and current points of a specific member.\n", "answer": "CREATE TABLE Member (\n    Current_Points INTEGER,\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number INTEGER\n);\n\nCREATE TABLE Shopping_Record (\n    Member_ID INTEGER NOT NULL,\n    Points_Change INTEGER,\n    Shopping_Time DATETIME,\n    Total_Price_of_Goods FLOAT,\n    PRIMARY KEY (Member_ID, Shopping_Time),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);\n\nCREATE TABLE Point_Redemption_Record (\n    Member_ID INTEGER NOT NULL,\n    Points_Consumed INTEGER,\n    Redeemed_Product_Name VARCHAR(255),\n    Redemption_Quantity INTEGER,\n    Redemption_Time DATETIME,\n    PRIMARY KEY (Member_ID, Redemption_Time),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);", "remarks": "外键格式问题，将中文改为schema_x格式", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a7ff", "question": "The news publishing company needs to manage the submission, review, and publishing process of news articles. Each reporter can submit multiple articles, and each article needs to be reviewed by an editor. After passing the review, the article is published by a publisher. The system needs to record the submission time, review time, and publishing time of each article, as well as the information of the reporter, editor, and publisher.\n", "answer": "CREATE TABLE Reporter (\n    Email VARCHAR(255),\n    Phone VARCHAR(255),\n    Reporter_ID INTEGER PRIMARY KEY,\n    Reporter_Name VARCHAR(255)\n);\n\nCREATE TABLE News_Article (\n    Article_Content VARCHAR(255),\n    Article_ID INTEGER PRIMARY KEY,\n    Article_Title VARCHAR(255),\n    Publish_Time DATETIME,\n    Review_Time DATETIME,\n    Submission_Time DATETIME\n);\n\nCREATE TABLE Editor (\n    Editor_ID INTEGER PRIMARY KEY,\n    Editor_Name VARCHAR(255),\n    Email VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Publisher (\n    Email VARCHAR(255),\n    Phone VARCHAR(255),\n    Publisher_ID INTEGER PRIMARY KEY,\n    Publisher_Name VARCHAR(255)\n);\n\nCREATE TABLE Article_Reporter_Table (\n    Article_ID INTEGER NOT NULL,\n    Reporter_ID INTEGER NOT NULL,\n    PRIMARY KEY (Article_ID, Reporter_ID),\n    FOREIGN KEY (Article_ID) REFERENCES News_Article(Article_ID),\n    FOREIGN KEY (Reporter_ID) REFERENCES Reporter(Reporter_ID)\n);\n\nCREATE TABLE Article_Editor_Table (\n    Article_ID INTEGER NOT NULL,\n    Editor_ID INTEGER NOT NULL,\n    PRIMARY KEY (Article_ID, Editor_ID),\n    FOREIGN KEY (Article_ID) REFERENCES News_Article(Article_ID),\n    FOREIGN KEY (Editor_ID) REFERENCES Editor(Editor_ID)\n);\n\nCREATE TABLE Article_Publisher_Table (\n    Article_ID INTEGER NOT NULL,\n    Publisher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Article_ID, Publisher_ID),\n    FOREIGN KEY (Article_ID) REFERENCES News_Article(Article_ID),\n    FOREIGN KEY (Publisher_ID) REFERENCES Publisher(Publisher_ID)\n);", "remarks": "将原有的稿件schema外键移除，并添加了稿件记者表、稿件编辑表、稿件发布人员表", "assign_to": "szc", "assign_to_round2": "hzb", "domain": ["文化、体育和娱乐业", "新闻和出版业"]}
{"id": "67552f0a13602ec03b41a800", "question": "The manuscript management process for a news organization is as follows: The organization employs multiple reporters, with reporter information including Reporter ID, name, email, and phone number. Reporters write news manuscripts, with manuscript information including Manuscript ID, title, content, submission time, review time, publication time, and status. Each manuscript is written by multiple reporters and is reviewed by multiple editors, with editor information including Editor ID, name, email, and phone number. Once approved, the manuscript is handed over to multiple publishers responsible for different sections, with publisher information including Publisher ID, name, email, and phone number. Each manuscript undergoes two stages after submission: review and publication, with review and publication times recorded separately. Manuscript status includes pending review, reviewed, and published.", "answer": "CREATE TABLE Reporter (\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Reporter_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Editor (\n    Editor_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Publisher (\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Publisher_ID INTEGER PRIMARY KEY,\n    Responsible_Section VARCHAR(255)\n);\n\nCREATE TABLE Manuscript (\n    Content VARCHAR(255),\n    Manuscript_ID INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Writing_Record (\n    Manuscript_ID INTEGER NOT NULL,\n    Manuscript_Submission_Time DATETIME,\n    Reporter_ID INTEGER NOT NULL,\n    Responsible_Part VARCHAR(255),\n    PRIMARY KEY (Reporter_ID, Manuscript_ID, Manuscript_Submission_Time, Responsible_Part),\n    FOREIGN KEY (Manuscript_ID) REFERENCES Manuscript(Manuscript_ID),\n    FOREIGN KEY (Reporter_ID) REFERENCES Reporter(Reporter_ID)\n);\n\nCREATE TABLE Review_Record (\n    Editor_ID INTEGER NOT NULL,\n    Manuscript_ID INTEGER NOT NULL,\n    Manuscript_Review_Time DATETIME,\n    Review_Part VARCHAR(255),\n    PRIMARY KEY (Editor_ID, Manuscript_ID, Manuscript_Review_Time, Review_Part),\n    FOREIGN KEY (Editor_ID) REFERENCES Editor(Editor_ID),\n    FOREIGN KEY (Manuscript_ID) REFERENCES Manuscript(Manuscript_ID)\n);\n\nCREATE TABLE Publication_Record (\n    Manuscript_ID INTEGER NOT NULL,\n    Publication_Time DATETIME,\n    Publisher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Publisher_ID, Manuscript_ID, Publication_Time),\n    FOREIGN KEY (Manuscript_ID) REFERENCES Manuscript(Manuscript_ID),\n    FOREIGN KEY (Publisher_ID) REFERENCES Publisher(Publisher_ID)\n);", "remarks": "将schema_5的稿件提交时间改为稿件审核时间", "assign_to": "lzm", "assign_to_round2": "hzb", "domain": ["文化、体育和娱乐业", "新闻和出版业"]}
{"id": "67552f0a13602ec03b41a801", "question": "The broadcasting station requires management of multiple programs, each with multiple hosts and time slots. The system needs to record the name, type, and broadcast time of each program, as well as the information of the hosts and the arrangement of the time slots.", "answer": "CREATE TABLE Program (\n    Program_ID INTEGER PRIMARY KEY,\n    Program_Name VARCHAR(255),\n    Program_Type VARCHAR(255)\n);\n\nCREATE TABLE Host (\n    Contact_Information VARCHAR(255),\n    Host_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Host_Program_Assignment (\n    Host_ID INTEGER NOT NULL,\n    Program_ID INTEGER NOT NULL,\n    Time_Slot VARCHAR(255),\n    PRIMARY KEY (Host_ID, Program_ID, Time_Slot),\n    FOREIGN KEY (Host_ID) REFERENCES Host(Host_ID),\n    FOREIGN KEY (Program_ID) REFERENCES Program(Program_ID)\n);", "remarks": "WQ:无修改", "assign_to": "lzm", "assign_to_round2": "wq", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a810", "question": "The system manages the copyright information of movies, primarily including key data such as movies, copyright holders, and licenses. The Movie table records the basic information of a movie, comprising \"Movie ID,\"\"Name,\"\"Type,\" and \"Release Date.\" The Copyright Holder table is used to record detailed information of copyright holders, including \"Holder ID,\"\"Name,\"\"Email,\" and \"Phone.\" The License table uses \"License ID\" as the Primary key, linked to \"Movie ID\" (Foreign key, referencing the Movie table) and \"Holder ID\" (Foreign key, referencing the Copyright Holder table), documenting the type of license, start time, and end time, clarifying the licensing relationship between copyright holders and movies. The entire system effectively manages the movie's copyright holdings, licensing periods, and related holder information, ensuring the compliance and transparency of copyrights.\n", "answer": "CREATE TABLE Movie (\n    Movie_ID INTEGER PRIMARY KEY,\n    Movie_Name VARCHAR(255),\n    Movie_Type VARCHAR(255),\n    Release_Date DATETIME\n);\n\nCREATE TABLE Copyright_Holder (\n    Email VARCHAR(255),\n    Holder_ID INTEGER PRIMARY KEY,\n    Holder_Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE License_Movie (\n    End_Time DATETIME,\n    Holder_ID INTEGER NOT NULL,\n    License_Type VARCHAR(255),\n    Movie_ID INTEGER NOT NULL,\n    Start_Time DATETIME,\n    PRIMARY KEY (Movie_ID, Holder_ID),\n    FOREIGN KEY (Holder_ID) REFERENCES Copyright_Holder(Holder_ID),\n    FOREIGN KEY (Movie_ID) REFERENCES Movie(Movie_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "gcc", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a813", "question": "Reservoir and River Resource Management System\nThe primary function of the system is to monitor, maintain, and manage water resources such as reservoirs and rivers. The system supports the management of resource information, recording of monitoring and maintenance personnel, and detailed tracking of various monitoring and maintenance activities.\nResource Management:\nThe system can manage basic information about reservoirs and rivers, including the resource name, location, and type. This information helps classify, locate, and manage various water resources, ensuring efficient resource scheduling and utilization.\nResource Monitoring:\nThe system can record water resource monitoring activities, including the monitoring personnel, monitoring time, monitoring point, water quality indicators, water volume data, and pollution level. Monitoring personnel are responsible for collecting data related to water resources periodically or irregularly. The system helps track each monitoring result to ensure that changes in water quality and volume are detected promptly and appropriate actions are taken.\nResource Maintenance:\nThe system can record and manage maintenance activities for reservoirs and rivers, including maintenance personnel, maintenance time, maintenance content, and maintenance costs. Each maintenance task is performed by specialized personnel, and the system can record the details and costs of each maintenance activity for later management and budget analysis.\nPersonnel Management:\nThe system manages the information of all personnel involved in water resource monitoring and maintenance, including monitoring personnel and maintenance personnel’s names, phone numbers, and positions. The personnel management module ensures that each individual involved in the project is traceable and that relevant personnel can be contacted promptly during task execution.\nMonitoring and Maintenance Tracking:\nThe system can accurately track each water resource monitoring and maintenance activity, including the specific time, location, personnel, and related content. Through the system’s tracking function, all monitoring and maintenance activities are clearly recorded, contributing to the transparency and standardization of water resource management and ensuring traceability of future issues.\nThrough these functions, the system can effectively manage the operation status of water resources, monitor changes in water quality and volume, and promptly take maintenance and corrective actions when resource issues arise. Additionally, by managing personnel and tracking monitoring and maintenance data, the system ensures the safety and long-term sustainability of the resources.", "answer": "CREATE TABLE Reservoir_and_River (\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Resource_ID INTEGER PRIMARY KEY,\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Monitoring_Personnel (\n    Monitoring_Personnel_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_Personnel (\n    Maintenance_Personnel_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Resource_Monitoring (\n    Monitoring_Personnel_ID INTEGER NOT NULL,\n    Monitoring_Point VARCHAR(255),\n    Monitoring_Time DATETIME,\n    Pollution_Level VARCHAR(255),\n    Resource_ID INTEGER NOT NULL,\n    Water_Quality_Indicators VARCHAR(255),\n    Water_Volume_Data DATETIME,\n    PRIMARY KEY (Resource_ID, Monitoring_Personnel_ID, Monitoring_Time),\n    FOREIGN KEY (Monitoring_Personnel_ID) REFERENCES Monitoring_Personnel(Monitoring_Personnel_ID),\n    FOREIGN KEY (Resource_ID) REFERENCES Reservoir_and_River(Resource_ID)\n);\n\nCREATE TABLE Resource_Maintenance (\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Cost FLOAT,\n    Maintenance_Personnel_ID INTEGER NOT NULL,\n    Maintenance_Time DATETIME,\n    Resource_ID INTEGER NOT NULL,\n    PRIMARY KEY (Resource_ID, Maintenance_Personnel_ID, Maintenance_Time),\n    FOREIGN KEY (Maintenance_Personnel_ID) REFERENCES Maintenance_Personnel(Maintenance_Personnel_ID),\n    FOREIGN KEY (Resource_ID) REFERENCES Reservoir_and_River(Resource_ID)\n);", "remarks": "CS 1/22 round2 edit", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["水利、环境和公共设施管理业", "水利管理业"]}
{"id": "67552f0a13602ec03b41a817", "question": "Land Management System Functionalities:\n\nThe primary functions of a land management system include managing land resources, tracking project usage, and recording land changes. The system supports the management of land information, project usage records, and changes to the land to facilitate comprehensive land resource management and optimization. Below is a detailed business description:\n\nLand Resource Management:\n\nThe system can manage basic land information, including land location and overall area, ensuring that the allocation, management, and use of land resources are effectively recorded and tracked.\n\nProject Management and Land Usage:\n\nThe system can record information about the land used by each project, including the project's name, location, purpose, and responsible person. During land usage by a project, the system tracks the area of land used, years of usage, and current status in detail. These details ensure that the use of land resources matches project requirements and allows for timely adjustments to land usage strategies.\n\nLand Change Records:\n\nThe system can record detailed information about each land change, including the content of the change, reason for the change, costs associated, and the time of the change. Each land change incurs costs, and the system can track the costs of these changes and analyze the specific reasons and contexts for the changes.\n\nLand Usage Tracking:\n\nThe system can comprehensively track the usage of land for each project, including recording the area of land used, years of usage, and the current state of the land. Additionally, the system tracks each record's personnel and timing, ensuring transparency and standardization in land usage.\n\nThrough these functionalities, the system helps management departments clearly understand the status of land usage, changes, and related costs, thereby better planning and making decisions regarding land resources. Moreover, the system ensures that all aspects of land changes and project implementation are thoroughly recorded and reviewed, enhancing management efficiency and accuracy.", "answer": "CREATE TABLE Land (\n    Land_ID INTEGER PRIMARY KEY,\n    Land_Location VARCHAR(255),\n    Total_Land_Area FLOAT\n);\n\nCREATE TABLE Project (\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Location VARCHAR(255),\n    Project_Name VARCHAR(255),\n    Purpose VARCHAR(255),\n    Responsible_Person VARCHAR(255)\n);\n\nCREATE TABLE Land_Change (\n    Change_Content VARCHAR(255),\n    Change_Cost FLOAT,\n    Change_ID INTEGER PRIMARY KEY,\n    Change_Reason VARCHAR(255),\n    Change_Time DATETIME,\n    Land_ID INTEGER NOT NULL,\n    FOREIGN KEY (Land_ID) REFERENCES Land(Land_ID)\n);\n\nCREATE TABLE Land_Usage_Status (\n    Current_Status VARCHAR(255),\n    Land_ID INTEGER NOT NULL,\n    Land_Usage_Area FLOAT,\n    Project_ID INTEGER NOT NULL,\n    Record_Personnel VARCHAR(255),\n    Record_Time DATETIME,\n    Usage_Years INTEGER,\n    PRIMARY KEY (Land_ID, Project_ID, Record_Time),\n    FOREIGN KEY (Land_ID) REFERENCES Land(Land_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "CS 2025/1/22 round2 edit", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["水利、环境和公共设施管理业", "土地管理业"]}
{"id": "67552f0a13602ec03b41a81e", "question": "The heating company needs to manage information about its users and their heat supply status. Each user has an ID, name, address, and contact information. For each heat supply instance, the supply date, supply quantity, user ID, and operator ID need to be recorded. Each operator has an ID, name, department, and contact information.\n", "answer": "CREATE TABLE User (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Operator (\n    Contact_Information VARCHAR(255),\n    Department VARCHAR(255),\n    Name VARCHAR(255),\n    Operator_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Supply_Record (\n    Operator_ID INTEGER NOT NULL,\n    Supply_Date DATETIME,\n    Supply_Quantity INTEGER,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Record_ID, Supply_Date),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "修改功能描述，去掉markdown格式", "assign_to": "szc", "assign_to_round2": "hzb", "domain": ["生活生产和供应业", "电力、热力生产和供应业"]}
{"id": "67552f0a13602ec03b41a821", "question": "The power company needs to track the electricity consumption of each user. A user has an ID, name, address, and contact information. Each electricity usage record includes the record time, electricity consumption, user ID, and operator ID. An operator has an ID, name, department, and contact information.", "answer": "CREATE TABLE Operator (\n    Contact_Information VARCHAR(255),\n    Department INTEGER,\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Electricity_Usage_Record (\n    Electricity_Consumption FLOAT,\n    Operator_ID INTEGER NOT NULL,\n    Record_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Operator_ID, User_ID, Record_Time),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(ID),\n    FOREIGN KEY (User_ID) REFERENCES User(ID)\n);", "remarks": "WQ: 修改外键格式。", "assign_to": "zp", "assign_to_round2": "wq", "domain": ["生活生产和供应业", "电力、热力生产和供应业"]}
{"id": "67552f0a13602ec03b41a823", "question": "The gas company needs to manage the billing information of users. Users have a User ID, name, address, and contact information. Each billing record includes a Bill ID, Bill Date, Bill Amount, User ID, and Operator ID. Operators have an Operator ID, name, department, and contact information.", "answer": "CREATE TABLE Operator (\n    Contact_Information VARCHAR(255),\n    Department VARCHAR(255),\n    Name VARCHAR(255),\n    Operator_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE User (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Billing_Record (\n    Bill_Amount VARCHAR(255),\n    Bill_Date DATETIME,\n    Operator_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Bill_Date),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "dyq", "domain": ["生活生产和供应业", "燃气生产和供应业"]}
{"id": "67552f0a13602ec03b41a824", "question": "Equipment Repair Management\n\nA water treatment company needs to manage the maintenance of equipment as a sub-business. Each piece of equipment has an ID, name, model, installation location, and installation date. Each maintenance record includes the maintenance date, maintenance content, maintainer ID, and equipment ID. Each maintainer has an ID, name, department, and contact information.", "answer": "CREATE TABLE Equipment (\n    ID INTEGER PRIMARY KEY,\n    Installation_Date DATETIME,\n    Installation_Location VARCHAR(255),\n    Model VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Maintainer (\n    Contact_Information VARCHAR(255),\n    Department VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_Record (\n    Equipment_ID INTEGER NOT NULL,\n    Maintainer_ID INTEGER NOT NULL,\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Date DATETIME,\n    PRIMARY KEY (Maintainer_ID, Equipment_ID),\n    FOREIGN KEY (Equipment_ID) REFERENCES Equipment(ID),\n    FOREIGN KEY (Maintainer_ID) REFERENCES Maintainer(ID)\n);", "remarks": "多对多关系，维修人员维修主键多余", "assign_to": "zp", "assign_to_round2": "gcc", "domain": ["居民服务、修理和其他服务业", "机动车、电子产品和日用产品修理业"]}
{"id": "67552f0a13602ec03b41a825", "question": "Equipment Inspection Management System Functionality:\n\nThe primary function of the Equipment Inspection Management System is to manage the inspection records of equipment, ensuring normal operation and timely maintenance of the equipment. The system supports the entry of basic equipment information, management of inspection personnel, and records the specific data of each equipment inspection. Below is the detailed business description:\n\nEquipment Management:\n\nThe system is capable of managing the basic information of the equipment, including the equipment name, model, installation location, and installation date. Equipment is uniquely identified by an equipment ID, ensuring the completeness and traceability of equipment information.\n\nInspection Personnel Management:\n\nThe system can record the basic information of inspection personnel, including name, department, and contact information. Managing inspection personnel helps ensure that each piece of equipment has designated personnel responsible for inspection, and the related inspection records can be tracked via the inspection personnel ID.\n\nInspection Record Tracking:\n\nThe system is able to record each inspection of the equipment, including detailed information such as the inspection personnel, inspection date, and inspection content. Each inspection record is associated with an equipment ID, inspection personnel ID, and inspection date to effectively track and manage the status of the equipment. These records allow management personnel to timely understand the inspection status of equipment, identify potential problems, and take measures.\n\nThe system ensures timely inspections of equipment by comprehensively managing equipment information, inspection personnel, and inspection records, reducing the likelihood of malfunctions, and enhancing the efficiency and safety of equipment management.\n", "answer": "CREATE TABLE Equipment (\n    Equipment_ID INTEGER PRIMARY KEY,\n    Equipment_Model VARCHAR(255),\n    Equipment_Name VARCHAR(255),\n    Installation_Date DATETIME,\n    Installation_Location VARCHAR(255)\n);\n\nCREATE TABLE Inspection_Personnel (\n    Contact_Information VARCHAR(255),\n    Department INTEGER,\n    Inspection_Personnel_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Inspection_Record (\n    Equipment_ID INTEGER NOT NULL,\n    Inspection_Content VARCHAR(255),\n    Inspection_Date DATETIME,\n    Inspection_Personnel_ID INTEGER NOT NULL,\n    PRIMARY KEY (Equipment_ID, Inspection_Personnel_ID, Inspection_Date),\n    FOREIGN KEY (Equipment_ID) REFERENCES Equipment(Equipment_ID),\n    FOREIGN KEY (Inspection_Personnel_ID) REFERENCES Inspection_Personnel(Inspection_Personnel_ID)\n);", "remarks": "CS  2025/1/22 round2 edit", "assign_to": "szc", "assign_to_round2": "cs", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a826", "question": "The heating company needs to manage fault occurrences during the heat supply process. Each fault has a description, occurrence date, resolution date, and handler ID. The handler has an ID, name, department, and contact information. Each fault record must be associated with the affected user ID. The user needs to record a name, address, and contact information.", "answer": "CREATE TABLE Handler (\n    Contact_Information VARCHAR(255),\n    Department VARCHAR(255),\n    Handler_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Fault_Handling (\n    Affected_User_ID INTEGER,\n    Description VARCHAR(255),\n    Fault_ID INTEGER PRIMARY KEY,\n    Handler_ID INTEGER NOT NULL,\n    Occurrence_Date DATETIME,\n    Resolution_Date DATETIME,\n    FOREIGN KEY (Handler_ID) REFERENCES Handler(Handler_ID)\n);", "remarks": "缺少用户实体，故障记录应该是关系", "assign_to": "lzm", "assign_to_round2": "gcc", "domain": ["生活生产和供应业", "电力、热力生产和供应业"]}
{"id": "67552f0a13602ec03b41a82a", "question": "The Technical Document Management Department manages multiple technical documents, and each document is written by multiple authors. A document has a Document ID, Title, Creation Date, and Version Number. An author has an ID, Name, Date of Birth, Gender, Phone Number, and Position. The document version record needs to record the Modification ID, Document ID, Version Number, Modification Date, Modifying Author, and Modification Content.", "answer": "CREATE TABLE Document (\n    Creation_Date DATETIME,\n    Document_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255),\n    Version_Number VARCHAR(255)\n);\n\nCREATE TABLE Author (\n    Author_ID INTEGER PRIMARY KEY,\n    Date_of_Birth DATETIME,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Modification_Record (\n    Document_ID INTEGER NOT NULL,\n    Modification_Content VARCHAR(255),\n    Modification_Date DATETIME,\n    Modifying_Author_ID INTEGER NOT NULL,\n    Version_Number VARCHAR(255),\n    PRIMARY KEY (Document_ID, Modification_Date, Modifying_Author_ID),\n    FOREIGN KEY (Document_ID) REFERENCES Document(Document_ID),\n    FOREIGN KEY (Modifying_Author_ID) REFERENCES Author(Author_ID)\n);", "remarks": "调整了schema_2的主键,移除了schema_2的修改编号", "assign_to": "zp", "assign_to_round2": "hzb", "domain": ["科学研究和技术服务业", "专业技术服务业"]}
{"id": "67552f0a13602ec03b41a82b", "question": "The business requirements description for the scientific and technological achievement transformation database is as follows: The department responsible for the transformation of scientific and technological achievements manages multiple achievements, each of which can be transformed into several products. A scientific and technological achievement is characterized by an achievement number, name, research and development date, and technical field. A product is characterized by a product number, name, model, barcode, price, and transformation date. The achievement transformation record needs to document the achievement number, product number, and transformation date.", "answer": "CREATE TABLE Scientific_and_Technological_Achievement (\n    Achievement_Number VARCHAR(255) PRIMARY KEY,\n    Name VARCHAR(255),\n    Research_and_Development_Date DATETIME,\n    Technical_Field VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Barcode BLOB,\n    Model VARCHAR(255),\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_Number VARCHAR(255) PRIMARY KEY,\n    Transformation_Date DATETIME\n);\n\nCREATE TABLE Achievement_Transformation (\n    Achievement_Number VARCHAR(255) NOT NULL,\n    Product_Number VARCHAR(255) NOT NULL,\n    Transformation_Date DATETIME,\n    PRIMARY KEY (Achievement_Number, Product_Number),\n    FOREIGN KEY (Achievement_Number) REFERENCES Scientific_and_Technological_Achievement(Achievement_Number),\n    FOREIGN KEY (Product_Number) REFERENCES Product(Product_Number)\n);", "remarks": "WQ:修改了外键格式。", "assign_to": "cyx", "assign_to_round2": "wq", "domain": ["科学研究和技术服务业", "科技推广和应用服务业"]}
{"id": "67552f0a13602ec03b41a834", "question": "A rental company needs to manage customer credit records. Customers have name, phone number, and credit score. Each rental needs to record rental time, return time, and rental fee. The company needs to track changes in customer credit, with each record including change time, change reason, old credit value, and new credit value, to facilitate credit assessment and performance evaluation.", "answer": "CREATE TABLE Customer (\n    Credit_score INTEGER,\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Rental_record (\n    Customer_ID INTEGER NOT NULL,\n    Record_ID INTEGER PRIMARY KEY,\n    Rental_fee FLOAT,\n    Rental_time DATETIME,\n    Return_time DATETIME,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Credit_change_record (\n    Change_reason VARCHAR(255),\n    Change_time DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    New_credit_value FLOAT,\n    Old_credit_value FLOAT,\n    Record_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);", "remarks": "租赁记录以及信用记录中应该增加客户编号", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["租赁和商务服务业", "租赁业"]}
{"id": "67552f0a13602ec03b41a837", "question": "  The company provides customer service and has multiple customers. Each customer has a unique Customer ID, Name, Phone Number, and Email Address. The company offers various services to customers. Each service has a Service ID, Service Date, Description, and Fee, and is associated with a customer. After each service, the customer can provide satisfaction feedback, including a Rating and Feedback Comments.\n", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Email_Address VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Service (\n    Customer_ID INTEGER NOT NULL,\n    Description VARCHAR(255),\n    Fee FLOAT,\n    Service_Date DATETIME,\n    Service_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Feedback (\n    Customer_ID INTEGER NOT NULL,\n    Feedback_Comments VARCHAR(255),\n    Rating FLOAT,\n    Service_ID INTEGER NOT NULL,\n    PRIMARY KEY (Customer_ID, Service_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Service_ID) REFERENCES Service(Service_ID)\n);", "remarks": "修改了schema_2的主键", "assign_to": "dyq", "assign_to_round2": "hzb", "domain": ["居民服务、修理和其他服务业", "其他服务业"]}
{"id": "67552f0a13602ec03b41a83e", "question": " The primary function of the mine and processing plant production management system is to manage the production situation of the mine, track the extraction and processing of the ore, and ensure the efficiency and traceability of the entire mineral resource extraction and processing flow. The system supports the entry of basic information for mines and processing plants, employee information management, and records data such as the extraction and processing quantities and costs of the ore. The following is a specific business description:\n  \n  Mine Management:\n  The system can manage information for multiple mines, including mine name, location, and the person in charge. Each mine is managed by a person in charge, ensuring that the management and production activities of the mine are effectively supervised and executed.\n  \n  Ore Management:\n  The system can record information for different types of ores, including the ore name and characteristics. As an important resource in mine production, the management of ore information is crucial for production scheduling and subsequent processing.\n  \n  Processing Plant Management:\n  The system can manage basic information for processing plants, including the processing plant name, location, and the person in charge. Each processing plant is managed by a person in charge, ensuring that the processing activities are carried out smoothly and meet quality standards.\n  \n  Ore Output Management:\n  The system can record the types and quantities of ore produced by each mine at specific times. By associating with ore information, it can track the source of the ore and its extraction amount, providing data support for subsequent processing stages.\n  \n  Ore Processing Management:\n  The system can record the processing conditions of each processing plant for the ore, including processing date, processing quantity, and processing cost. Through such records, the processing progress and cost of each batch of ore can be tracked, providing basic data for cost control and output analysis.\n  \n  Employee Management:\n  The system can record all employee information, including name, phone number, gender, age, and contact information. The management of employee information is crucial for the production scheduling and responsibility allocation of the mines and processing plants, ensuring that each task is responsibly handled.\n  \n  Through this system, the production of mines, the extraction and processing of ore, and the management of employees can all be comprehensively monitored and managed. The system provides data support for various stages of mine production, helping decision-makers optimize resource allocation, enhance production efficiency, and ensure the transparency and traceability of the entire production process.\n  ", "answer": "CREATE TABLE Ore (\n    Characteristics VARCHAR(255),\n    Name VARCHAR(255),\n    Ore_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Working_Employees (\n    Age INTEGER,\n    Email VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone INTEGER\n);\n\nCREATE TABLE Mine (\n    Location VARCHAR(255),\n    Mine_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Person_In_Charge_ID INTEGER NOT NULL,\n    FOREIGN KEY (Person_In_Charge_ID) REFERENCES Working_Employees(Employee_ID)\n);\n\nCREATE TABLE Processing_Plant (\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Person_In_Charge_ID INTEGER NOT NULL,\n    Processing_Plant_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Person_In_Charge_ID) REFERENCES Working_Employees(Employee_ID)\n);\n\nCREATE TABLE Output_Ore (\n    Mine_ID INTEGER NOT NULL,\n    Ore_ID INTEGER NOT NULL,\n    Output_Quantity FLOAT,\n    Output_Time DATETIME,\n    PRIMARY KEY (Mine_ID, Ore_ID, Output_Time),\n    FOREIGN KEY (Mine_ID) REFERENCES Mine(Mine_ID),\n    FOREIGN KEY (Ore_ID) REFERENCES Ore(Ore_ID)\n);\n\nCREATE TABLE Processing_Plant_Processing_Ore (\n    Ore_ID INTEGER NOT NULL,\n    Processing_Cost FLOAT,\n    Processing_Date DATETIME,\n    Processing_Plant_ID INTEGER NOT NULL,\n    Processing_Quantity FLOAT,\n    PRIMARY KEY (Ore_ID, Processing_Plant_ID, Processing_Date),\n    FOREIGN KEY (Ore_ID) REFERENCES Ore(Ore_ID),\n    FOREIGN KEY (Processing_Plant_ID) REFERENCES Processing_Plant(Processing_Plant_ID)\n);", "remarks": "CS 2025/1/22 round2 edit", "assign_to": "dyq", "assign_to_round2": "cs", "domain": ["采矿业", "其他采矿业"]}
{"id": "67552f0a13602ec03b41a842", "question": "An oil company owns multiple oil and gas fields, each with multiple pipelines. The pipelines have information such as pipeline ID, starting point, ending point, length, and maintenance records. Oil and gas fields have information including field ID, name, location, and person in charge. For each pipeline maintenance, the system needs to record maintenance date, maintenance content, maintenance personnel, and maintenance cost. This information system should be able to perform statistical analysis on pipeline maintenance.\n", "answer": "CREATE TABLE Oil_and_gas_field (\n    Field_ID INTEGER PRIMARY KEY,\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Person_in_charge VARCHAR(255)\n);\n\nCREATE TABLE Pipeline (\n    Ending_point VARCHAR(255),\n    Length FLOAT,\n    Pipeline_ID INTEGER PRIMARY KEY,\n    Starting_point VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_record (\n    Maintenance_ID INTEGER PRIMARY KEY,\n    Maintenance_content VARCHAR(255),\n    Maintenance_cost FLOAT,\n    Maintenance_date DATETIME,\n    Maintenance_personnel VARCHAR(255),\n    Pipeline_ID INTEGER NOT NULL,\n    FOREIGN KEY (Pipeline_ID) REFERENCES Pipeline(Pipeline_ID)\n);", "remarks": "更新了一些错别字", "assign_to": "hzb", "assign_to_round2": "szh", "domain": ["采矿业", "石油和天然气开采业"]}
{"id": "67552f0a13602ec03b41a847", "question": "The insurance company has multiple insurance agents, each with a unique Agent ID, Name, Hire Date, and Contact Phone Number. An agent can handle insurance business for multiple customers. Each customer has a Customer ID, Name, ID Card Number, and Contact Phone Number. Each insurance policy has a unique Policy Number, Insurance Type (Life, Health, Property), Insured Amount, Insurance Term, and Premium. Each premium payment requires recording the Payment Amount, Payment Time, and Payment Method. In addition, the insurance company needs to keep track of each customer's Claim Records.", "answer": "CREATE TABLE Insurance_Agent (\n    Agent_ID INTEGER PRIMARY KEY,\n    Contact_Phone_Number VARCHAR(255),\n    Hire_Date DATETIME,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Contact_Phone_Number VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    ID_Card_Number VARCHAR(255),\n    Name INTEGER\n);\n\nCREATE TABLE Payment_Record (\n    Payment_Amount VARCHAR(255),\n    Payment_Method VARCHAR(255),\n    Payment_Time DATETIME,\n    Policy_ID INTEGER NOT NULL,\n    PRIMARY KEY (Payment_Time, Policy_ID),\n    FOREIGN KEY (Policy_ID) REFERENCES Payment_Record(Policy_ID)\n);\n\nCREATE TABLE Insurance_Policy (\n    Agent_ID INTEGER NOT NULL,\n    Customer_ID INTEGER NOT NULL,\n    Insurance_Term VARCHAR(255),\n    Insurance_Type VARCHAR(255),\n    Insured_Amount VARCHAR(255),\n    Policy_ID INTEGER PRIMARY KEY,\n    Premium VARCHAR(255),\n    FOREIGN KEY (Agent_ID) REFERENCES Insurance_Agent(Agent_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Claim_Record (\n    Claim_Amount VARCHAR(255),\n    Claim_Time DATETIME,\n    Policy_ID INTEGER NOT NULL,\n    PRIMARY KEY (Policy_ID, Claim_Time),\n    FOREIGN KEY (Policy_ID) REFERENCES Payment_Record(Policy_ID)\n);", "remarks": "WQ:修改主键和外键。", "assign_to": "lzm", "assign_to_round2": "wq", "domain": ["金融业", "保险业"]}
{"id": "67552f0a13602ec03b41a84b", "question": "The health insurance company has multiple insurance agents, each with a unique Agent ID, Name, Hire Date, and Contact Phone. An agent can handle health insurance business for multiple customers. Each customer has a Customer ID, Name, ID Card Number, and Contact Phone. Each insurance policy has a unique Policy ID, Insurance Type (Inpatient, Outpatient, Critical Illness), Insured Amount, Insurance Term, and Premium. Each payment requires recording the Payment Amount, Payment Date, and Payment Method. In addition, the insurance company needs to record each customer's Medical Records and Claim Records.", "answer": "CREATE TABLE Insurance_Agent (\n    Agent_ID INTEGER PRIMARY KEY,\n    Contact_Phone VARCHAR(255),\n    Hire_Date DATETIME,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Contact_Phone VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    ID_Card_Number VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Insurance_Policy (\n    Agent_ID INTEGER NOT NULL,\n    Customer_ID INTEGER NOT NULL,\n    Insurance_Term DATETIME,\n    Insurance_Type VARCHAR(255),\n    Insured_Amount FLOAT,\n    Policy_ID INTEGER PRIMARY KEY,\n    Premium FLOAT,\n    FOREIGN KEY (Agent_ID) REFERENCES Insurance_Agent(Agent_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Medical_Record (\n    Customer_ID INTEGER NOT NULL,\n    Visit_Cost FLOAT,\n    Visit_Time DATETIME,\n    PRIMARY KEY (Customer_ID, Visit_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Payment_Record (\n    Payment_Amount FLOAT,\n    Payment_Date DATETIME,\n    Payment_Method VARCHAR(255),\n    Policy_ID INTEGER PRIMARY KEY NOT NULL,\n    FOREIGN KEY (Policy_ID) REFERENCES Insurance_Policy(Policy_ID)\n);\n\nCREATE TABLE Claim_Record (\n    Claim_Amount FLOAT,\n    Claim_Date DATETIME,\n    Policy_ID INTEGER PRIMARY KEY NOT NULL,\n    FOREIGN KEY (Policy_ID) REFERENCES Payment_Record(Policy_ID)\n);", "remarks": "WQ:修改主键和外键。", "assign_to": "lzm", "assign_to_round2": "wq", "domain": ["公共管理、社会保障和社会组织", "社会保障"]}
{"id": "67552f0a13602ec03b41a84e", "question": "A financial analysis company manages multiple analysts, each with a unique Analyst ID, name, date of hire, and contact number. The company tracks information on multiple stocks, each having a unique stock code, stock name, and current price. Analysts can analyze multiple stocks, with each analysis recording the date of analysis, results, and reasoning. Additionally, the company maintains historical price data for each stock, recording closing price, opening price, highest price, lowest price, and trading volume by date.", "answer": "CREATE TABLE Analyst (\n    Analyst_ID INTEGER PRIMARY KEY,\n    Contact_Number INTEGER,\n    Date_of_Hire DATETIME,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Stock (\n    Current_Price FLOAT,\n    Stock_Code VARCHAR(255) PRIMARY KEY,\n    Stock_Name VARCHAR(255)\n);\n\nCREATE TABLE Analysis_Record (\n    Analysis_Reasoning VARCHAR(255),\n    Analysis_Result VARCHAR(255),\n    Analyst_ID INTEGER NOT NULL,\n    Date_of_Analysis DATETIME,\n    Stock_Code VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Analyst_ID, Stock_Code, Date_of_Analysis),\n    FOREIGN KEY (Analyst_ID) REFERENCES Analyst(Analyst_ID),\n    FOREIGN KEY (Stock_Code) REFERENCES Stock(Stock_Code)\n);\n\nCREATE TABLE Stock_Historical_Price (\n    Closing_Price FLOAT,\n    Date DATETIME,\n    Highest_Price FLOAT,\n    Lowest_Price FLOAT,\n    Opening_Price FLOAT,\n    Stock_Code VARCHAR(255) NOT NULL,\n    Trading_Volume INTEGER,\n    PRIMARY KEY (Stock_Code, Date),\n    FOREIGN KEY (Stock_Code) REFERENCES Stock(Stock_Code)\n);", "remarks": "调整功能描述格式，修改了schema_2的主键", "assign_to": "dyq", "assign_to_round2": "hzb", "domain": ["金融业", "资本市场服务"]}
{"id": "67552f0a13602ec03b41a853", "question": "This system is a bar management system, which aims to record the information of beer manufacturers, beer types, bars and drinkers, and the relationship between them. The beer manufacturer information includes the manufacturer number, manufacturer name and manufacturer country. The beer type information includes the beer number, beer name, manufacturer number and beer price. The bar information includes the bar number, bar name, bar address and bar phone number. The drinker information includes the drinker number, drinker name, drinker gender, drinker age and drinker phone number. The relationship between beer manufacturers and beer types is that beer manufacturers produce beer types, and beer types are sold in bars. Sales records include sales date, sales quantity and sales price.", "answer": "CREATE TABLE Beer_Manufacturer (\n    Country VARCHAR(255),\n    Manufacturer_Name VARCHAR(255),\n    Manufacturer_Number INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Bar (\n    Address VARCHAR(255),\n    Bar_Name VARCHAR(255),\n    Bar_Number INTEGER PRIMARY KEY,\n    License VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Drinker (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Drinker_Number INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Beer (\n    Beer_Name VARCHAR(255),\n    Beer_Number INTEGER PRIMARY KEY,\n    Beer_Price FLOAT,\n    Manufacturer_Number INTEGER NOT NULL,\n    FOREIGN KEY (Manufacturer_Number) REFERENCES Beer_Manufacturer(Manufacturer_Number)\n);\n\nCREATE TABLE Sales_Record (\n    Bar_Number INTEGER NOT NULL,\n    Beer_Number INTEGER NOT NULL,\n    Price FLOAT,\n    Sales_Date DATETIME,\n    PRIMARY KEY (Bar_Number, Beer_Number),\n    FOREIGN KEY (Bar_Number) REFERENCES Bar(Bar_Number),\n    FOREIGN KEY (Beer_Number) REFERENCES Beer(Beer_Number)\n);", "remarks": "对原有功能描述进行补充属性信息，移除了功能描述里没有提到的schema_5,schema_6", "assign_to": "tk", "assign_to_round2": "hzb", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a85b", "question": "\"The online shopping system needs to manage users, products, orders, announcements, and access control. The system must record each user's membership number, ID, name, password, email, phone number, postal code, and address details; product information must include product ID, name, price, category ID, manufacturer, and product image URL; the system supports order processing, documenting each order's purchase ID, product ID, membership number, quantity, purchase date, and delivery status. The bulletin board feature must record the announcement's number, title, content, registration date, and publisher ID, used for publishing and managing announcements, allowing users to view announcements.\"", "answer": "CREATE TABLE User (\n    Address_Details VARCHAR(255),\n    Email VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Membership_Number INTEGER,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_Number INTEGER,\n    Postal_Code INTEGER\n);\n\nCREATE TABLE Product (\n    Category VARCHAR(255),\n    Manufacturer VARCHAR(255),\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Image_URL VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Delivery_Status VARCHAR(255),\n    Order_ID INTEGER PRIMARY KEY,\n    Purchase_Date DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(ID)\n);\n\nCREATE TABLE Announcement (\n    Announcement_Number INTEGER PRIMARY KEY,\n    Content VARCHAR(255),\n    Publisher_ID INTEGER NOT NULL,\n    Registration_Date DATETIME,\n    Title VARCHAR(255),\n    FOREIGN KEY (Publisher_ID) REFERENCES User(ID)\n);\n\nCREATE TABLE Order_Detail (\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Purchase_Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "schema中的属性为英文；schema_4多余了key和value", "assign_to": "zp", "assign_to_round2": "gcc", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a85c", "question": "The article management system manages multiple articles. Each article has an article ID, article title, article content, creation time, total number of words, article reading volume, article like volume, article collection volume, article comment volume, the time of the last modification and save, and the author ID of the last modification and save. The system also manages multiple authors. Each author has an author ID, name, gender, phone number, email address, and introduction. Each article can be created by multiple authors, and the author order, responsible part, and role of each author are recorded. Authors can modify articles, and each modification records the modification start time, modification save time, and modification notes. The system ensures the accuracy of article content and the transparency of author contributions by recording article creation and modification information.", "answer": "CREATE TABLE Author (\n    Author_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Introduction VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Article (\n    Article_ID INTEGER PRIMARY KEY,\n    Article_collection_volume INTEGER,\n    Article_comment_volume INTEGER,\n    Article_content VARCHAR(255),\n    Article_like_volume INTEGER,\n    Article_reading_volume INTEGER,\n    Article_title VARCHAR(255),\n    Creation_time DATETIME,\n    Last_modification_and_save_author_ID INTEGER NOT NULL,\n    Last_modification_and_save_time DATETIME,\n    Total_number_of_words_in_the_article INTEGER,\n    FOREIGN KEY (Last_modification_and_save_author_ID) REFERENCES Author(Author_ID)\n);\n\nCREATE TABLE Author_creates_article (\n    Article_ID INTEGER NOT NULL,\n    Author_ID INTEGER NOT NULL,\n    Author_order INTEGER,\n    Author_responsible_for_part VARCHAR(255),\n    Author_role VARCHAR(255),\n    PRIMARY KEY (Article_ID, Author_ID),\n    FOREIGN KEY (Article_ID) REFERENCES Article(Article_ID),\n    FOREIGN KEY (Author_ID) REFERENCES Author(Author_ID)\n);\n\nCREATE TABLE Author_modifies_article (\n    Article_ID INTEGER NOT NULL,\n    Author_ID INTEGER NOT NULL,\n    Modify_notes VARCHAR(255),\n    Modify_save_time DATETIME,\n    Modify_start_time DATETIME,\n    PRIMARY KEY (Article_ID, Author_ID, Modify_save_time),\n    FOREIGN KEY (Article_ID) REFERENCES Article(Article_ID),\n    FOREIGN KEY (Author_ID) REFERENCES Author(Author_ID)\n);", "remarks": "CS 2025/1/6 ;   2025/1/22 修改了业务需求描述", "assign_to": "cs", "assign_to_round2": "szh2", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a862", "question": "The operational management of a certain automotive repair company is as follows: The company needs to manage customer information, which includes the customer's name and phone number. Customers can contact the repair service by phone. The company also manages the information of repair workers, including their names and addresses. During the repair process, parts are used, and the information about these parts includes serial number, description, price, and supplier, as well as the management of the inventory quantity of the parts. Each repair task has detailed information, including the involved vehicle model, task status, customer information, responsible repair worker, task start date, and completion date. The task status can be \"pending,\" \"in progress,\" or \"completed.\" Each repair task may require multiple parts, so it is necessary to record the parts needed for each task and their quantities.", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255),\n    Customer_Phone VARCHAR(255)\n);\n\nCREATE TABLE Repair_Worker (\n    Address VARCHAR(255),\n    Name VARCHAR(255),\n    Repair_Worker_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Part (\n    Description VARCHAR(255),\n    Inventory_Quantity INTEGER,\n    Part_Serial_Number VARCHAR(255) PRIMARY KEY,\n    Price FLOAT,\n    Supplier VARCHAR(255)\n);\n\nCREATE TABLE Repair_Task (\n    Customer_ID INTEGER NOT NULL,\n    Repair_Task_ID INTEGER PRIMARY KEY,\n    Task_Completion_Date DATETIME,\n    Task_Start_Date DATETIME,\n    Task_Status VARCHAR(255),\n    Vehicle_Model VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Repair_Worker_Task (\n    Repair_Task_ID INTEGER NOT NULL,\n    Repair_Worker_ID INTEGER NOT NULL,\n    PRIMARY KEY (Repair_Worker_ID, Repair_Task_ID),\n    FOREIGN KEY (Repair_Task_ID) REFERENCES Repair_Task(Repair_Task_ID),\n    FOREIGN KEY (Repair_Worker_ID) REFERENCES Repair_Worker(Repair_Worker_ID)\n);\n\nCREATE TABLE Part_Usage (\n    Part_Serial_Number VARCHAR(255) NOT NULL,\n    Repair_Task_ID INTEGER NOT NULL,\n    Usage_Quantity INTEGER,\n    PRIMARY KEY (Part_Serial_Number, Repair_Task_ID),\n    FOREIGN KEY (Part_Serial_Number) REFERENCES Part(Part_Serial_Number),\n    FOREIGN KEY (Repair_Task_ID) REFERENCES Repair_Task(Repair_Task_ID)\n);", "remarks": "针对功能描述，对schema_3、schema_4、schema_5进行属性修改", "assign_to": "lzm", "assign_to_round2": "hzb", "domain": ["居民服务、修理和其他服务业", "机动车、电子产品和日用产品修理业"]}
{"id": "67552f0a13602ec03b41a864", "question": "The operational details of a certain API management system are as follows: The system contains multiple user groups, with user group information including User Group ID, Name, and Description. The user information in the system includes User ID, Username, Password, Email, One-time Password, Password Reset Key, Associated User Group, Activation Status, User Creation Time, Creator, Last Updated Time, and Updater. Each user is assigned an API key, with API key information including Key ID, Associated User ID, Key Content, Permission Level, Whether to Ignore Call Limits, Whether it is a Private Key, Allowed IP Address List, and Key Creation Time. The system records all API call logs, with log information including Log ID, Called API Resource Path, HTTP Request Method, Request Parameters, Used API Key, Client's IP Address, Call Time, Response Time, Authorization Status of the Call, and API Response Status Code. When users call APIs using API keys, the system performs authorization verification based on the key’s permission level and IP address restrictions, and records detailed information of each call for subsequent analysis and auditing.", "answer": "CREATE TABLE user_group (\n    description VARCHAR(255),\n    name VARCHAR(255),\n    user_group_id INTEGER PRIMARY KEY\n);\n\nCREATE TABLE user (\n    activation_status VARCHAR(255),\n    creator VARCHAR(255),\n    email VARCHAR(255),\n    last_updated_time DATETIME,\n    one-time_password VARCHAR(255),\n    password VARCHAR(255),\n    password_reset_key VARCHAR(255),\n    updater VARCHAR(255),\n    user_allocation_time DATETIME,\n    user_group_id INTEGER NOT NULL,\n    user_id INTEGER PRIMARY KEY,\n    username VARCHAR(255),\n    FOREIGN KEY (user_group_id) REFERENCES user_group(user_group_id)\n);\n\nCREATE TABLE API_key (\n    allowed_ip_address_list VARCHAR(255),\n    key_content VARCHAR(255),\n    key_creation_time DATETIME,\n    key_id INTEGER PRIMARY KEY,\n    permission_level INTEGER,\n    user_id INTEGER NOT NULL,\n    whether_it_is_a_private_key BOOL,\n    whether_to_ignore_call_limits BOOL,\n    FOREIGN KEY (user_id) REFERENCES user(user_id)\n);\n\nCREATE TABLE API_call_log (\n    api_response_status_code VARCHAR(255),\n    authorization_status_of_the_call VARCHAR(255),\n    call_time DATETIME,\n    called_api_resource_path VARCHAR(255),\n    client_ip_address VARCHAR(255),\n    http_request_method VARCHAR(255),\n    log_id INTEGER PRIMARY KEY,\n    request_parameters VARCHAR(255),\n    response_time DATETIME,\n    used_api_key_id INTEGER NOT NULL,\n    FOREIGN KEY (used_api_key_id) REFERENCES API_key(key_id)\n);", "remarks": "WQ:无修改", "assign_to": "lzm", "assign_to_round2": "wq", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a86e", "question": "The business requirement description for the blog management system: A company plans to develop a blog or content management system to manage articles, authors, and category information. The system shall support the creation, editing, and deletion of articles, recording the Article ID, Name, Author ID, and Category ID. It shall associate author and category information through the Author ID and Category ID fields respectively, and support querying articles by author or category. An article may belong to multiple categories. The system shall record the category name and assign it a Category ID. The system shall also record basic information about authors, including the Author ID, Name, and Email.", "answer": "CREATE TABLE Author (\n    Author_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Category (\n    Category_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Article (\n    Article_ID INTEGER PRIMARY KEY,\n    Author_ID INTEGER NOT NULL,\n    Category_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    FOREIGN KEY (Author_ID) REFERENCES Author(Author_ID),\n    FOREIGN KEY (Category_ID) REFERENCES Category(Category_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a86f", "question": "The land project management system shall meet the following business requirements:\n\nThe land management department manages multiple land parcels. Each land parcel has a Land ID, Land Location, and Total Land Area. \n\nThe department manages multiple projects. Each project has a Project ID, Project Name, Project Location, Purpose, and Person in Charge.\n\nEach land usage record shall capture the relationship between the land and project, including Used Land Area, Usage Duration, Current Status, Record Time, and Recording Personnel. \n\nBy recording the usage of land by projects, the system shall ensure reasonable allocation and effective management of land resources. \n\nA project can use multiple land parcels, and a land parcel can be used by multiple projects successively over time.", "answer": "CREATE TABLE Land (\n    Land_ID INTEGER PRIMARY KEY,\n    Land_Location VARCHAR(255),\n    Total_Land_Area FLOAT\n);\n\nCREATE TABLE Project (\n    Person_in_Charge VARCHAR(255),\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Location VARCHAR(255),\n    Project_Name VARCHAR(255),\n    Purpose VARCHAR(255)\n);\n\nCREATE TABLE Land_Usage_Record (\n    Current_Status VARCHAR(255),\n    Land_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    Record_Time DATETIME,\n    Recording_Personnel VARCHAR(255),\n    Usage_Duration INTEGER,\n    Used_Land_Area FLOAT,\n    PRIMARY KEY (Land_ID, Project_ID, Record_Time),\n    FOREIGN KEY (Land_ID) REFERENCES Land(Land_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["水利、环境和公共设施管理业", "土地管理业"]}
{"id": "67552f0a13602ec03b41a870", "question": "The system primarily involves three entities: User (User ID, Username, Email, Password, Profile, Avatar), Recipe (Recipe ID, Recipe Name, Ingredients, Steps, Total Time, Portion, Spicy Level, Bitter Level, Sweet Level, Meaty Level, Salty Level, Sour Level, Rating, Number of Ratings, Large Image Filename, Calories, Creator ID, Small Image Filename), and Blog (Blog ID, Author User ID, Blog Title, Publication Time, Blog Summary). System functionalities include user registration, login, personal information management, recipe publishing, collecting, rating, as well as blog publishing and viewing. Additionally, users can create recipes, collect recipes, and publish blogs, with each recipe and blog being managed by users. The system manages relationships between users and recipes or blogs through creation, collection of recipes, and blog publishing.\n", "answer": "CREATE TABLE User (\n    Avatar VARCHAR(255),\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Profile VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Recipe (\n    Bitter_Level INTEGER,\n    Calories FLOAT,\n    Creator_ID INTEGER NOT NULL,\n    Ingredients VARCHAR(255),\n    Large_Image_Filename VARCHAR(255),\n    Meaty_Level INTEGER,\n    Number_of_Ratings FLOAT,\n    Portion INTEGER,\n    Rating FLOAT,\n    Recipe_ID INTEGER PRIMARY KEY,\n    Recipe_Name VARCHAR(255),\n    Salty_Level INTEGER,\n    Small_Image_Filename VARCHAR(255),\n    Sour_Level INTEGER,\n    Spicy_Level INTEGER,\n    Steps VARCHAR(255),\n    Sweet_Level INTEGER,\n    Total_Time FLOAT,\n    FOREIGN KEY (Creator_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Blog (\n    Author_User_ID INTEGER NOT NULL,\n    Blog_ID INTEGER PRIMARY KEY,\n    Blog_Summary VARCHAR(255),\n    Blog_Title VARCHAR(255),\n    Publication_Time DATETIME,\n    FOREIGN KEY (Author_User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Collected_Recipe (\n    Collection_Time DATETIME,\n    Recipe_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Recipe_ID),\n    FOREIGN KEY (Recipe_ID) REFERENCES Recipe(Recipe_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "WQ:无修改", "assign_to": "szc", "assign_to_round2": "wq", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a878", "question": "Supply Chain Management System\nThe main function of the supply chain management system is to manage procurement, material supply, and production processes between suppliers and companies. The system supports the input of supplier and company information, material management, procurement application handling, and records detailed data for each material production. The specific business description is as follows:\n\nSupplier Management:\nThe system can manage the basic information of multiple suppliers, including supplier name, address, phone number, fax number, tax ID, etc. Each supplier is categorized based on the region and country they are located in, ensuring that the supplier’s geographical and business background is clearly identified.\nThe system also records information about the materials produced by suppliers, including material type, production time, production quantity, etc., helping the company understand the production capacity and material supply situation of each supplier.\n\nCompany Management:\nThe system supports recording company information, including company name, address, phone number, email, tax ID, ERP system identifier, etc. The management of company information ensures that procurement and supply chain operations are carried out according to company standards and supports management of companies in different regions and countries.\nThe company can also manage procurement applications through the system, ensuring that the types, quantities, and delivery times of requested materials meet the company’s production planning needs.\n\nMaterial Management:\nThe system can manage basic information about all materials, including material type, name, description, unit, etc. The management of material information helps the company clearly understand the specifications, usage, and inventory levels of each material.\nThe relationships between materials and suppliers will also be established in the system to track materials produced by different suppliers and their production quantities.\n\nProcurement Application Management:\nThe system can record internal procurement applications within the company, including material ID, application time, application quantity, remarks, etc., ensuring the rationality of each material request and enabling effective tracking of the procurement process.\nThe procurement application form is linked with material information, allowing timely adjustments in procurement when demand increases or production plans change, ensuring that production does not halt due to material shortages.\n\nRegion and Country Management:\nThe system supports management of different regions and countries, including region names and country codes and names. Through this information, the system can manage the distribution of suppliers, companies, and materials based on geographical location, improving the optimization ability of the supply chain.\nIn summary, this supply chain management system helps the company manage the entire procurement and material supply process by recording data on suppliers, materials, procurement applications, and more, optimizing supply chain operations and ensuring that each material procurement and production process is efficient and traceable.", "answer": "CREATE TABLE Material (\n    Description VARCHAR(255),\n    Material_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Type VARCHAR(255),\n    Unit VARCHAR(255)\n);\n\nCREATE TABLE Region (\n    Region_ID INTEGER PRIMARY KEY,\n    Region_Name VARCHAR(255)\n);\n\nCREATE TABLE Country (\n    Country_Code VARCHAR(255),\n    Country_ID INTEGER PRIMARY KEY,\n    Country_Name VARCHAR(255)\n);\n\nCREATE TABLE Procurement_Application (\n    Application_Quantity INTEGER,\n    Application_Time DATETIME,\n    Material_ID INTEGER NOT NULL,\n    Procurement_Application_ID INTEGER PRIMARY KEY,\n    Remarks VARCHAR(255),\n    FOREIGN KEY (Material_ID) REFERENCES Material(Material_ID)\n);\n\nCREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Country_ID INTEGER NOT NULL,\n    Fax INTEGER,\n    Name VARCHAR(255),\n    Phone INTEGER,\n    Region_ID INTEGER NOT NULL,\n    Supplier_ID INTEGER PRIMARY KEY,\n    Tax_ID INTEGER,\n    FOREIGN KEY (Country_ID) REFERENCES Country(Country_ID),\n    FOREIGN KEY (Region_ID) REFERENCES Region(Region_ID)\n);\n\nCREATE TABLE Company (\n    Activation_Time DATETIME,\n    Address VARCHAR(255),\n    Company_ID INTEGER PRIMARY KEY,\n    Country_ID INTEGER NOT NULL,\n    Creation_Time DATETIME,\n    ERP_System_Identifier BLOB,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone INTEGER,\n    Region_ID INTEGER NOT NULL,\n    Security_Answer VARCHAR(255),\n    Security_Question VARCHAR(255),\n    Status VARCHAR(255),\n    Tax_ID INTEGER,\n    Update_Time DATETIME,\n    Username VARCHAR(255),\n    VAT_Registration_Number INTEGER,\n    FOREIGN KEY (Country_ID) REFERENCES Country(Country_ID),\n    FOREIGN KEY (Region_ID) REFERENCES Region(Region_ID)\n);\n\nCREATE TABLE Supplier_Production_Material (\n    Material_ID INTEGER NOT NULL,\n    Production_Quantity INTEGER,\n    Production_Time DATETIME,\n    Remarks VARCHAR(255),\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Material_ID, Supplier_ID, Production_Time),\n    FOREIGN KEY (Material_ID) REFERENCES Material(Material_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);", "remarks": "CS 2025/1/22 round2 edit", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["批发和零售业", "批发业"]}
{"id": "67552f0a13602ec03b41a879", "question": "DevFlix is ​​an innovative audio content sharing platform that aims to provide users with a comprehensive service that integrates podcast publishing, playlist management and audio collection. User information includes username, user account, email, password, user description, gender, interest area, number of followers, number of people following, and user creation time. Podcast information includes publisher, podcast file path, type, podcast name, cover image path, number of visits, number of likes, creation time, number of favorites, and last update time. Playlist information includes the user who created the playlist, the user who created the playlist, playlist name, number of visits, number of likes, creation time, number of favorites, creation time, and last update time. DevFlix allows users to register accounts, publish and manage their own podcasts, interact with other users and create playlists. The platform also provides a collection function, allowing users to save content of interest and access it at any time. In addition, DevFlix also has detailed statistics and analysis functions to track the visit data and user interaction of each podcast and playlist.\n", "answer": "CREATE TABLE User (\n    Areas_of_Interest VARCHAR(255),\n    Date_of_Birth DATETIME,\n    Email VARCHAR(255),\n    Gender BOOL,\n    Number_of_Followers INTEGER,\n    Password VARCHAR(255),\n    User_Account VARCHAR(255),\n    User_Creation_Time DATETIME,\n    User_Description VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Podcast (\n    Cover_Image_Path VARCHAR(255),\n    Creation_Time DATETIME,\n    Last_Update_Time DATETIME,\n    Number_of_Favorites INTEGER,\n    Number_of_Likes INTEGER,\n    Number_of_Visits INTEGER,\n    Podcast_File_Path VARCHAR(255),\n    Podcast_ID INTEGER PRIMARY KEY,\n    Podcast_Name VARCHAR(255),\n    Publisher_ID INTEGER NOT NULL,\n    Type VARCHAR(255),\n    FOREIGN KEY (Publisher_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Playlist (\n    Creation_Time DATETIME,\n    Last_Update_Time DATETIME,\n    Number_of_Favorites INTEGER,\n    Number_of_Likes INTEGER,\n    Number_of_Visits INTEGER,\n    Playlist_ID INTEGER PRIMARY KEY,\n    Playlist_Name VARCHAR(255),\n    Playlist_Path VARCHAR(255),\n    User_ID_who_created_the_playlist INTEGER NOT NULL,\n    FOREIGN KEY (User_ID_who_created_the_playlist) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Publishes_Podcast (\n    Podcast_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Podcast_ID),\n    FOREIGN KEY (Podcast_ID) REFERENCES Podcast(Podcast_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Creates_Playlist (\n    Playlist_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Playlist_ID),\n    FOREIGN KEY (Playlist_ID) REFERENCES Playlist(Playlist_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Playlist_Contains_Podcasts (\n    Playlist_ID INTEGER NOT NULL,\n    Podcast_ID INTEGER NOT NULL,\n    PRIMARY KEY (Podcast_ID, Playlist_ID),\n    FOREIGN KEY (Playlist_ID) REFERENCES Playlist(Playlist_ID),\n    FOREIGN KEY (Podcast_ID) REFERENCES Podcast(Podcast_ID)\n);", "remarks": "大篇幅补充需求描述，新增schema_5,其他schema也有一些属性调整", "assign_to": "cs", "assign_to_round2": "hzb", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a87a", "question": "The mail system manages multiple users, each of whom has a user ID, email account, name, password, and creation time. The system manages multiple emails, each of which has an email ID, sender ID, subject, body, status, sending time, and creation time. Each time an email is sent, the recipient information of the email needs to be recorded, including the recipient ID, whether it was successfully delivered, and whether it has been read. The system also supports the email attachment function, and each attachment has an attachment ID, attachment file name, attachment size, and attachment file storage path. Each email sent can be accompanied by multiple attachments, and whether the attachments were successfully delivered and whether they have been read is recorded. By recording information about users, emails, recipients, and attachments, the integrity and efficiency of the mail system are ensured.", "answer": "CREATE TABLE User (\n    Creation_time DATETIME,\n    Email_account VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Attachment (\n    Attachment_ID INTEGER PRIMARY KEY,\n    Attachment_file_name VARCHAR(255),\n    Attachment_file_storage_path VARCHAR(255),\n    Attachment_size FLOAT\n);\n\nCREATE TABLE Mail (\n    Body VARCHAR(255),\n    Creation_time DATETIME,\n    Mail_ID INTEGER PRIMARY KEY,\n    Sender_ID INTEGER NOT NULL,\n    Sending_time DATETIME,\n    Status VARCHAR(255),\n    Subject VARCHAR(255),\n    FOREIGN KEY (Sender_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Mail_Attachment (\n    Attachment_ID INTEGER,\n    Mail_ID INTEGER NOT NULL,\n    Read BOOL,\n    Successfully_Delivered BOOL,\n    PRIMARY KEY (Mail_ID, Attachment_ID),\n    FOREIGN KEY (Mail_ID) REFERENCES Attachment(Attachment_ID)\n);\n\nCREATE TABLE Mail_Recipient (\n    Mail_ID INTEGER NOT NULL,\n    Read BOOL,\n    Recipient_ID INTEGER NOT NULL,\n    Successfully_Delivered BOOL,\n    PRIMARY KEY (Mail_ID, Recipient_ID),\n    FOREIGN KEY (Mail_ID) REFERENCES Mail(Mail_ID),\n    FOREIGN KEY (Recipient_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 2025/1/7", "assign_to": "cs", "assign_to_round2": "szh2", "domain": ["交通运输、仓储和邮政业", "邮政业"]}
{"id": "67552f0a13602ec03b41a881", "question": "Design a database for a blockchain or cryptocurrency system to store and manage transactions, blocks, and account information.\nThe system shall record detailed information about transactions, including transaction hash, timestamp, fee, input address, and output address;     \ninformation about blocks, including block hash, height, timestamp, previous block hash, and Merkle root;\nas well as account addresses and balances.\nThe system shall support querying the block a transaction belongs to, as well as the relationship between transactions and accounts.\n", "answer": "CREATE TABLE Block (\n    Block_Hash VARCHAR(255) PRIMARY KEY,\n    Height INTEGER,\n    Merkle_Root VARCHAR(255),\n    Previous_Block_Hash VARCHAR(255) NOT NULL,\n    Timestamp DATETIME,\n    FOREIGN KEY (Previous_Block_Hash) REFERENCES Block(Block_Hash)\n);\n\nCREATE TABLE Account (\n    Address VARCHAR(255) PRIMARY KEY,\n    Balance FLOAT\n);\n\nCREATE TABLE Transaction (\n    Block_Hash VARCHAR(255) NOT NULL,\n    Fee FLOAT,\n    Input_Address VARCHAR(255) NOT NULL,\n    Output_Address VARCHAR(255) NOT NULL,\n    Timestamp DATETIME,\n    Transaction_Hash VARCHAR(255) PRIMARY KEY,\n    FOREIGN KEY (Block_Hash) REFERENCES Block(Block_Hash),\n    FOREIGN KEY (Input_Address) REFERENCES Account(Address),\n    FOREIGN KEY (Output_Address) REFERENCES Account(Address)\n);", "remarks": "关系中的对象没有使用entity_x格式，外键没有使用格式schema_x", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a882", "question": "The Conference Management System aims to support conference organization, venue selection, user participation, and session management. The system is capable of managing conference-related information, coordinating user roles and permissions, ensuring smooth conference proceedings, and recording detailed session information. The following are specific business descriptions:\n\nUser Management:\n- The system is able to manage basic information of all users, including name, email, authentication method, and user permissions. Users can have different permissions, determining whether they can create, manage, or participate in conferences.\n- User role management is crucial. The system is able to distinguish which users are conference creators, administrators, or participants, in order to assign tasks and control conference access according to different permissions.\n\nConference Management:\n- The system is able to create and manage basic information of multiple conferences, including conference title, subtitle, creator, administrator, and conference schedule.\n- Each conference can be associated with one or more venues, ensuring that conferences can be held at suitable geographic locations.\n- The system records the specific time and venue selection of each conference, ensuring that conferences are held smoothly at the appropriate time and place.\n\nSession Management:\n- The system supports managing multiple sessions within a conference. Each session contains detailed information such as session title, abstract, speaker, start time, duration, etc.\n- Session arrangement helps users clearly understand the specific agenda of the conference, ensuring the orderly progress of the conference process.\n- Users can participate as speakers in different sessions. The system will record the presentation content and time of each user in the conference.\n\nConference Venue Selection:\n- The system is able to record venue information for each conference, ensuring that each conference can be held at a suitable venue.\n- Venue information includes venue name, address, and geographic location. The system is able to select suitable venues according to conference requirements and manage conference venues.\n\nUser Participation and Conference Management:\n- Users can create conferences and also manage existing conferences as administrators. Administrators are responsible for coordinating the conference process and ensuring the smooth running of the conference.\n- The system also records the management or presentation status of each user in the conference, ensuring that the responsibilities and participation of all attendees are traceable.\n\nThe Conference Management System can help organizers efficiently manage all aspects of conferences, from user role management to conference venue arrangement, session design, and user participation tracking. The system ensures that each conference can be held smoothly and provides clear permissions and participation arrangements for each user.", "answer": "CREATE TABLE User (\n    Authentication_Method VARCHAR(255),\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Permission VARCHAR(255)\n);\n\nCREATE TABLE Venue (\n    Geographic_Location VARCHAR(255),\n    Venue_Address VARCHAR(255),\n    Venue_ID INTEGER PRIMARY KEY,\n    Venue_Name VARCHAR(255)\n);\n\nCREATE TABLE Conference (\n    Administrator INTEGER NOT NULL,\n    Conference_ID INTEGER PRIMARY KEY,\n    Conference_Time DATETIME,\n    Creator INTEGER NOT NULL,\n    Subtitle VARCHAR(255),\n    Title VARCHAR(255),\n    FOREIGN KEY (Administrator) REFERENCES User(User_ID),\n    FOREIGN KEY (Creator) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Session (\n    Abstract VARCHAR(255),\n    Belonging_Conference INTEGER NOT NULL,\n    Duration INTEGER,\n    Session_ID INTEGER PRIMARY KEY,\n    Speaker INTEGER,\n    Start_Time DATETIME,\n    Title VARCHAR(255),\n    FOREIGN KEY (Belonging_Conference) REFERENCES Conference(Conference_ID)\n);\n\nCREATE TABLE Conference_Venue_Selection (\n    Conference_ID INTEGER NOT NULL,\n    Venue_ID INTEGER NOT NULL,\n    PRIMARY KEY (Conference_ID, Venue_ID),\n    FOREIGN KEY (Conference_ID) REFERENCES Conference(Conference_ID),\n    FOREIGN KEY (Venue_ID) REFERENCES Venue(Venue_ID)\n);\n\nCREATE TABLE User_Create_Conference (\n    Conference_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Conference_ID),\n    FOREIGN KEY (Conference_ID) REFERENCES Conference(Conference_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Manage_Conference (\n    Conference_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Conference_ID),\n    FOREIGN KEY (Conference_ID) REFERENCES Conference(Conference_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Presentation (\n    Session_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Session_ID, User_ID),\n    FOREIGN KEY (Session_ID) REFERENCES Session(Session_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 2025/1/22 round2 edit", "assign_to": "zp", "assign_to_round2": "cs", "domain": ["公共管理、社会保障和社会组织", "群众团体、社会团体和其他成员组织"]}
{"id": "67552f0a13602ec03b41a885", "question": "The human resource management system database design of a company is as follows: The company has multiple departments, and the department information includes department ID, department name, person in charge, and phone number. Each department has multiple employees, and the employee information includes employee ID, name, gender, date of birth, position, and salary. The company also records the employees' attendance, which includes attendance ID, employee ID, attendance date, check-in and check-out times, and whether the employee is late or leaves early. Furthermore, the company records the employees' training details, which include training ID, training name, training time, training content, and the IDs of the participating employees. The system needs to support queries for employee's basic information, attendance records, and training records, and should be able to generate reports on attendance and training participation by department.", "answer": "CREATE TABLE department (\n    department_id INTEGER PRIMARY KEY,\n    department_name VARCHAR(255),\n    person_in_charge FLOAT,\n    phone_number VARCHAR(255)\n);\n\nCREATE TABLE training (\n    training_content VARCHAR(255),\n    training_id INTEGER PRIMARY KEY,\n    training_name VARCHAR(255),\n    training_time DATETIME\n);\n\nCREATE TABLE employee (\n    date_of_birth DATETIME,\n    department_id INTEGER NOT NULL,\n    employee_id INTEGER PRIMARY KEY,\n    gender VARCHAR(255),\n    name VARCHAR(255),\n    position VARCHAR(255),\n    salary FLOAT,\n    FOREIGN KEY (department_id) REFERENCES department(department_id)\n);\n\nCREATE TABLE attendance (\n    attendance_date DATETIME,\n    attendance_id INTEGER PRIMARY KEY,\n    check-in_and_check-out_times DATETIME,\n    employee_id INTEGER NOT NULL,\n    whether_late_or_early_departure VARCHAR(255),\n    FOREIGN KEY (employee_id) REFERENCES employee(employee_id)\n);\n\nCREATE TABLE employee_training (\n    employee_id INTEGER NOT NULL,\n    training_id INTEGER NOT NULL,\n    PRIMARY KEY (training_id, employee_id),\n    FOREIGN KEY (employee_id) REFERENCES employee(employee_id),\n    FOREIGN KEY (training_id) REFERENCES training(training_id)\n);", "remarks": "王琴：无修改", "assign_to": "dyq", "assign_to_round2": "wq", "domain": ["居民服务、修理和其他服务业", "其他服务业"]}
{"id": "67552f0a13602ec03b41a891", "question": "User Management and Access Control System:\n\nThe system aims to effectively manage the hierarchical relationships and permission changes of users, record each user's identity information, superior and subordinate relationships, and the management of these relationships by operators. Here is a detailed business description:\n\nUser Management:\n- The system can manage users' basic information, including User ID, identity type, email, identity status, creation time, and expiration time.\n- The superior and subordinate relationships in the user information allow for recording the hierarchical structure within the organization, where each user can have one superior and multiple subordinates. This function aids in the implementation of permission control and hierarchical management.\n\nIdentity and Permission Management:\n- The system records each user’s identity type and status to ensure clarity of users’ permissions and roles within the system.\n- Through effective identity management, the system ensures the correct allocation and updating of user permissions, meeting organizational requirements.\n\nUser Hierarchy Adjustment:\n- Operators can manage and adjust the hierarchical relationships of users, recording the time of each change, the hierarchical relationship before and after the change, and corresponding remarks.\n- The system can track the historical changes of the superior and subordinate relationships of users, ensuring a complete audit record of organizational structure changes.\n\nOperator Management:\n- The system records operators' information, including names, phone numbers, and permissions, where operators are responsible for managing and modifying users' hierarchical relationships.\n- Each operator can adjust permissions and alter relationships for different users; the system records detailed information about these changes.\n\nChange Audit:\n- The system records each change in the user hierarchical relationships, including changes of superior and subordinate users. The time of each change, the relationships before and after the change, operator information, and remarks are all detailedly logged, providing a complete auditing trail.\n- This functionality ensures that internal permission changes and hierarchy adjustments within the organization can be managed transparently and traced.\n\nThe system is used for managing users' hierarchical relationships, identity information, and permissions. Through the operator's control of permissions, the system supports flexible adjustments to user hierarchical relationships and ensures all changes are traceable through record keeping.", "answer": "CREATE TABLE User (\n    Creation_Time DATETIME,\n    Email VARCHAR(255),\n    Expiration_Time DATETIME,\n    Identity_Status VARCHAR(255),\n    Identity_Type VARCHAR(255),\n    Subordinate_User INTEGER NOT NULL,\n    Superior_User INTEGER NOT NULL,\n    User_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Subordinate_User) REFERENCES User(User_ID),\n    FOREIGN KEY (Superior_User) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Operator (\n    Name VARCHAR(255),\n    Operator_ID INTEGER PRIMARY KEY,\n    Permissions VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Change_Superior_User (\n    Change_Time DATETIME,\n    Changed_Superior_User INTEGER NOT NULL,\n    Operator_ID INTEGER NOT NULL,\n    Previous_Superior_User INTEGER NOT NULL,\n    Remarks VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Operator_ID, User_ID, Change_Time),\n    FOREIGN KEY (Changed_Superior_User) REFERENCES User(User_ID),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID),\n    FOREIGN KEY (Previous_Superior_User) REFERENCES User(User_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Change_Subordinate_User (\n    Change_Time DATETIME,\n    Changed_Subordinate_User INTEGER NOT NULL,\n    Operator_ID INTEGER NOT NULL,\n    Previous_Subordinate_User INTEGER NOT NULL,\n    Remarks VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Operator_ID, User_ID, Change_Time),\n    FOREIGN KEY (Changed_Subordinate_User) REFERENCES User(User_ID),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID),\n    FOREIGN KEY (Previous_Subordinate_User) REFERENCES User(User_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 1/22 round2 edit", "assign_to": "zp", "assign_to_round2": "cs", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a892", "question": "In a library management system, the relationships between books, types, and tags are as follows:\nThe system contains multiple books, each book's information includes Book Title, Author, ISBN Number, Publication Year, and Publishing House.       \nEach book can belong to multiple types, type information includes Type ID and Type Name, where Type Name is unique.\nAdditionally, each book can have multiple tags, tag information includes Tag ID and Tag Name, where Tag Name is unique.", "answer": "CREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_Title VARCHAR(255),\n    ISBN_Number VARCHAR(255) PRIMARY KEY,\n    Publication_Year INTEGER,\n    Publishing_House VARCHAR(255)\n);\n\nCREATE TABLE Type (\n    Type_ID INTEGER PRIMARY KEY,\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Tag (\n    Tag_ID INTEGER PRIMARY KEY,\n    Tag_Name VARCHAR(255)\n);\n\nCREATE TABLE Book_Type_Relation (\n    ISBN_Number VARCHAR(255) NOT NULL,\n    Type_ID INTEGER NOT NULL,\n    PRIMARY KEY (ISBN_Number, Type_ID),\n    FOREIGN KEY (ISBN_Number) REFERENCES Book(ISBN_Number),\n    FOREIGN KEY (Type_ID) REFERENCES Type(Type_ID)\n);\n\nCREATE TABLE Book_Tag_Relation (\n    ISBN_Number VARCHAR(255) NOT NULL,\n    Tag_ID INTEGER NOT NULL,\n    PRIMARY KEY (ISBN_Number, Tag_ID),\n    FOREIGN KEY (ISBN_Number) REFERENCES Book(ISBN_Number),\n    FOREIGN KEY (Tag_ID) REFERENCES Tag(Tag_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a895", "question": "The requirements analysis for a system related to user authentication and password history associated with the Guacamole project is as follows: Store user authentication information, including user ID and password setting date, managed through the `guacamole_user` table for user login credentials; it is also necessary to record the historical password information for each user, including password history record ID, user ID, salted password hash, password salt, and password setting date, implemented through the `guacamole_user_password_history` table to manage user password history, ensuring that users cannot reuse old passwords. Each user's password is salted and stored as a hash value to enhance password security. By recording the password setting date, a password expiration policy can be implemented, forcing users to change their passwords periodically.", "answer": "CREATE TABLE guacamole_user (\n    password_date DATETIME,\n    user_id INTEGER PRIMARY KEY\n);\n\nCREATE TABLE guacamole_user_password_history (\n    password_date DATETIME,\n    password_hash VARCHAR(255),\n    password_history_id INTEGER PRIMARY KEY,\n    password_salt VARCHAR(255),\n    user_id INTEGER\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "szh", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a898", "question": "Customer Relationship Management (CRM) systems are tools used by companies to manage interactions with customers, improve customer satisfaction and loyalty, and optimize sales and marketing processes. With increasing competition and changes in the market environment, many companies have realized that maintaining and improving relationships with customers is essential for long-term success. Through efficient customer data management, accurate market segmentation, timely customer follow-up, and personalized services, companies can increase customer stickiness, improve sales and service quality, and thus achieve higher market share and customer satisfaction.\nCRM systems help companies manage customers comprehensively by integrating basic customer information, communication records, sales opportunities, service requests, etc. This system not only improves the work efficiency of marketing and sales teams, but also helps customer service departments provide more personalized services, thereby forming healthy customer relationships.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Company_Name VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Gender BOOL,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Department VARCHAR(255),\n    Email VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender BOOL,\n    Level INTEGER,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Sales_Opportunity (\n    Actual_Transaction_Period DATETIME,\n    Creation_Time DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    Employee_ID INTEGER NOT NULL,\n    Estimated_Amount FLOAT,\n    Estimated_Transaction_Date DATETIME,\n    Opportunity_Name VARCHAR(255),\n    Opportunity_Stage VARCHAR(255),\n    Status VARCHAR(255),\n    PRIMARY KEY (Customer_ID, Employee_ID, Creation_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Communication_Record (\n    Communication_Content VARCHAR(255),\n    Communication_Method VARCHAR(255),\n    Communication_Result VARCHAR(255),\n    Communication_Stage VARCHAR(255),\n    Creation_Time DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    Employee_ID INTEGER NOT NULL,\n    PRIMARY KEY (Customer_ID, Employee_ID, Creation_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Service_Request (\n    Creation_Time DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    Employee_ID INTEGER NOT NULL,\n    Request_Description VARCHAR(255),\n    Request_Type VARCHAR(255),\n    Solution VARCHAR(255),\n    Status VARCHAR(255),\n    PRIMARY KEY (Customer_ID, Employee_ID, Creation_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "CS 2025/1/7", "assign_to": "cs", "assign_to_round2": "szh", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a899", "question": "Meilong Salon Management System\nThis database is for a salon management system. It records the customer’s name, hair color, and appointment time. Based on the appointment time, customers are assigned to specific hairstylists. The system also records the hairstylist’s name and expertise. Additionally, the service time and service content provided to customers by each hairstylist are recorded.", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Hair_Color VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Hairstylist (\n    Expertise VARCHAR(255),\n    Hairstylist_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Service (\n    Appointment_Time DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    Hairstylist_ID INTEGER NOT NULL,\n    Service_Content VARCHAR(255),\n    Service_Time DATETIME,\n    PRIMARY KEY (Customer_ID, Hairstylist_ID, Appointment_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Hairstylist_ID) REFERENCES Hairstylist(Hairstylist_ID)\n);", "remarks": "WQ:修改客户schema，客户和发型师是多对多关系。", "assign_to": "gcc", "assign_to_round2": "wq", "domain": ["居民服务、修理和其他服务业", "居民服务业"]}
{"id": "67552f0a13602ec03b41a8aa", "question": "In modern enterprises, the management and evaluation of technology solutions is an important part of ensuring that technology investment generates maximum value and promotes business innovation. With the rapid development of information technology, various technology solutions (such as software tools, hardware equipment, cloud services, artificial intelligence systems, etc.) have become key means for enterprises to improve efficiency, reduce costs, and optimize products and services. However, how to effectively manage and evaluate these technology solutions to ensure that they meet business needs and achieve expected results has become a challenge for enterprises.\nTherefore, enterprises need a dedicated technology solution management and evaluation system. Management of technology solutions: record and track the selection, implementation and maintenance process of various technology solutions to ensure that they can continue to meet the technology needs of the enterprise.\nEvaluation of solutions: evaluate the effectiveness of various technology solutions, evaluate their cost-effectiveness, implementation progress, user feedback, etc.", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Technical_solution (\n    Implementation_expected_end_date DATETIME,\n    Implementation_start_date DATETIME,\n    Solution_description VARCHAR(255),\n    Solution_name VARCHAR(255),\n    Status VARCHAR(255),\n    Technical_solution_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Employee (\n    Contact_number VARCHAR(255),\n    Email VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Technical_solution_feedback (\n    Feedback_content VARCHAR(255),\n    Feedback_date DATETIME,\n    Satisfaction VARCHAR(255),\n    Technical_solution_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    User_suggestion VARCHAR(255),\n    PRIMARY KEY (User_ID, Technical_solution_ID, Feedback_date),\n    FOREIGN KEY (Technical_solution_ID) REFERENCES Technical_solution(Technical_solution_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Technical_solution_evaluation (\n    Employee_ID INTEGER NOT NULL,\n    Evaluation_content VARCHAR(255),\n    Evaluation_date DATETIME,\n    Evaluation_indicators VARCHAR(255),\n    Evaluation_results VARCHAR(255),\n    Technical_solution_ID INTEGER NOT NULL,\n    PRIMARY KEY (Technical_solution_ID, Employee_ID, Evaluation_date),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Technical_solution_ID) REFERENCES Technical_solution(Technical_solution_ID)\n);", "remarks": "CS 2025/1/7", "assign_to": "cs", "assign_to_round2": "szh", "domain": ["科学研究和技术服务业", "专业技术服务业"]}
{"id": "67552f0a13602ec03b41a8b5", "question": "The following is the database requirements analysis for the customer order management system: The system involves the management of customers, orders, order items, and quotations, including the roles of users in customer order creation and quotation.\n\nFirst, there is the customer (Customer ID, Creation Time, Update Time, Deletion Time, Email, Name) entity, which records the detailed information of the customer. Customer ID serves as the Primary key, while Email and Name serve as the basic contact information of the customer. The customer table ensures that each customer's record is complete, including the creation, update, and deletion times of the customer.\n\nThe order (Order ID, Creation Time, Update Time, Deletion Time, Order Description, Delivery Date, Invoice Number, Currency Type, Order Number, Creator User ID, Customer ID) entity records the detailed information of the order. Each order is identified by the Order ID as the Primary key, and the Creator User ID and Customer ID are associated with the user table and customer table, ensuring the relationship between the order creator and the customer. The order table also records important information such as the delivery date and invoice number of the order.\n\nThe order item (Order Item ID, Creation Time, Update Time, Deletion Time, Description, Quantity, Unit, Unit Price, Order ID) entity records the specific items under each order, and each order can contain multiple order items. The order item is associated with the order table through a Foreign key, ensuring that each order item belongs to a specific order.\n\nThe user (User ID, Creation Time, Update Time, Deletion Time, Email, Username, Password) entity records all user information in the system, including the basic information and authentication information of the user. The user table is the creator of orders and quotations, managing the interaction between customers and orders.\n\nIn addition, the user creates orders for customers (Order ID, Customer ID) relationship table represents the many-to-many relationship between users and customers. A user can create multiple orders for a customer, and each customer can also have orders created by multiple users.\n\nThe order items of an order (Order Item ID, Order ID) relationship table is used to record the multiple order items contained in each order, ensuring that each order item is associated with a specific order in the order table.\n\nThe user quotes for customers (Quotation ID, Customer ID) relationship table records the quotation information provided by users to customers, representing the many-to-many relationship between users and customers.\n\nThese designs ensure that the system can effectively manage the relationships between customers, orders, order items, and quotations, and support the role of users in the order creation and quotation process.\n", "answer": "CREATE TABLE Customer (\n    Creation_Time DATETIME,\n    Customer_ID INTEGER PRIMARY KEY,\n    Deletion_Time DATETIME,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE User (\n    Creation_Time DATETIME,\n    Deletion_Time DATETIME,\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Update_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Creation_Time DATETIME,\n    Creator_User_ID INTEGER NOT NULL,\n    Currency_Type VARCHAR(255),\n    Customer_ID INTEGER NOT NULL,\n    Deletion_Time DATETIME,\n    Delivery_Date DATETIME,\n    Invoice_Number VARCHAR(255),\n    Order_Description VARCHAR(255),\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Number VARCHAR(255),\n    Update_Time DATETIME,\n    FOREIGN KEY (Creator_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Quotation (\n    Creation_Time DATETIME,\n    Creator_User_ID INTEGER NOT NULL,\n    Customer_ID INTEGER NOT NULL,\n    Deletion_Time DATETIME,\n    Description VARCHAR(255),\n    Quotation_ID INTEGER PRIMARY KEY,\n    Quotation_Number VARCHAR(255),\n    Update_Time DATETIME,\n    FOREIGN KEY (Creator_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order_Item (\n    Creation_Time DATETIME,\n    Deletion_Time DATETIME,\n    Description VARCHAR(255),\n    Order_ID INTEGER NOT NULL,\n    Order_Item_ID INTEGER PRIMARY KEY,\n    Quantity INTEGER,\n    Unit VARCHAR(255),\n    Unit_Price FLOAT,\n    Update_Time DATETIME,\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "gcc", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a8ba", "question": "This is a system for managing users and torrent files, such as an online torrent sharing platform. For user management, the system allows users to create accounts by providing username and password, users can log in to the system using username and password. The system supports different role assignments, such as ADMIN, CONTRIBUTOR, and VISITOR. Users can update their username and password, and the system records the creation time and last update time of users. For torrent file management, users can upload torrent files, each torrent file is associated with a user, the system records the name, upload time, and last update time of torrent files. When a user is deleted, all torrent files uploaded by that user will also be deleted. Users can update the information of their uploaded torrent files. For permission management, ADMINs can manage all users and torrent files, CONTRIBUTORs can upload and manage their own torrent files, and VISITORs can only view torrent files, cannot upload or modify them.", "answer": "CREATE TABLE Role (\n    Permissions VARCHAR(255),\n    Role_ID INTEGER PRIMARY KEY,\n    Role_name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Creation_time DATETIME,\n    Password VARCHAR(255),\n    Role_ID INTEGER NOT NULL,\n    Update_time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);\n\nCREATE TABLE Torrent_file (\n    Last_update_time DATETIME,\n    Name VARCHAR(255),\n    Torrent_ID INTEGER PRIMARY KEY,\n    Upload_time DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "需求描述增加实体属性,种子文件中包含属性用户编号", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8bb", "question": "This is a Human Resource Management System (HR System). The system maintains employee basic records, including employee ID, name, gender, date of birth, and hire date. It also manages employee position change history, recording original department, original position, current department, current position, entry date, and departure date. For organizational structure management, the system maintains the company's departmental structure, including department code, name, and person in charge, manages employee department affiliations, and handles personnel transfers. For compensation management, the system maintains employee salary standards (including standard description and standard value), ensures accurate and timely salary payment, and provides individual salary inquiry and departmental salary statistical analysis functions.", "answer": "CREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_code VARCHAR(255),\n    Name VARCHAR(255),\n    Person_in_charge VARCHAR(255)\n);\n\nCREATE TABLE Salary_standard (\n    Salary_standard_ID INTEGER PRIMARY KEY,\n    Standard_description VARCHAR(255),\n    Standard_value FLOAT\n);\n\nCREATE TABLE Employee (\n    Date_of_birth DATETIME,\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Hire_date DATETIME,\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Salary_standard_ID INTEGER NOT NULL,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Salary_standard_ID) REFERENCES Salary_standard(Salary_standard_ID)\n);\n\nCREATE TABLE Employee_position_change (\n    Current_department VARCHAR(255),\n    Current_position VARCHAR(255),\n    Department_ID INTEGER NOT NULL,\n    Departure_time DATETIME,\n    Employee_ID INTEGER NOT NULL,\n    Entry_time DATETIME,\n    Original_department VARCHAR(255),\n    Original_position VARCHAR(255),\n    PRIMARY KEY (Employee_ID, Department_ID, Departure_time),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "员工实体需要包含薪资标准编号和部门编号", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["公共管理、社会保障和社会组织", "群众团体、社会团体和其他成员组织"]}
{"id": "67552f0a13602ec03b41a8c0", "question": "This is an email marketing system for managing user accounts, email campaigns, mailing lists, subscriber relationships, and campaign message status. For user management, the system manages user account information, including name, email address, and account status, supporting account creation, deletion, and status updates. For email campaign management, the system supports creating and managing email campaigns, including campaign subject, content, status, and scheduled sending time. Campaigns can be associated with multiple mailing lists, and the system supports campaign planning, sending, cancellation, and failure status management. For mailing list management, the system supports creating and managing mailing lists, including list name and status, with each list being associated with a user account, supporting list creation, deletion, and status updates. For subscriber management, the system manages subscriber information, including name, email address, and subscription status, with each subscriber being associated with a user account, supporting subscriber creation, deletion, unsubscription, and status updates. For subscription relationship management, the system manages relationships between subscribers and mailing lists, supporting subscription relationship creation and deletion. For message status management, the system records creation time and message status for each subscriber in each email campaign, supporting message pending, sent, cancelled, and failed status management.", "answer": "CREATE TABLE User (\n    Account_status VARCHAR(255),\n    Email_address VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Email_campaign (\n    Campaign_ID INTEGER PRIMARY KEY,\n    Campaign_subject VARCHAR(255),\n    Content VARCHAR(255),\n    Scheduled_sending_time DATETIME,\n    Status VARCHAR(255)\n);\n\nCREATE TABLE Mailing_list (\n    List_name VARCHAR(255),\n    Mailing_list_ID INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Subscriber (\n    Email_address VARCHAR(255),\n    Name VARCHAR(255),\n    Subscriber_ID INTEGER PRIMARY KEY,\n    Subscription_status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Campaign_mailing_list_association (\n    Campaign_ID INTEGER NOT NULL,\n    Mailing_list_ID INTEGER NOT NULL,\n    PRIMARY KEY (Mailing_list_ID, Campaign_ID),\n    FOREIGN KEY (Campaign_ID) REFERENCES Email_campaign(Campaign_ID),\n    FOREIGN KEY (Mailing_list_ID) REFERENCES Mailing_list(Mailing_list_ID)\n);\n\nCREATE TABLE Message (\n    Campaign_ID INTEGER NOT NULL,\n    Creation_time DATETIME,\n    Message_status VARCHAR(255),\n    Subscriber_ID INTEGER NOT NULL,\n    PRIMARY KEY (Subscriber_ID, Campaign_ID, Creation_time),\n    FOREIGN KEY (Campaign_ID) REFERENCES Email_campaign(Campaign_ID),\n    FOREIGN KEY (Subscriber_ID) REFERENCES Subscriber(Subscriber_ID)\n);", "remarks": "订阅者和用户实体缺少用户编号属性", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8c7", "question": "In modern social platforms, interaction and relationship management between users have become particularly important. The core function of the system is to help users manage their own social networks, record the interaction history with other users, and display the dynamics and social activities posted by users. The system allows users to create personal profiles, post dynamics, establish connections and interact with other users (such as likes, comments, favorites, etc.). Through such a design, users can easily interact with each other, manage contacts, and see their social activities and dynamic feedback in real time. Main business functions:\nUser management: Users register through the system and create personal profiles. User profiles include basic information such as account, nickname, password, phone, email, gender, registration time, and birthday.\nUsers can authenticate their identities and set privacy settings through their personal profiles to ensure the security and visibility of information.\nDynamic publishing and management: Users can post social dynamics, and dynamic content can include text, pictures or other forms of multimedia content. Each dynamic includes the publisher ID, publishing time, number of likes, number of comments, number of favorites, and dynamic content.\nDynamics posted by users will be displayed on their personal homepage and possible social circles, and other users can interact.\nContact management: Users can add other users as contacts, and the system records the relationship type between contacts (for example: friends, colleagues, etc.). Each contact addition operation is timestamped and can be accompanied by notes.\nThe management of contact relationships can help users understand the structure of their social networks, and different connections can be distinguished by setting relationship types.\nSocial activity management: Users can interact with the dynamics posted by other users, including likes, comments, and favorites. Each interaction records the time and type of interaction. The system generates social activity records based on the user's interaction history and provides real-time feedback on social interactions.\nHistorical tracking of social interactions: The system not only records current social interactions, but also saves historical information for each interaction. This information helps analyze user interaction trends and preferences and provide users with personalized social recommendations. Records of user interactions with specific dynamics (likes, comments, favorites, etc.) are also saved to form a complete social activity log.\n\n\n", "answer": "CREATE TABLE User (\n    Account VARCHAR(255),\n    Birthday DATETIME,\n    Email VARCHAR(255),\n    Gender BOOL,\n    Nickname VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    Registration_time DATETIME,\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE User_dynamic_information (\n    Dynamic_ID INTEGER PRIMARY KEY,\n    Dynamic_content VARCHAR(255),\n    Number_of_comments INTEGER,\n    Number_of_favorites INTEGER,\n    Number_of_likes INTEGER,\n    Publisher_ID INTEGER NOT NULL,\n    Publishing_time DATETIME,\n    FOREIGN KEY (Publisher_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Add_Contact (\n    Add_Time DATETIME,\n    Added_User_ID INTEGER NOT NULL,\n    Relationship_Type VARCHAR(255),\n    Remarks VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Added_User_ID, Adding_time),\n    FOREIGN KEY (Added_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Social_Activity (\n    Collection BOOL,\n    Comment VARCHAR(255),\n    Creation_Time DATETIME,\n    Dynamic_ID INTEGER NOT NULL,\n    Like BOOL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, User_Dynamic_ID, Creation_Time),\n    FOREIGN KEY (Dynamic_ID) REFERENCES User_dynamic_information(Dynamic_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 2025/1/7", "assign_to": "cs", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8df", "question": "This is a simple space combat game system. For game record management, the system records basic information of each game, including number of rounds, grid size, username, and game result. For spaceship management, the system records basic information of each spaceship, including strength, position, name, and type, with each spaceship belonging to a specific game. For fighter management, the system records basic information of each fighter, including name and strength, with each fighter belonging to a specific spaceship.\n", "answer": "CREATE TABLE Game (\n    Game_ID INTEGER PRIMARY KEY,\n    Game_result VARCHAR(255),\n    Grid_size FLOAT,\n    Number_of_rounds INTEGER,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Spaceship (\n    Game_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Spaceship_ID INTEGER PRIMARY KEY,\n    Strength FLOAT,\n    Type VARCHAR(255),\n    FOREIGN KEY (Game_ID) REFERENCES Game(Game_ID)\n);\n\nCREATE TABLE Fighter (\n    Fighter_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Spaceship_ID INTEGER NOT NULL,\n    Strength FLOAT,\n    FOREIGN KEY (Spaceship_ID) REFERENCES Spaceship(Spaceship_ID)\n);", "remarks": "飞船和战斗机实体的属性里面需要有外键属性；去除模式中的表子", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a8e5", "question": "This is a mini Employee Management System (miniEMS). For department management, the system records company department information, including department ID, department name, and department responsibilities, where department IDs are fixed as 10, 20, 30, 40, 50, and department names are fixed as IT, Marketing, HR, Sale, president office. For employee management, the system records employee basic information, including employee ID, name, gender, age, social security number, department ID, position, email address, phone number, and base salary. The employee ID is automatically generated and uniquely identifies each employee, name is divided into first and last name with both being required, gender defaults to female but allows selection of male or female, age range is between 18 and 100, social security number is unique and used for identity verification, department ID is linked to the department table to ensure employees belong to a department, position defaults to staff but allows selection of staff, assistant, supervisor, manager, director, president, etc., email address and phone number are required for contacting employees, and base salary is required for recording employee compensation information.\n", "answer": "CREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_name VARCHAR(255),\n    Department_responsibilities VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Age INTEGER,\n    Base_salary FLOAT,\n    Department_ID INTEGER NOT NULL,\n    Email_address VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_number VARCHAR(255),\n    Position VARCHAR(255),\n    Social_security_number VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);", "remarks": "去除模式中的表字；员工实体中需要有属性部门ID", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a8e6", "question": "The membership management system shall record each member's country code, name (with optional pronunciation), and company name, allowing the option to set whether this information is publicly accessible. To expedite the retrieval of certain member information, these details shall be cached in a data cache table. The system shall also manage multiple address entries for each member, with each address containing detailed information such as country, postal code, specific address, and telephone number.", "answer": "CREATE TABLE Country (\n    Country_Code VARCHAR(255) PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Member (\n    Company_Name VARCHAR(255),\n    Country_Code VARCHAR(255) NOT NULL,\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Name_Pronunciation VARCHAR(255),\n    Public_Status VARCHAR(255),\n    FOREIGN KEY (Country_Code) REFERENCES Country(Country_Code)\n);\n\nCREATE TABLE Address (\n    Address_ID INTEGER PRIMARY KEY,\n    Contact_Number VARCHAR(255),\n    Country_Code VARCHAR(255) NOT NULL,\n    Postal_Code VARCHAR(255),\n    Specific_Address VARCHAR(255),\n    FOREIGN KEY (Country_Code) REFERENCES Country(Country_Code)\n);\n\nCREATE TABLE Member_Address_Management (\n    Address_ID INTEGER NOT NULL,\n    Member_ID INTEGER NOT NULL,\n    PRIMARY KEY (Member_ID, Address_ID),\n    FOREIGN KEY (Address_ID) REFERENCES Address(Address_ID),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);", "remarks": "WQ:无修改", "assign_to": "zp", "assign_to_round2": "wq", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a8e9", "question": "A social networking platform manages its users' account information and the interactions among users. Users must provide a username when registering and may optionally provide an email address and phone number. Users can enter their date of birth and upload a personal avatar; the system stores the file path for the avatar. Each user account's creation time and the time of the last information modification are recorded.\n\nUsers can post updates on the platform, which may include text, images, or videos. Each update has a posting time and content type. Users can follow each other, with the follow relationship including the follower and the followed, and the follow time is recorded.\n\nAdditionally, users can comment on other users' updates. Comment details include the comment content, comment time, and commenter information. ", "answer": "CREATE TABLE User (\n    Avatar_Path VARCHAR(255),\n    Creation_Time DATETIME,\n    Date_of_Birth DATETIME,\n    Email_Address VARCHAR(255),\n    Last_Modification_Time DATETIME,\n    Phone_Number VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Update (\n    Content VARCHAR(255),\n    Content_Type VARCHAR(255),\n    Posting_Time DATETIME,\n    Update_ID INTEGER PRIMARY KEY,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Follow_Relationship (\n    Follow_Time DATETIME,\n    Followed_ID INTEGER NOT NULL,\n    Follower_ID INTEGER NOT NULL,\n    PRIMARY KEY (Follower_ID, Followed_ID),\n    FOREIGN KEY (Followed_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Follower_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Comment (\n    Comment_Content VARCHAR(255),\n    Comment_ID INTEGER PRIMARY KEY,\n    Comment_Time DATETIME,\n    Commenter_ID INTEGER NOT NULL,\n    Update_ID INTEGER NOT NULL,\n    FOREIGN KEY (Commenter_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Update_ID) REFERENCES Update(Update_ID)\n);", "remarks": "关注关系出现在实体中，已删除；", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8f2", "question": "User Management Module: Users register by providing information such as username, password, email, and phone number. The system assigns a default role to each user and records the user's registration time and update time. User information can be modified, viewed, or deleted. Each user includes the following Attributes: User ID (Primary key), username, password, email, phone number, role, registration time, and update time.\n\nCredit Management Module: Administrators can create and manage credit records for employees by filling in information such as credit number, credit type, application date, monthly factor, and number of applications. After each credit record is created, the system records the creation time and update time, and allows administrators to modify the credit information. Credit records can also be deleted, and the system records the deletion time. Credit records are associated with the following entities: user, employee, company, and payment. Each credit record includes the following Attributes: credit number (Primary key), credit type, application date, monthly factor, number of applications, creation time, update time, deletion time (nullable), User ID (Foreign key, associated with user table), Employee ID (Foreign key, associated with employee table), Company ID (Foreign key, associated with company table).\n\nCredit Record Status Management Module: The system can manage the status of credit records, and users and administrators can view the current status of credits (such as valid, invalid, terminated, etc.). Each time a credit record is updated, deleted, or activated, the system automatically records the timestamp and operator of the operation to support auditing and historical tracking. Credit record statuses include valid, invalid, terminated, etc.\n\nCompany Management Module: Administrators can manage company information, including company name and company address. Each company has the following Attributes: Company ID (Primary key), company name, company address, creation time, update time.\n\nEmployee Management Module: Administrators can manage employee information, including employee name, position, and affiliated company. Each employee has the following Attributes: Employee ID (Primary key), employee name, employee position, affiliated Company ID (Foreign key, associated with company table).\n", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Registration_Time DATETIME,\n    Role VARCHAR(255),\n    Update_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Company (\n    Company_Address VARCHAR(255),\n    Company_ID INTEGER PRIMARY KEY,\n    Company_Name VARCHAR(255),\n    Creation_Time DATETIME\n);\n\nCREATE TABLE Employee (\n    Affiliated_Company_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Employee_Name VARCHAR(255),\n    Employee_Position VARCHAR(255),\n    FOREIGN KEY (Affiliated_Company_ID) REFERENCES Company(Company_ID)\n);\n\nCREATE TABLE Credit_Record (\n    Application_Date DATETIME,\n    Creation_Time DATETIME,\n    Credit_Number VARCHAR(255) PRIMARY KEY,\n    Credit_Status VARCHAR(255),\n    Credit_Type VARCHAR(255),\n    Deletion_Time DATETIME,\n    Employee_ID INTEGER NOT NULL,\n    Monthly_Factor VARCHAR(255),\n    Number_of_Applications VARCHAR(255),\n    Update_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "WQ:无修改", "assign_to": "szc", "assign_to_round2": "wq", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a8f3", "question": "This is a Sales Management System for managing company sales, orders, customers, employees, and products. For office location management, the system manages company office locations including city, street address, postal code, country, records office contact numbers and fax numbers, and assigns dedicated managers for each location. For employee management, the system records employee basic information including name, position, hire date, employee number, maintains employee office phone and email contacts, sets up direct supervisors to establish clear reporting relationships, records employee base salary and commission rates, and tracks sales performance and revenue for each fiscal year. For customer management, the system records customer company names, customer IDs, maintains detailed contact person information including name, position, phone, records detailed addresses including street, city, state/province, postal code, country, assigns dedicated sales representatives for each customer, sets and manages customer credit limits, and records payment details including check numbers, payment dates, and amounts. For product management, the system records product names, models, specifications, descriptions, sets product cost prices and suggested retail prices, tracks inventory quantities, and records product suppliers and brands. For order management, the system records order dates, requested delivery dates, actual shipping dates and ordering customers, tracks order status (such as pending, shipped, completed), records special instructions and notes, and details product quantities, unit prices, and line numbers in each order. For sales performance management, the system records each salesperson's total sales by fiscal year, analyzes sales trends and performance changes, evaluates sales strategy effectiveness, and provides data support for setting sales targets. For payment management, the system records check numbers, payment dates, invoice amounts and paying customers for each payment, registers check clearing dates, and tracks customer accounts receivable.", "answer": "CREATE TABLE Employee (\n    Base_salary FLOAT,\n    Commission_rate FLOAT,\n    Email VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Employee_number VARCHAR(255),\n    Hire_date DATETIME,\n    Name VARCHAR(255),\n    Office_phone VARCHAR(255),\n    Position VARCHAR(255),\n    Supervisor_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supervisor_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Product (\n    Brand VARCHAR(255),\n    Cost_price FLOAT,\n    Description VARCHAR(255),\n    Inventory_quantity INTEGER,\n    Model VARCHAR(255),\n    Name VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Specification VARCHAR(255),\n    Suggested_retail_price FLOAT,\n    Supplier VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Actual_shipping_date DATETIME,\n    Notes VARCHAR(255),\n    Order_ID INTEGER PRIMARY KEY,\n    Order_date DATETIME,\n    Order_status VARCHAR(255),\n    Required_delivery_date DATETIME,\n    Special_instructions VARCHAR(255)\n);\n\nCREATE TABLE Office_location (\n    City VARCHAR(255),\n    Contact_phone VARCHAR(255),\n    Country VARCHAR(255),\n    Fax VARCHAR(255),\n    Manager_employee_ID INTEGER NOT NULL,\n    Office_location_ID INTEGER PRIMARY KEY,\n    Postal_code VARCHAR(255),\n    Street_address VARCHAR(255),\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Customer (\n    City VARCHAR(255),\n    Contact_person_name VARCHAR(255),\n    Contact_person_phone VARCHAR(255),\n    Contact_person_position VARCHAR(255),\n    Country VARCHAR(255),\n    Credit_limit FLOAT,\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_company_name VARCHAR(255),\n    Dedicated_sales_rep_employee_ID INTEGER NOT NULL,\n    Postal_code VARCHAR(255),\n    State/Province VARCHAR(255),\n    Street VARCHAR(255),\n    FOREIGN KEY (Dedicated_sales_rep_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Sales_performance_record (\n    Record_ID INTEGER PRIMARY KEY,\n    Sales_person_ID INTEGER NOT NULL,\n    Total_sales FLOAT,\n    Year INTEGER,\n    FOREIGN KEY (Sales_person_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Order_detail (\n    Line_number VARCHAR(255),\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Unit_price FLOAT,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Payment_record (\n    Check_clearing_date DATETIME,\n    Check_number VARCHAR(255),\n    Customer_accounts_receivable FLOAT,\n    Invoice_amount FLOAT,\n    Paying_customer_ID INTEGER NOT NULL,\n    Payment_date DATETIME,\n    Record_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Paying_customer_ID) REFERENCES Customer(Customer_ID)\n);", "remarks": "实体中需要包含schema中外键的属性", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a908", "question": "The unit management of a benchmark testing system is as follows: The system contains multiple units, with unit information including Unit ID and Unit Name. The Unit ID is the Primary key and auto-incrementing, while the Unit Name is a unique value and cannot be null. Each unit is associated with a benchmark testing type, with the Benchmark Testing Type ID as a Foreign key referencing the Benchmark Testing Type table's Benchmark Testing Type ID field, which also cannot be null. Through these tables, the system effectively manages unit information and its relationship with benchmark testing types, ensuring data consistency and integrity.", "answer": "CREATE TABLE Benchmark_Testing (\n    Benchmark_Testing_ID INTEGER PRIMARY KEY,\n    Benchmark_Testing_Name VARCHAR(255)\n);\n\nCREATE TABLE Unit (\n    Benchmark_Testing_ID INTEGER NOT NULL,\n    Unit_ID INTEGER PRIMARY KEY,\n    Unit_Name VARCHAR(255),\n    FOREIGN KEY (Benchmark_Testing_ID) REFERENCES Benchmark_Testing(Benchmark_Testing_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a90e", "question": "The system requirements analysis for managing customer evaluations and customer bank account information in an airline company is as follows:\nCustomer information management includes basic customer information such as user ID, name, and contact number.\nFlight route management includes flight route ID, name, route, and time.\nCustomer evaluation management needs to record the customer ID, the evaluation content and score of the flight route. The flight route information is associated through AirlineID to ensure that each evaluation corresponds to a specific flight route. The customer information is associated through CustomerID to ensure that each evaluation corresponds to a specific customer.\nCustomer bank account management records the customer's bank account information, including account ID, account number, and balance. The customer information is associated through CustomerID to ensure that each bank account corresponds to a specific customer. At the same time, ensure the uniqueness of the account number to avoid duplication. ", "answer": "CREATE TABLE Customers_Table (\n    CustomerID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone INTEGER\n);\n\nCREATE TABLE Airlines_Table (\n    AirlineID INTEGER PRIMARY KEY,\n    AirlineName VARCHAR(255),\n    Route VARCHAR(255),\n    Time DATETIME\n);\n\nCREATE TABLE CustomerReviews_Table (\n    AirlineID INTEGER,\n    CustomerID INTEGER,\n    ReviewContent VARCHAR(255),\n    ReviewGrade FLOAT,\n    ReviewID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE CustomerBankAccounts_Table (\n    AccountID null PRIMARY KEY,\n    AccountNumber null,\n    Balance null,\n    CustomerID null\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "szh", "domain": ["交通运输、仓储和邮政业", "航空运输业"]}
{"id": "67552f0a13602ec03b41a913", "question": "The enterprise management system is a system used to manage and record basic company information, employee information, department structure, etc. Its core purpose is to help companies effectively manage internal resources, optimize operational processes, and improve management efficiency. Through the system, managers can easily access various basic data of the company, grasp the detailed information of employees, and conduct personnel deployment, salary management, attendance management, etc. In addition, the system can also support functions such as authority management, enterprise goal setting, and employee performance appraisal. Specific functional requirements include: Employee information management: including detailed records of employees' personal information (such as name, gender, age, date of birth, contact information), position, entry time, salary, etc. Department management: manage information of different departments, including department name, department head, department responsibilities, department location, total number of department personnel, etc. Employee and department association: record the department of each employee, and support cross-department employee transfer and department management. Attendance management: record employee attendance, including attendance (punch time, punch type), leave record (leave time, leave type), overtime record (overtime time, overtime type), etc.", "answer": "CREATE TABLE department (\n    department_ID INTEGER PRIMARY KEY,\n    department_location VARCHAR(255),\n    department_name VARCHAR(255),\n    department_responsibilities VARCHAR(255),\n    person_in_charge_ID INTEGER,\n    total_number_of_department_employees INTEGER\n);\n\nCREATE TABLE employee_attendance (\n    employee_ID INTEGER,\n    punch_time DATETIME,\n    punch_type VARCHAR(255),\n    PRIMARY KEY (employee_ID, clock-in_time)\n);\n\nCREATE TABLE employee (\n    age INTEGER,\n    contact_information VARCHAR(255),\n    date_of_birth DATETIME,\n    department_ID INTEGER NOT NULL,\n    employee_ID INTEGER PRIMARY KEY,\n    gender VARCHAR(255),\n    name VARCHAR(255),\n    position VARCHAR(255),\n    salary FLOAT,\n    time_of_employment DATETIME,\n    FOREIGN KEY (department_ID) REFERENCES department(department_ID)\n);\n\nCREATE TABLE employee_transfer_department (\n    employee_ID INTEGER NOT NULL,\n    transfer_time DATETIME,\n    transfer-in_department_ID INTEGER NOT NULL,\n    transfer-out_department_ID INTEGER NOT NULL,\n    PRIMARY KEY (employee_ID, transfer_time),\n    FOREIGN KEY (employee_ID) REFERENCES employee(employee_ID),\n    FOREIGN KEY (transfer-in_department_ID) REFERENCES department(department_ID),\n    FOREIGN KEY (transfer-out_department_ID) REFERENCES department(department_ID)\n);\n\nCREATE TABLE employee_leave (\n    employee_ID INTEGER NOT NULL,\n    leave_time DATETIME,\n    leave_type VARCHAR(255),\n    PRIMARY KEY (employee_ID, leave_time),\n    FOREIGN KEY (employee_ID) REFERENCES employee(employee_ID)\n);\n\nCREATE TABLE employee_overtime (\n    employee_ID INTEGER NOT NULL,\n    overtime DATETIME,\n    overtime_type VARCHAR(255),\n    PRIMARY KEY (employee_ID, overtime),\n    FOREIGN KEY (employee_ID) REFERENCES employee(employee_ID)\n);", "remarks": "补充需求描述信息，调整格式，添加了请假记录和加班记录的schema", "assign_to": "cs", "assign_to_round2": "hzb", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a918", "question": "Business requirement description: Indicator management system\nThe system is used to manage and track the performance of different users on multiple indicators, aiming to help organizations monitor key performance indicators (KPIs) and the specific data provided by users during the execution process. The system supports the definition of indicators, the association of users with indicators, data submission and update, real-time evaluation and reporting of user performance, and helps managers optimize decision-making.\nUser management: The system needs to record the basic information of each user, including user ID, name, age, gender, phone number and email address. Each user can be an employee, team or other member of the organization, and the user's information is used for task allocation and data recording in the system.\nIndicator definition management: The system will manage multiple indicators, each of which has indicator ID, indicator name, indicator target, indicator description, calculation method and unit. These indicators represent key indicators that need to be tracked and measured (for example, sales, customer satisfaction, etc.), and define how to calculate and measure the goals of these indicators.\nUser and indicator association management: Each user will be assigned one or more indicators. The table records the relationship between each user and the indicator for which he is responsible, including user ID, indicator ID and allocation time. This relational table supports querying and updating the indicators that the user is responsible for, which can help system administrators view the task allocation of each user.\nIndicator data submission and record management: Users regularly submit data related to indicators according to their responsibilities. These data will be recorded in the indicator data record table, including user ID, indicator ID, submission record time, remarks, improvement relative to the last record, and recorded indicator value. Each data record will contain the data submitted by the user, the remarks, and the difference from the last record to help track changes in user performance.\nIndicator tracking and improvement analysis: The system can calculate and display the difference between the actual value and the target value of each indicator in real time based on the records submitted by the user. For example, through the improvement relative to the last record, the system can evaluate the user's progress in a certain period of time and provide timely feedback to the user or manager.\nData review and feedback mechanism: The system supports reviewing each submitted data. After the review is passed, the data will be officially stored in the database and the historical record will be kept in the indicator data record. Users can provide detailed instructions through remarks, and managers can conduct data analysis and feedback based on this.\n", "answer": "CREATE TABLE User (\n    Age INTEGER,\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Indicator (\n    Calculation_method VARCHAR(255),\n    Indicator_ID INTEGER PRIMARY KEY,\n    Indicator_description VARCHAR(255),\n    Indicator_name VARCHAR(255),\n    Indicator_target VARCHAR(255),\n    Unit INTEGER\n);\n\nCREATE TABLE User_assigned_indicator (\n    Allocation_time DATETIME,\n    Indicator_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Indicator_ID, Allocation_time),\n    FOREIGN KEY (Indicator_ID) REFERENCES Indicator(Indicator_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Indicator_data_record (\n    Improvement_relative_to_the_last_record VARCHAR(255),\n    Indicator_ID INTEGER NOT NULL,\n    Record_indicator_value VARCHAR(255),\n    Remarks VARCHAR(255),\n    Submission_record_time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Indicator_ID, Submission_record_time),\n    FOREIGN KEY (Indicator_ID) REFERENCES Indicator(Indicator_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 2025/1/8 WQ:修改了需求格式。", "assign_to": "cs", "assign_to_round2": "wq", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a93d", "question": "The main function of a commercial sales management system is to manage customer orders, supplier information, product information, and salesperson performance. The tables involved in the system include customers, suppliers, products, staff, and related order and sales records. The core requirements of the system are: Manage customer information: record basic customer information, including contact information, address, etc. Manage supplier information: track the supplier source of the product, and record the supplier's contact information and address. Manage product information: store detailed information about the product, including product name, description, and inventory quantity. Manage staff information: record information about staff related to operations (such as salespersons, buyers, etc.). Order and sales records: track product information purchased from suppliers and sold to customers.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Contact VARCHAR(255),\n    Gender VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Contact VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Description VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Inventory_Quantity INTEGER,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Purchase_from_Supplier (\n    Operator_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Purchase_Product_Unit_Price FLOAT,\n    Purchase_Quantity INTEGER,\n    Purchase_Time DATETIME,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supplier_ID, Product_ID, Purchase_Time),\n    FOREIGN KEY (Operator_ID) REFERENCES Staff(ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(ID)\n);\n\nCREATE TABLE Sales_Product (\n    Customer_ID INTEGER NOT NULL,\n    Operator_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity_of_Sales_Product INTEGER,\n    Sales_Time DATETIME,\n    Unit_Price_of_Sales_Product FLOAT,\n    PRIMARY KEY (Product_ID, Customer_ID, Sales_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(ID),\n    FOREIGN KEY (Operator_ID) REFERENCES Staff(ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(ID)\n);", "remarks": "CS 2025/1/15 删除模式名中的表字", "assign_to": "cs", "assign_to_round2": "gcc", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a94a", "question": "The following describes the database business requirements for a social networking management system: It is used to manage the follow and fan relationships among users. The system supports interactions among users, recording each user's following and follower information, including the creation and update times for each follow relationship. Each user can follow other users and be followed by other users. The management of follow relationships ensures that a user cannot follow themselves and avoids duplicate followings. Users can query their list of followers and the list of users they are following. They can also access recommended content or suggestions for new users. Through follow relationships, the system can push dynamic updates to users, showcasing the content they follow or the activities of other users. Additionally, the system supports statistics on the number of followers and the number of followed users, providing data support for social interaction and user relationship analysis.\n", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE User_Follow (\n    Follow_Time DATETIME,\n    Followed_ID INTEGER NOT NULL,\n    Follower_ID INTEGER NOT NULL,\n    PRIMARY KEY (Follower_ID, Followed_ID),\n    FOREIGN KEY (Followed_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Follower_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Post (\n    Post_Content VARCHAR(255),\n    Post_ID INTEGER PRIMARY KEY,\n    Post_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "szh", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a95a", "question": "This database is used in the death record management module of a medical system, especially community health centers or small hospitals, to record and manage the information of the deceased confirmed by these institutions.\n\nMain functions:\n\n1. Record death information: You can record the personal information of the deceased, including name and unique identification number.\n\n2. Manage inspectors: By recording the identification number of the inspector, you can track which staff member confirmed the death.\n\n3. Update records: Automatically update the last modification time of each record, which helps to track the latest status of the information.\n\n4. Query and statistics: You can query according to the identification number of the deceased or the inspector, and count the death records over a period of time.", "answer": "CREATE TABLE Inspector (\n    Inspector_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Death_Record (\n    Death_Record_ID INTEGER PRIMARY KEY,\n    Inspector_ID INTEGER NOT NULL,\n    Last_Modified_Time DATETIME,\n    Name VARCHAR(255),\n    Unique_ID INTEGER,\n    FOREIGN KEY (Inspector_ID) REFERENCES Inspector(Inspector_ID)\n);\n\nCREATE TABLE Confirmed_Death_Record (\n    Death_Record_ID INTEGER NOT NULL,\n    Inspector_ID INTEGER NOT NULL,\n    PRIMARY KEY (Inspector_ID, Death_Record_ID),\n    FOREIGN KEY (Death_Record_ID) REFERENCES Death_Record(Death_Record_ID),\n    FOREIGN KEY (Inspector_ID) REFERENCES Inspector(Inspector_ID)\n);", "remarks": "缺少死亡记录和检查人员的关系但是schema中有，已添加", "assign_to": "szh", "assign_to_round2": "gcc", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0a13602ec03b41a95e", "question": "Online gaming platform requirements are as follows:\nThe platform supports multiple users who can register and log in. User information includes User Name, Password, Gender, Balance, Avatar, and Registration Time.\nEach user can participate in multiple matches. Each match records the Match Name, Match Time, and Match Result (Win or Lose).\n", "answer": "CREATE TABLE User (\n    Avatar VARCHAR(255),\n    Balance VARCHAR(255),\n    Gender VARCHAR(255),\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Match (\n    Match_ID INTEGER PRIMARY KEY,\n    Match_Name VARCHAR(255),\n    Match_Time DATETIME\n);\n\nCREATE TABLE User_Match_Record (\n    Match_ID INTEGER NOT NULL,\n    Match_Result VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Match_ID),\n    FOREIGN KEY (Match_ID) REFERENCES Match(Match_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a971", "question": "Database design for a company is as follows:\nThe company has multiple corporate and individual clients.\nCorporate client information includes corporate tax ID, corporate name, postal code, corporate size, and corporate type.\nIndividual client information includes person's name, date of birth, and personal tax ID.\nEach client can be a corporate client or an individual client, and client information is stored in corresponding tables.\nThe company conducts several projects, project information includes project value, start date, end date, project status, service type, and whether it is a digital project.\nProjects contain multiple members, member information includes name, position, domain, date of hire, and date of departure, and members can participate in multiple projects simultaneously.", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Type VARCHAR(255)\n);\n\nCREATE TABLE Project (\n    End_Date DATETIME,\n    Is_Digital_Project BOOL,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Status VARCHAR(255),\n    Project_Value VARCHAR(255),\n    Service_Type VARCHAR(255),\n    Start_Date DATETIME\n);\n\nCREATE TABLE Member (\n    Date_of_Departure DATETIME,\n    Date_of_Hire DATETIME,\n    Domain VARCHAR(255),\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Corporate_Customer (\n    Corporate_Name VARCHAR(255),\n    Corporate_Size VARCHAR(255),\n    Corporate_Tax_ID INTEGER PRIMARY KEY,\n    Corporate_Type VARCHAR(255),\n    Customer_ID INTEGER NOT NULL,\n    Postal_Code VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Individual_Customer (\n    Customer_ID INTEGER NOT NULL,\n    Date_of_Birth DATETIME,\n    Name VARCHAR(255),\n    Personal_Tax_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Project_Member_Relationship (\n    Member_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    PRIMARY KEY (Project_ID, Member_ID),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a980", "question": "The required functions of the student course selection system are described as follows: In the student information management module, the system will record the student's student number, name, gender, age, class, enrollment time, and place of residence, and the administrator can add, modify, and delete student information. In the course information management module, the system will store information such as the course ID, course name, course description, and course status of the course. The administrator can manage the course, including adding courses, modifying course information, and deleting courses. In the teacher information management module, the system will record the teacher's teacher number, name, gender, and title, and the administrator can manage the teacher. The student course selection management module allows students to view optional courses based on the course name and course description, and select courses. The system will record the student's student number and the course ID of the selected course. The system will automatically check the student's course selection to ensure that students cannot repeat the course selection or take a full course. The teacher teaching management module allows teachers to view the courses they teach, record the teacher number, course ID and class start time, and teachers can view detailed information about the courses they teach. The system will record the teaching situation of each course, including teacher teaching information and class start time.", "answer": "CREATE TABLE Student (\n    Age INTEGER,\n    Class VARCHAR(255),\n    Enrollment_time DATETIME,\n    Gender BOOL,\n    Name VARCHAR(255),\n    Place_of_residence VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Course (\n    Course_ID INTEGER PRIMARY KEY,\n    Course_introduction VARCHAR(255),\n    Course_name VARCHAR(255),\n    Course_status VARCHAR(255)\n);\n\nCREATE TABLE Teacher (\n    Gender BOOL,\n    Name VARCHAR(255),\n    Teacher_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Course_selection (\n    Course_ID INTEGER NOT NULL,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Teaching (\n    Course_ID INTEGER NOT NULL,\n    Start_time DATETIME,\n    Teacher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Teacher_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);", "remarks": "学生选课和教师查看自己教授的课程是关系，应该从实体中删除", "assign_to": "tk", "assign_to_round2": "gcc", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a981", "question": "The library management system is as follows:\nThe library has multiple books, each book has a Book ID, Title, Author, Publisher, Publication Date, Price, Book Type, and Content Description.     \nBook Type information is stored in the Book Category table, which includes Book Type ID, Type Name, and Description.\nThe library has multiple readers, each reader has a Reader ID, Reader Type, Contact Number, Credit Score, and Description.\nReader Type information is stored in the Reader Category table, which includes Reader Type ID, Type Name, and Description.\nThe borrowing process is recorded in the Borrowing table, each borrowing record has a Book ID, Reader ID, Borrow Date, Return Date, Renewal Count, and Fine.\nThe system manages book borrowing and returning, as well as reader borrowing permissions and credit scores through this information.\n", "answer": "CREATE TABLE Book_Category (\n    Book_Type_ID INTEGER PRIMARY KEY,\n    Description VARCHAR(255),\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Reader_Category (\n    Description VARCHAR(255),\n    Reader_Type_ID INTEGER PRIMARY KEY,\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Book_Type_ID INTEGER NOT NULL,\n    Content_Description VARCHAR(255),\n    Price FLOAT,\n    Publication_Date DATETIME,\n    Publisher VARCHAR(255),\n    Title VARCHAR(255),\n    FOREIGN KEY (Book_Type_ID) REFERENCES Book_Category(Book_Type_ID)\n);\n\nCREATE TABLE Reader (\n    Contact_Number INTEGER,\n    Credit_Score FLOAT,\n    Description VARCHAR(255),\n    Reader_ID INTEGER PRIMARY KEY,\n    Reader_Type_ID INTEGER NOT NULL,\n    FOREIGN KEY (Reader_Type_ID) REFERENCES Reader_Category(Reader_Type_ID)\n);\n\nCREATE TABLE Borrowing_Information (\n    Book_ID INTEGER NOT NULL,\n    Borrow_Date DATETIME,\n    Fine FLOAT,\n    Reader_ID INTEGER NOT NULL,\n    Renewal_Count VARCHAR(255),\n    Return_Date DATETIME,\n    PRIMARY KEY (Book_ID, Reader_ID, Borrow_Date),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Reader_ID) REFERENCES Reader(Reader_ID)\n);", "remarks": "WQ:无修改", "assign_to": "dyq", "assign_to_round2": "wq", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a983", "question": "The system is a housing rental platform that includes major functions such as user management, property management, order management, and demand management. Users can register, log in, and manage their personal information on the platform. Landlords can publish property information, set property prices, types, facilities, etc., and manage and update property information. Users can post rental demands based on their needs, create orders on the platform, make payments, and manage order status. The system supports matching properties and demands, displaying property information that meets the conditions according to user needs, and providing rental services. The database design includes four main tables: Users (user table), which records basic user information; Houses (property table), which records detailed property information; Orders (order table), which records user rental orders and status; and Demands (demand table), which records user rental demands. The tables are associated through Foreign key to ensure data consistency and integrity.\n", "answer": "CREATE TABLE Users (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Role VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Houses (\n    Landlord_ID INTEGER NOT NULL,\n    Property_Description VARCHAR(255),\n    Property_Facilities VARCHAR(255),\n    Property_ID INTEGER PRIMARY KEY,\n    Property_Location VARCHAR(255),\n    Property_Price FLOAT,\n    Property_Title VARCHAR(255),\n    Property_Type VARCHAR(255),\n    Publisher VARCHAR(255),\n    FOREIGN KEY (Landlord_ID) REFERENCES Users(User_ID)\n);\n\nCREATE TABLE Demands (\n    Demand_Budget FLOAT,\n    Demand_Description VARCHAR(255),\n    Demand_ID INTEGER PRIMARY KEY,\n    Demand_Location VARCHAR(255),\n    Demand_Title VARCHAR(255),\n    Demand_Type VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES Users(User_ID)\n);\n\nCREATE TABLE Orders (\n    Lease_End_Date DATETIME,\n    Lease_Start_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Price FLOAT,\n    Order_Status VARCHAR(255),\n    Payment_Status VARCHAR(255),\n    Property_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Property_ID) REFERENCES Houses(Property_ID),\n    FOREIGN KEY (User_ID) REFERENCES Users(User_ID)\n);", "remarks": "缺少房源与房东关系", "assign_to": "szc", "assign_to_round2": "gcc", "domain": ["租赁和商务服务业", "租赁业"]}
{"id": "67552f0a13602ec03b41a987", "question": "In an e-commerce system,\nusers can browse products and add them to the shopping cart, select the product quantity and apply discounts. When generating an order, the shipping address and payment method need to be specified.\nThe system includes product information management. Each product has a unique Product ID, Product Name, Original Price, and Discounted Price.       \nOrder information includes Order Number, User ID, Shipping Address, Amount Paid, Order Time, Payment Time, and Order Status.\nThe shopping cart records User ID, Product ID, Product Quantity, Discount Amount, and Total Amount.\nPlease design the database for this e-commerce system based on the above description.", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Discounted_Price FLOAT,\n    Original_Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Amount_Paid FLOAT,\n    Order_Number INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Payment_Time DATETIME,\n    Shipping_Address VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Shopping_Cart (\n    Discount_Amount FLOAT,\n    Product_ID INTEGER NOT NULL,\n    Product_Quantity INTEGER,\n    Total_Amount FLOAT,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "WQ:无修改", "assign_to": "dyq", "assign_to_round2": "wq", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a98e", "question": "Hospital Information System\n\nMain functions of the system:\n1. Department management: manage hospital department information, including department name, floor, etc.\n2. Doctor management: manage doctor information, including doctor number, name, gender, title, etc.\n3. Patient management: manage patient information, including patient name, age, gender, etc.\n4. Diagnosis management: record the doctor's diagnosis information on the patient\n5. Prescription management: record the prescription information issued by the doctor for the patient\n6. Drug management: manage drug information, including drug name, price, manufacturer, etc.\n7. Drug list management: record the drugs and their quantities included in the prescription", "answer": "CREATE TABLE Department (\n    Department_Name VARCHAR(255) PRIMARY KEY,\n    Floor VARCHAR(255)\n);\n\nCREATE TABLE Doctor (\n    Doctor_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Patient (\n    Age INTEGER,\n    Gender VARCHAR(255),\n    Patient_Name VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Medicine (\n    Manufacturer VARCHAR(255),\n    Medicine_Name VARCHAR(255) PRIMARY KEY,\n    Price FLOAT\n);\n\nCREATE TABLE Prescription (\n    Prescription_Information VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Diagnosis_Management (\n    Diagnosis_Information VARCHAR(255),\n    Doctor_ID INTEGER NOT NULL,\n    Patient_Name VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Doctor_ID, Patient_Name),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (Patient_Name) REFERENCES Patient(Patient_Name)\n);\n\nCREATE TABLE Prescription_Management (\n    Doctor_ID INTEGER NOT NULL,\n    Patient_Name VARCHAR(255) NOT NULL,\n    Prescription_Information VARCHAR(255),\n    PRIMARY KEY (Doctor_ID, Patient_Name),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (Patient_Name) REFERENCES Patient(Patient_Name)\n);\n\nCREATE TABLE Medicine_List_Management (\n    Medicine_Name VARCHAR(255) NOT NULL,\n    Prescription_Information VARCHAR(255) NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Prescription_Information, Medicine_Name),\n    FOREIGN KEY (Medicine_Name) REFERENCES Medicine(Medicine_Name),\n    FOREIGN KEY (Prescription_Information) REFERENCES Prescription(Prescription_Information)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "gcc", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0a13602ec03b41a999", "question": "This is a Product Management System, mainly used for managing products, staff, suppliers, and customer information. For product information management, the system records basic product information, including product ID, product name, price, and inventory quantity. For staff management, the system maintains employee basic information, including employee ID and name, while also recording employee position, employment status, and department information. For supplier management, the system manages supplier basic information, including supplier ID and name, and records supplier addresses and types of products supplied. For customer management, the system maintains customer basic information, including customer ID and name.\n", "answer": "CREATE TABLE Product (\n    Inventory_quantity INTEGER,\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Product_name VARCHAR(255),\n    Supplier VARCHAR(255)\n);\n\nCREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Name VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Staff (\n    Department VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Employment_status VARCHAR(255),\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Supplier_product (\n    Product_ID INTEGER NOT NULL,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supplier_ID, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);", "remarks": "这个需求里没有客户购买商品这种关系，很多类似的场景都有，所以我认为这个标注价值较低； 删除模式名中的表字", "assign_to": "hzb", "assign_to_round2": "gcc", "domain": ["制造业", "计算机、通信和其他电子设备制造业"]}
{"id": "67552f0a13602ec03b41a99d", "question": "Student Management System Requirements Description:\nThis is a student management system. The main features of the system include:\n1. Student Information Management: Includes information such as name, gender, school, department, and major.\n2. Identification Information Management: Includes information such as identification number, name, gender, age, and address. Each student has unique identification information.", "answer": "CREATE TABLE Identification (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Gender INTEGER,\n    Identification_Number VARCHAR(255) PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Student (\n    Department VARCHAR(255),\n    Gender VARCHAR(255),\n    Identification_Number VARCHAR(255) NOT NULL,\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    School VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Identification_Number) REFERENCES Identification(Identification_Number)\n);", "remarks": "WQ:无修改", "assign_to": "gcc", "assign_to_round2": "wq", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9a7", "question": "The database design for a certain sports management system is as follows: The system includes tables for coaches, teams, players, coach-team relationships, and player-team relationships. The coach table records basic information about the coaches, including Coach ID, Name, and Age. The team table records basic information about the teams, including Team Name, Representative Region, and Establishment Date. The player table records basic information about the players, including Player ID, Name, Weight, Height, and Joining Date. The coach-team relationship table records the correspondence between coaches and teams, including Coach ID and Team Name. The player-team relationship table records the correspondence between players and teams, including Player ID and Team Name. The system manages the information about coaches, teams, and players as well as their relationships through these tables to facilitate the management and querying functions of the teams.", "answer": "CREATE TABLE Coach (\n    Age INTEGER,\n    Coach_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Player (\n    Height FLOAT,\n    Name VARCHAR(255),\n    Player_ID INTEGER PRIMARY KEY,\n    Weight FLOAT\n);\n\nCREATE TABLE Team (\n    Establishment_Date DATETIME,\n    Representative_Region VARCHAR(255),\n    Team_ID INTEGER PRIMARY KEY,\n    Team_Name VARCHAR(255)\n);\n\nCREATE TABLE Coach_Team (\n    Coach_ID INTEGER NOT NULL,\n    Coaching_Start_Date DATETIME,\n    Team_ID INTEGER NOT NULL,\n    PRIMARY KEY (Coach_ID, Team_ID, Coaching_Start_Date),\n    FOREIGN KEY (Coach_ID) REFERENCES Coach(Coach_ID),\n    FOREIGN KEY (Team_ID) REFERENCES Team(Team_ID)\n);\n\nCREATE TABLE Player_Team (\n    Joining_Date DATETIME,\n    Player_ID INTEGER NOT NULL,\n    Team_ID INTEGER NOT NULL,\n    PRIMARY KEY (Player_ID, Team_ID, Joining_Date),\n    FOREIGN KEY (Player_ID) REFERENCES Player(Player_ID),\n    FOREIGN KEY (Team_ID) REFERENCES Team(Team_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "gcc", "domain": ["文化、体育和娱乐业", "体育"]}
{"id": "67552f0a13602ec03b41a9ac", "question": "This is a School Management System. For student management, the system maintains students' basic information including student ID, name, gender, age, records students' major and class information, manages students' exam scores in various courses, and supports students in selecting different courses for study. For course management, the system maintains course information including course ID, course name, credits, arranges teaching staff for courses, and sets classroom and class time. For teacher management, the system maintains teachers' basic information including teacher ID, name, gender, age, records teachers' professional title and specialized field, and manages teachers' employment status in the school. For class management, the system maintains class ID and name, records class's specialized direction, and manages student members in the class. For school management, the system maintains school's basic information including school ID and name, records school's address and contact number, and manages the school's teaching staff.", "answer": "CREATE TABLE Course (\n    Class_time DATETIME,\n    Classroom VARCHAR(255),\n    Course_ID INTEGER PRIMARY KEY,\n    Course_name VARCHAR(255),\n    Credits FLOAT\n);\n\nCREATE TABLE Class (\n    Class_ID INTEGER PRIMARY KEY,\n    Class_name VARCHAR(255),\n    Specialized_direction VARCHAR(255)\n);\n\nCREATE TABLE School (\n    Address VARCHAR(255),\n    Contact_number VARCHAR(255),\n    Name VARCHAR(255),\n    School_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Student (\n    Age INTEGER,\n    Class INTEGER NOT NULL,\n    Gender VARCHAR(255),\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Class) REFERENCES Class(Class_ID)\n);\n\nCREATE TABLE Teacher (\n    Age INTEGER,\n    Gender VARCHAR(255),\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    Professional_title VARCHAR(255),\n    School_ID INTEGER NOT NULL,\n    Teacher_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (School_ID) REFERENCES School(School_ID)\n);\n\nCREATE TABLE Student_course (\n    Course_ID INTEGER NOT NULL,\n    Score INTEGER,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Teacher_course (\n    Course_ID INTEGER NOT NULL,\n    Teacher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Teacher_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);", "remarks": "WQ:在学生表中添加班级外键。", "assign_to": "hzb", "assign_to_round2": "wq", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9ae", "question": "The storage management system shall coordinate business processes across departments such as procurement, warehousing, and sales. The procurement department, through procurement personnel, shall be responsible for purchasing solid state drives and storing them in the appropriate warehouse. The warehouse management department shall be responsible for the daily operations of the warehouse, including leasing, managing warehouse personnel, and ensuring the correct storage of solid state drives. The sales department, through sales personnel, shall be responsible for selling solid state drives to customers and arranging shipments. The system shall also store customer information, including name and contact details, to facilitate shipping when sales orders are placed.", "answer": "CREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255)\n);\n\nCREATE TABLE Solid_State_Disk (\n    Brand VARCHAR(255),\n    Hard_Disk_ID INTEGER PRIMARY KEY,\n    Price FLOAT,\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Contact_Information VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Belonging_Department INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Telephone VARCHAR(255),\n    FOREIGN KEY (Belonging_Department) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Sales_Order (\n    Order_Amount FLOAT,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Time DATETIME,\n    Placing_Customer INTEGER NOT NULL,\n    FOREIGN KEY (Placing_Customer) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Purchase_Record (\n    Purchase_Order_ID INTEGER PRIMARY KEY,\n    Purchase_Staff INTEGER NOT NULL,\n    Purchase_Time DATETIME,\n    Spending_Amount FLOAT,\n    FOREIGN KEY (Purchase_Staff) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Warehouse (\n    Administrator INTEGER NOT NULL,\n    Location VARCHAR(255),\n    Warehouse_ID INTEGER PRIMARY KEY,\n    Warehouse_Name VARCHAR(255),\n    FOREIGN KEY (Administrator) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Sales_Order_Details (\n    Hard_Disk_ID INTEGER NOT NULL,\n    Purchase_Quantity INTEGER,\n    Sales_Order_ID INTEGER NOT NULL,\n    PRIMARY KEY (Sales_Order_ID, Hard_Disk_ID),\n    FOREIGN KEY (Hard_Disk_ID) REFERENCES Solid_State_Disk(Hard_Disk_ID),\n    FOREIGN KEY (Sales_Order_ID) REFERENCES Sales_Order(Order_ID)\n);\n\nCREATE TABLE Purchase_Order_Details (\n    Hard_Disk_ID INTEGER NOT NULL,\n    Purchase_Order_ID INTEGER NOT NULL,\n    Purchase_Quantity INTEGER,\n    PRIMARY KEY (Purchase_Order_ID, Hard_Disk_ID),\n    FOREIGN KEY (Hard_Disk_ID) REFERENCES Solid_State_Disk(Hard_Disk_ID),\n    FOREIGN KEY (Purchase_Order_ID) REFERENCES Purchase_Record(Purchase_Order_ID)\n);\n\nCREATE TABLE Hard_Disk_Storage (\n    Hard_Disk_ID INTEGER NOT NULL,\n    Reserve INTEGER,\n    Warehouse_ID INTEGER NOT NULL,\n    PRIMARY KEY (Hard_Disk_ID, Warehouse_ID),\n    FOREIGN KEY (Hard_Disk_ID) REFERENCES Solid_State_Disk(Hard_Disk_ID),\n    FOREIGN KEY (Warehouse_ID) REFERENCES Warehouse(Warehouse_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "szh", "domain": ["批发和零售业", "批发业"]}
{"id": "67552f0a13602ec03b41a9b4", "question": "A dormitory management system is used to manage dormitories, users, and related information summaries. The functional requirements are as follows:\nDormitory information management stores relevant information about dormitories, including the unique dormitory ID, dormitory number, number of dormitory members, affiliated college, and dormitory type.\nUser information management stores personal information of users, including the unique user ID, name, gender, age, contact information, and personal profile.\nDormitory member management uses Foreign key to link the dormitory information table and the user information table, thereby recording the user information contained in each dormitory.\nInformation summary management uses Foreign key to link the dormitory information table and the user information table, and stores the summarized data of dormitory and user information.", "answer": "CREATE TABLE Dormitory (\n    Affiliated_College VARCHAR(255),\n    Dormitory_ID INTEGER PRIMARY KEY,\n    Dormitory_Number INTEGER,\n    Dormitory_Type VARCHAR(255),\n    Number_of_Dormitory_Members INTEGER\n);\n\nCREATE TABLE Information_Summary (\n    Dormitory_ID INTEGER,\n    Summary_Information VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE User (\n    Age INTEGER,\n    Contact_Information INTEGER,\n    Dormitory_ID INTEGER NOT NULL,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Personal_Profile VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Dormitory_ID) REFERENCES Dormitory(Dormitory_ID)\n);", "remarks": "1对n关系并且没有关系相关的属性，应该以外键形式存在，不需要另起模式", "assign_to": "cyx", "assign_to_round2": "gcc", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9b7", "question": "The key features of the system are as follows:\n1.Class Management: Manage class information, including class name, department name, grade, etc.\n2.Member Management: Manage the information of class members, including member ID, name, password, email, age, workplace, contact number, etc.\n3.Announcement Management: Publish and manage class announcements, including announcement ID, announcement time, and announcement content.\n4.Message Management: Manage class messages, allowing members to send messages. The system records sender ID, receiver ID, message content, send time, and read status.\n5.Log Management: Record class logs, including log ID, log content, time, mood, etc. Each member can post their own logs.\n6.Leave Management: Manage class messages, including message ID, message time, message content, and message count. Each member can leave messages.\n7.Application Management: Handle applications submitted by class members, including application ID, application time, approval status, and application content.\n", "answer": "CREATE TABLE Class (\n    Class_ID INTEGER PRIMARY KEY,\n    Class_Name VARCHAR(255),\n    Department_Name VARCHAR(255),\n    Grade VARCHAR(255)\n);\n\nCREATE TABLE Member (\n    Age INTEGER,\n    Class_ID INTEGER NOT NULL,\n    Contact_Number VARCHAR(255),\n    Email VARCHAR(255),\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Workplace VARCHAR(255),\n    FOREIGN KEY (Class_ID) REFERENCES Class(Class_ID)\n);\n\nCREATE TABLE Announcement (\n    Announcement_Content VARCHAR(255),\n    Announcement_ID INTEGER PRIMARY KEY,\n    Announcement_Time DATETIME,\n    Class_ID INTEGER NOT NULL,\n    FOREIGN KEY (Class_ID) REFERENCES Class(Class_ID)\n);\n\nCREATE TABLE Message (\n    Message_Content VARCHAR(255),\n    Read_Flag BOOL,\n    Receiver_ID INTEGER NOT NULL,\n    Send_Time DATETIME,\n    Sender_ID INTEGER NOT NULL,\n    PRIMARY KEY (Sender_ID, Receiver_ID, Send_Time),\n    FOREIGN KEY (Receiver_ID) REFERENCES Member(Member_ID),\n    FOREIGN KEY (Sender_ID) REFERENCES Member(Member_ID)\n);\n\nCREATE TABLE Log (\n    Log_Content VARCHAR(255),\n    Log_ID INTEGER PRIMARY KEY,\n    Member_ID INTEGER NOT NULL,\n    Mood VARCHAR(255),\n    Time DATETIME,\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);\n\nCREATE TABLE Application (\n    Application_Content VARCHAR(255),\n    Application_ID INTEGER PRIMARY KEY,\n    Application_Time DATETIME,\n    Approval_Flag BOOL,\n    Member_ID INTEGER NOT NULL,\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);", "remarks": "王琴：删除成员留言schema，是一对多关系，不需要增加schema；删除成员发送消息schema，同样是是一对多关系，不需要增加schema；删除成员留言schema，同上。", "assign_to": "gcc", "assign_to_round2": "wq", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9bf", "question": "The following is the database requirement description for a university's academic management system, involving the management of students, majors, teachers, courses, and colleges. The system records basic student information, including Student ID, Name, Gender, Major, and College. The Major entity includes Major ID, Major Name, and College ID. Teacher records include Teacher ID, Teacher Name, Gender, Position, College, Hire Date, and Contact Information. Courses contain Course ID, Course Name, Credit, Class Hours, Major, and Teacher. The College entity includes College ID and College Name. Each student belongs to a specific major and college, and each major is associated with a specific college. Each teacher can teach multiple courses, and each course is related to a specific major. The college records information about all relevant majors. Through these entities and their Attributes, the system can effectively manage information about students, teachers, courses, and colleges.\n", "answer": "CREATE TABLE College (\n    College_ID INTEGER PRIMARY KEY,\n    College_Name VARCHAR(255)\n);\n\nCREATE TABLE Major (\n    College_ID INTEGER NOT NULL,\n    Major_ID INTEGER PRIMARY KEY,\n    Major_Name VARCHAR(255),\n    FOREIGN KEY (College_ID) REFERENCES College(College_ID)\n);\n\nCREATE TABLE Teacher (\n    College_ID INTEGER NOT NULL,\n    Contact_Information VARCHAR(255),\n    Gender VARCHAR(255),\n    Hire_Date DATETIME,\n    Position VARCHAR(255),\n    Teacher_ID INTEGER PRIMARY KEY,\n    Teacher_Name VARCHAR(255),\n    FOREIGN KEY (College_ID) REFERENCES College(College_ID)\n);\n\nCREATE TABLE Student (\n    Gender VARCHAR(255),\n    Major_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Major_ID) REFERENCES Major(Major_ID)\n);\n\nCREATE TABLE Course (\n    Class_Hours FLOAT,\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Name VARCHAR(255),\n    Credit FLOAT,\n    Major_ID INTEGER NOT NULL,\n    Teacher_ID INTEGER NOT NULL,\n    FOREIGN KEY (Major_ID) REFERENCES Major(Major_ID),\n    FOREIGN KEY (Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Student_Course_Selection (\n    Course_ID INTEGER NOT NULL,\n    Course_Selection_Time DATETIME,\n    Grade INTEGER,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "WQ:消除学生表中的传递函数依赖。", "assign_to": "szc", "assign_to_round2": "wq", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9c9", "question": "The following is a description of the business requirements for a supply chain management system database:\n\nThe system is a supply chain management system designed to integrate and manage key data related to suppliers, warehouses, employees, projects, parts, supplies, inventory, and other aspects to facilitate efficient supply chain operations. The system includes multiple modules such as supplier management, warehouse management, employee management, project management, part management, supply management, inventory management, and employee work management.\n\nThe supplier module records basic information about suppliers, including supplier ID, address, and phone number. The supplier ID serves as the Primary key to ensure the uniqueness of each supplier's information. The relationship between suppliers and projects is established through the \"Supplier Supplies Project\" relationship, which records specific supply details provided by suppliers for projects, such as supply quantity, start time, and end time.\n\nThe warehouse module records basic information about warehouses, such as warehouse ID, area, person in charge, and phone number. The warehouse ID serves as the Primary key to ensure the uniqueness of warehouse information. The relationship between warehouses and parts is established through the \"Warehouse Inventory Parts\" relationship, which records the inventory quantity of parts in each warehouse and links to the part information table through Foreign key. Warehouses are also associated with employees through the \"Employee Work Management\" module, which records the working relationship between employees and warehouses.\n\nThe employee module manages employee information, including employee ID, name, age, job title, and work location. The employee ID serves as the Primary key to uniquely identify each employee. The association between employees and warehouses is achieved through the work location field, indicating the specific warehouse where an employee works.\n\nThe project module records basic information about projects, including project ID, budget, and start date. The project ID serves as the Primary key to ensure the uniqueness of projects. The relationship between projects and parts is established through the \"Project Requires Parts\" relationship, which records the required parts and quantities for each project. Projects are also associated with suppliers through the \"Supplier Supplies Project\" relationship, managing the materials provided by suppliers for projects.\n\nThe part module records information about parts, such as part ID, name, specification, description, and unit price. The part ID serves as the Primary key to ensure the uniqueness of part information. The relationship between parts and warehouses is established through the \"Warehouse Inventory Parts\" relationship, which records the inventory quantity of parts in warehouses and is associated with the warehouse table through Foreign key.\n", "answer": "CREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Project (\n    Budget FLOAT,\n    Project_ID INTEGER PRIMARY KEY,\n    start_Date DATETIME\n);\n\nCREATE TABLE Part (\n    Description VARCHAR(255),\n    Name VARCHAR(255),\n    Part_ID INTEGER PRIMARY KEY,\n    Specification VARCHAR(255),\n    Unit_Price FLOAT\n);\n\nCREATE TABLE Supplier_Supply_Project (\n    End_Time DATETIME,\n    Project_ID INTEGER NOT NULL,\n    Start_Time DATETIME,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supplier_ID, Project_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Supplier_Supply_Part (\n    Part_ID INTEGER NOT NULL,\n    Supplier_ID INTEGER NOT NULL,\n    Supply_Quantity INTEGER,\n    PRIMARY KEY (Supplier_ID, Part_ID),\n    FOREIGN KEY (Part_ID) REFERENCES Part(Part_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Project_Requires_Parts (\n    Part_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Project_ID, Part_ID),\n    FOREIGN KEY (Part_ID) REFERENCES Part(Part_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);\n\nCREATE TABLE Warehouse (\n    Area FLOAT,\n    Person_in_Charge INTEGER NOT NULL,\n    Phone_Number VARCHAR(255),\n    Warehouse_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Person_in_Charge) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Employee (\n    Age INTEGER,\n    Employee_ID INTEGER PRIMARY KEY,\n    Job_Title VARCHAR(255),\n    Name VARCHAR(255),\n    Work_Location INTEGER NOT NULL,\n    FOREIGN KEY (Work_Location) REFERENCES Warehouse(Warehouse_ID)\n);\n\nCREATE TABLE Warehouse_Inventory_Parts (\n    Inventory_Quantity INTEGER,\n    Part_ID INTEGER NOT NULL,\n    Warehouse_ID INTEGER NOT NULL,\n    PRIMARY KEY (Warehouse_ID, Part_ID),\n    FOREIGN KEY (Part_ID) REFERENCES Part(Part_ID),\n    FOREIGN KEY (Warehouse_ID) REFERENCES Warehouse(Warehouse_ID)\n);", "remarks": "WQ: 修改了需求描述", "assign_to": "szc", "assign_to_round2": "wq", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a9d0", "question": "The system depicts a bank savings system\n\nMain functions of the system\n1 Customer management: including basic information of customers, such as name, address, phone number, ID number, etc.\n2 Savings bank management: including basic information of savings banks, such as name, address, phone number, etc.\n3 Deposit and withdrawal management: record customer deposit and withdrawal information, including deposit and withdrawal amount, expiration date, password, interest rate, type, etc.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Identity_Card_Number INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Savings_Institution (\n    Address VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Savings_Institution_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Transaction_Record (\n    Identity_Card_Number INTEGER NOT NULL,\n    Interest_Rate FLOAT,\n    Maturity_Date DATETIME,\n    Password VARCHAR(255),\n    Savings_Institution_ID INTEGER NOT NULL,\n    Transaction_Amount INTEGER,\n    Transaction_Time DATETIME,\n    Type VARCHAR(255),\n    PRIMARY KEY (Identity_Card_Number, Savings_Institution_ID, Transaction_Time),\n    FOREIGN KEY (Identity_Card_Number) REFERENCES Customer(Identity_Card_Number),\n    FOREIGN KEY (Savings_Institution_ID) REFERENCES Savings_Institution(Savings_Institution_ID)\n);", "remarks": "dyq，需求描述修改，增加储蓄所ID，存取款时间，修改存取款记录的主键，调整相关实体、关系与schema", "assign_to": "szh", "assign_to_round2": "dyq", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a9d1", "question": "This is a Social Media System. For user management, the system maintains users' basic information (user ID, username, password, etc.), records users' personal information (name, gender, age, etc.), and manages users' personalized information (occupation, interests, personal profile). For post management, the system supports users to publish posts, each post contains a title, description and images, and has a unique ID. For comment management, the system supports users to comment on posts, records the comment time and content, and supports viewing all comments on a post.\n", "answer": "CREATE TABLE User (\n    Age INTEGER,\n    Gender VARCHAR(255),\n    Interests VARCHAR(255),\n    Name VARCHAR(255),\n    Occupation VARCHAR(255),\n    Password VARCHAR(255),\n    Personal_profile VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Post (\n    Description VARCHAR(255),\n    Post_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Image (\n    Image_ID INTEGER PRIMARY KEY,\n    Image_URL VARCHAR(255),\n    Post_ID INTEGER NOT NULL,\n    FOREIGN KEY (Post_ID) REFERENCES Post(Post_ID)\n);\n\nCREATE TABLE User_post_comment (\n    Comment_content VARCHAR(255),\n    Comment_time DATETIME,\n    Post_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Post_ID, Comment_time),\n    FOREIGN KEY (Post_ID) REFERENCES Post(Post_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szh", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a9e2", "question": "The database design for an online education platform is as follows: The system includes tables for courses, teachers, students, and learning relationships. The course table records basic information about courses, including course ID, name, description, category, and the teacher ID of the instructor. The teacher table records basic information about teachers, including teacher ID, name, description, and income. The student table records basic information about students, including student ID, name, age, and balance. The learning relationship table records the correspondence between students and courses, including student ID and course ID. The system manages courses, teachers, students, and their relationships through these tables to facilitate online learning and course management functions.", "answer": "CREATE TABLE Teacher (\n    Description VARCHAR(255),\n    Income FLOAT,\n    Name VARCHAR(255),\n    Teacher_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Student (\n    Age INTEGER,\n    Balance BOOL,\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Course (\n    Category VARCHAR(255),\n    Course_ID INTEGER PRIMARY KEY,\n    Description VARCHAR(255),\n    Instructor_Teacher_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    FOREIGN KEY (Instructor_Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Student_Course_Selection (\n    Course_ID INTEGER NOT NULL,\n    Course_Selection_Time DATETIME,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID, Course_Selection_Time),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "gcc", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41aa06", "question": "The main functions of the e-commerce platform system include user management, product management, shopping cart function, order management, etc., which supports users to browse products, add to shopping cart, place orders to purchase products, pay orders, etc. The system includes the following functions:\n1. User management: used to record the registered users of the platform, including user ID, user name, password, phone number, email, registration time, last login time, and delivery address. It is mainly used to store the basic information of users, and record the registration and login status of users, and store the delivery address of users.\n2. Product management: record the information of products sold on the platform, including the product name, product description, product sales price, inventory quantity, and sales quantity of the products.\n3. Product addition to shopping cart: record the information of users adding products to the shopping cart. Including the time of adding to the shopping cart and the number of products, it is used to track which products each user adds to the shopping cart.\n4. Purchase of products: record the order information of users purchasing products, including the number of products purchased, the total price and the payment method. It is used to record the product information of users who have successfully placed orders.", "answer": "CREATE TABLE User (\n    Delivery_address VARCHAR(255),\n    Email VARCHAR(255),\n    Last_login_time DATETIME,\n    Password VARCHAR(255),\n    Phone INTEGER,\n    Registration_time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    User_name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Inventory_quantity INTEGER,\n    Name VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Product_description VARCHAR(255),\n    Product_sales_price FLOAT,\n    Sales_quantity INTEGER\n);\n\nCREATE TABLE Product_added_to_cart (\n    Add_to_cart_time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Product_quantity INTEGER,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Product_ID, Add_to_cart_time),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Purchase_product (\n    Payment_method VARCHAR(255),\n    Product_ID INTEGER NOT NULL,\n    Purchase_quantity INTEGER,\n    Purchase_time DATETIME,\n    Total_order_price FLOAT,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Product_ID, Purchase_time),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 2025/1/16 WQ:修改需求描述格式", "assign_to": "cs", "assign_to_round2": "wq", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0b13602ec03b41aa22", "question": "System Requirements Function Description\n\nFront-end Function\n1: User Login: Freshmen log in through the WeChat applet. Each user needs to record the student number, student name, student gender, student class, student branch, and student dormitory.\n2: View school information: Freshmen can view the school's introduction, facilities and other information. The school needs to record the school number, school name, school introduction, and school facilities.\n3: View branch information: Freshmen can view the detailed information of their branch. The branch needs to record the branch number, branch name, and branch introduction.\n4: View class information: Freshmen can view their own class information. The class needs to record the class number, class name, and class introduction.\n5: View teacher information: Freshmen can view the detailed information of the class teacher. The teacher needs to record the teacher number, teacher name, teacher title, and teacher profile.\n6: View course information: Freshmen can view the course information of their own class. The course needs to record the course number, course name, course description, and course credits.\n7: View dormitory arrangement information: Freshmen can view their own dormitory allocation. Dormitory information includes dormitory number, dormitory building, dormitory room number, and number of dormitory beds.\n8: View the course schedule: New students can view their own course schedule.\n\nBackground functions\n1: Add school information: Administrators can add or modify the basic information of the school.\n2: Add branch information: Administrators can add or modify branch information.\n3: Add class information: Administrators can add or modify class information.\n4: Add teacher information: Administrators can add or modify teacher information.\n5: Add course information: Administrators can add or modify course information.\n6: Add student information: Administrators can add or modify student information.\n7: Add dormitory information: Administrators can add or modify dormitory information.\n8: Add course schedule information: Administrators can add or modify course schedule information.", "answer": "CREATE TABLE School (\n    School_Facilities VARCHAR(255),\n    School_ID INTEGER PRIMARY KEY,\n    School_Introduction VARCHAR(255),\n    School_Name VARCHAR(255)\n);\n\nCREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Introduction VARCHAR(255),\n    Department_Name VARCHAR(255)\n);\n\nCREATE TABLE Class (\n    Class_ID INTEGER PRIMARY KEY,\n    Class_Introduction VARCHAR(255),\n    Class_Name VARCHAR(255)\n);\n\nCREATE TABLE Teacher (\n    Teacher_ID INTEGER PRIMARY KEY,\n    Teacher_Introduction VARCHAR(255),\n    Teacher_Name VARCHAR(255),\n    Teacher_Title VARCHAR(255)\n);\n\nCREATE TABLE Course (\n    Course_Credits INTEGER,\n    Course_Description VARCHAR(255),\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Name VARCHAR(255)\n);\n\nCREATE TABLE Dormitory (\n    Dormitory_Bed_Count INTEGER,\n    Dormitory_Building VARCHAR(255),\n    Dormitory_ID INTEGER PRIMARY KEY,\n    Dormitory_Room_Number INTEGER\n);\n\nCREATE TABLE Course_Schedule (\n    Class_Location VARCHAR(255),\n    Class_Time DATETIME,\n    Course_ID INTEGER NOT NULL,\n    Teacher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Teacher_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Student (\n    Student_Class INTEGER NOT NULL,\n    Student_Department INTEGER NOT NULL,\n    Student_Dormitory INTEGER NOT NULL,\n    Student_Gender BOOL,\n    Student_ID INTEGER PRIMARY KEY,\n    Student_Name VARCHAR(255),\n    FOREIGN KEY (Student_Class) REFERENCES Class(Class_ID),\n    FOREIGN KEY (Student_Department) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Student_Dormitory) REFERENCES Dormitory(Dormitory_ID)\n);", "remarks": "课程排班应该是关系，并且主键多余；需求描述中没有上述所有实体的属性，已添加", "assign_to": "szh", "assign_to_round2": "gcc", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa24", "question": "The online examination system shall include functions such as user management, question bank management, and exam management.\nThe system shall have different user roles, such as student, teacher, and administrator. Each user shall have a unique ID, real name, contact information, and other details.\nThe question bank shall contain various questions. Each question shall have a difficulty level, content, options, correct answer, explanation, and belong to a category.\nAdministrators shall be able to create exams, set the exam name, description, time range, status, and select questions from the question bank to include in the exam, specifying the order of the questions.\nStudents shall be able to take exams. After submitting answers, the system shall record the exam score and the answer status for each question, including the user's answer and whether it is correct.\nThe exam score shall include the student's score and submission time.", "answer": "CREATE TABLE Role (\n    Role_ID INTEGER PRIMARY KEY,\n    Role_Name VARCHAR(255)\n);\n\nCREATE TABLE Category (\n    Category_ID INTEGER PRIMARY KEY,\n    Category_Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    Role_ID INTEGER NOT NULL,\n    User_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);\n\nCREATE TABLE Question (\n    Category_ID INTEGER NOT NULL,\n    Content VARCHAR(255),\n    Correct_Answer VARCHAR(255),\n    Difficulty_Level INTEGER,\n    Explanation VARCHAR(255),\n    Options VARCHAR(255),\n    Question_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Category_ID) REFERENCES Category(Category_ID)\n);\n\nCREATE TABLE Exam (\n    Creator_ID INTEGER NOT NULL,\n    Description VARCHAR(255),\n    Exam_ID INTEGER PRIMARY KEY,\n    Exam_Name VARCHAR(255),\n    Status VARCHAR(255),\n    Time_Range DATETIME,\n    FOREIGN KEY (Creator_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Exam_Question (\n    Exam_ID INTEGER NOT NULL,\n    Question_ID INTEGER NOT NULL,\n    Sequence VARCHAR(255),\n    PRIMARY KEY (Exam_ID, Question_ID),\n    FOREIGN KEY (Exam_ID) REFERENCES Exam(Exam_ID),\n    FOREIGN KEY (Question_ID) REFERENCES Question(Question_ID)\n);\n\nCREATE TABLE User_Answer_Sheet (\n    Exam_ID INTEGER NOT NULL,\n    Score FLOAT,\n    Student_ID INTEGER NOT NULL,\n    Submission_Time DATETIME,\n    PRIMARY KEY (Student_ID, Exam_ID),\n    FOREIGN KEY (Exam_ID) REFERENCES Exam(Exam_ID),\n    FOREIGN KEY (Student_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa30", "question": "The Yuci Bus Dispatch System aims to optimize bus operations and management and improve passenger experience. The main functions of the system are as follows:\n1. Route management: manage bus route information, including route number, starting point, end point, passing stations, etc.\n2. Vehicle management: manage bus information, including vehicle number, vehicle type, vehicle status, etc.\n3. Allocation and dispatch: arrange drivers to drive specific vehicles at specified times and along specific routes according to passenger flow and actual needs.\n4. Employee management: manage bus system employee information, including employee number, name, ID number, position, contact information, etc. The system supports automatic addition of employee information through Baidu's ID card recognition interface.\n5. Announcement management: publish and manage announcement information of the bus system, including announcement title, content, release time, etc.\n6. Passenger user management: manage passenger information, including user number, name, contact information, registration information, etc. Support passenger registration, login, query bus routes, view announcements, register for rides, etc.\n7. Mobile terminal function: Provide an APP based on web page encapsulation, through which passengers can query bus routes, view announcements, register and log in, register for rides, etc.\n8. Statistics function: The background provides a time-sharing statistics view of bus trips and passenger flow, and uses the Echart plug-in to realize data visualization.", "answer": "CREATE TABLE Bus_Route (\n    Destination VARCHAR(255),\n    Passing_Stations VARCHAR(255),\n    Route_ID INTEGER PRIMARY KEY,\n    Starting_Point VARCHAR(255)\n);\n\nCREATE TABLE Bus (\n    Vehicle_ID INTEGER PRIMARY KEY,\n    Vehicle_Status VARCHAR(255),\n    Vehicle_Type VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Contact_Information VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    ID_Number VARCHAR(255),\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Announcement (\n    Announcement_Content VARCHAR(255),\n    Announcement_ID INTEGER PRIMARY KEY,\n    Announcement_Title VARCHAR(255),\n    Release_Time DATETIME\n);\n\nCREATE TABLE Passenger (\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    Registration_Information VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Dispatch_Route_Arrangement (\n    Dispatch_Task_ID INTEGER PRIMARY KEY,\n    Route_ID INTEGER NOT NULL,\n    FOREIGN KEY (Route_ID) REFERENCES Bus_Route(Route_ID)\n);\n\nCREATE TABLE Dispatch_Vehicle_Arrangement (\n    Dispatch_Task_ID INTEGER PRIMARY KEY,\n    Vehicle_ID INTEGER NOT NULL,\n    FOREIGN KEY (Vehicle_ID) REFERENCES Bus(Vehicle_ID)\n);\n\nCREATE TABLE Dispatch_Employee_Arrangement (\n    Dispatch_Task_ID INTEGER PRIMARY KEY,\n    Employee_ID INTEGER NOT NULL,\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "WQ:拆分三元关系", "assign_to": "szh", "assign_to_round2": "wq", "domain": ["交通运输、仓储和邮政业", "道路运输业"]}
{"id": "67552f0b13602ec03b41aa40", "question": "\"The electronic commerce system shall support user registration and login, product display, shopping cart functionalities, and order management. During registration, users shall provide information such as username, password, and email, and may browse and query products via keyword search or categorization. Each product shall store details including name, description, price, inventory, and the category it belongs to. Users can add desired products to their shopping cart, and the system shall record the quantity of products and allow users to submit their final orders. Orders shall include basic information such as user ID, order amount, order status, and the times when they were created and updated. Administrators can manage products in the backend by adding, removing, modifying, or deleting listings, and can configure homepage carousels and set promotions for popular or recommended products to enhance product promotion and management.\"", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Brief_Description VARCHAR(255),\n    Inventory INTEGER,\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Shopping_Cart (\n    Belonging_User_ID INTEGER NOT NULL,\n    Creation_Time DATETIME,\n    Shopping_Cart_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Belonging_User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Order (\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Ordering_User INTEGER NOT NULL,\n    Update_Time DATETIME,\n    FOREIGN KEY (Ordering_User) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Shopping_Cart_Details (\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Shopping_Cart_ID INTEGER NOT NULL,\n    PRIMARY KEY (Shopping_Cart_ID, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Shopping_Cart_ID) REFERENCES Shopping_Cart(Shopping_Cart_ID)\n);\n\nCREATE TABLE Order_Details (\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Unit_Price FLOAT,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "删除模式名中的表字", "assign_to": "zp", "assign_to_round2": "gcc", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0b13602ec03b41aa53", "question": "This is a Tower Base Station Monitoring Management System. For signal acquisition management, the system collects operational data through various sensors installed at the tower top, including displacement sensors, wind speed and direction sensors, acceleration sensors, and tilt sensors, used to collect tower head displacement, wind speed, acceleration, and other data. Each sensor has its basic information such as ID, type, installation location, and collection frequency. The collected data is transmitted to the backend through LoRa or 4G after microcontroller authentication processing. For data analysis management, the system establishes a theoretical displacement model for communication towers based on national regulations, compares and analyzes the measured data from each monitoring point with the theoretical model, calculates parameters such as wind speed displacement, and automatically generates alarm information when measured displacement exceeds theoretical values. All monitoring data is stored on the server and generates statistical graphs such as displacement curves and wind speed statistical curves. For environmental monitoring management, the system monitors the environmental conditions within the base station micro-network through HDC1080 temperature and humidity sensors, which feature low power consumption and high accuracy, capable of simultaneously monitoring temperature and humidity data. The system automatically issues alarm signals when environmental indicators are abnormal. For early warning and alarm management, the system displays tower working status in text or graphical form, shows the operation status of each base station on maps through B/S network combined with GIS, uses different markers to identify abnormal conditions, promptly pushes fault information to maintenance personnel, and records the processing. Maintenance personnel have employee ID, name, contact information, and responsible area.", "answer": "CREATE TABLE Base_station (\n    Geographic_location VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Operating_status VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_personnel (\n    Contact_information VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Responsible_area VARCHAR(255)\n);\n\nCREATE TABLE Sensor (\n    Base_station_ID INTEGER NOT NULL,\n    Collection_frequency FLOAT,\n    ID INTEGER PRIMARY KEY,\n    Installation_location VARCHAR(255),\n    Type VARCHAR(255),\n    FOREIGN KEY (Base_station_ID) REFERENCES Base_station(ID)\n);\n\nCREATE TABLE Alarm_information (\n    Alarm_content VARCHAR(255),\n    Alarm_time DATETIME,\n    Alarm_type VARCHAR(255),\n    Base_station_ID INTEGER NOT NULL,\n    ID INTEGER PRIMARY KEY,\n    Processing_status VARCHAR(255),\n    FOREIGN KEY (Base_station_ID) REFERENCES Base_station(ID)\n);\n\nCREATE TABLE Monitoring_data (\n    Collection_time DATETIME,\n    Data_type VARCHAR(255),\n    Data_value FLOAT,\n    ID INTEGER PRIMARY KEY,\n    Sensor_ID INTEGER NOT NULL,\n    FOREIGN KEY (Sensor_ID) REFERENCES Sensor(ID)\n);\n\nCREATE TABLE Alarm_information_processing (\n    Alarm_information_ID INTEGER NOT NULL,\n    Maintenance_personnel_ID INTEGER NOT NULL,\n    Processing_method VARCHAR(255),\n    Processing_result VARCHAR(255),\n    Processing_time DATETIME,\n    PRIMARY KEY (Maintenance_personnel_ID, Alarm_information_ID),\n    FOREIGN KEY (Alarm_information_ID) REFERENCES Alarm_information(ID),\n    FOREIGN KEY (Maintenance_personnel_ID) REFERENCES Maintenance_personnel(Employee_ID)\n);", "remarks": "WQ:修改了需求描述", "assign_to": "hzb", "assign_to_round2": "wq", "domain": ["信息传输、软件和信息技术服务业", "电信、广播电视和卫星传输服务"]}
{"id": "67552f0b13602ec03b41aa55", "question": "A sugar cane planting management system is mainly used to record and manage sugar cane planting plots, variety information, employee fertilization records, etc., to help agricultural managers effectively manage plots, planting and fertilization operations. The system covers the following core functions to ensure that the entire process from plot management to planting and fertilization is fully recorded and tracked.\nPlot management: including the region, area, soil type, person in charge ID, soil pH, organic matter content. Used to record the basic information of each sugar cane planting plot, including the unique identification of the plot, the geographical location, area, soil type, etc. Each plot is managed by a person in charge, and the person in charge ID is associated with the employee table.\nSugar cane variety management: including variety name, suitable climate, maturity cycle, suitable soil. Record different varieties of sugar cane information, including variety name, suitable climate, maturity cycle and suitable soil type. This table helps managers select suitable sugarcane varieties and make reasonable variety selection according to the conditions of different plots.\nEmployee management: including employee ID, name, gender, working hours, and telephone number. Record the information of each employee involved in sugar cane planting and management, including name, contact information, and working hours. This table is associated with the plot table and fertilization record table to identify the person in charge of the plot and the fertilization operator.\nPlanting record management: including plot ID, variety ID, planting time, planting quantity, planting method, and planter ID. Record the planting situation of each plot, including information such as the sugar cane variety planted, planting time, planting method, and planting quantity. The planter ID is associated with the employee table to identify the specific planting operator.\nFertilization record management: person in charge ID, plot ID, fertilization time, fertilization type, fertilization amount, fertilization method, and remarks. Record the fertilization operation of each plot, including the fertilization time, fertilization type, fertilization amount, and fertilization method. The person in charge ID is associated with the employee to identify the executor of the fertilization operation.", "answer": "CREATE TABLE Sugar_cane_variety (\n    Maturation_cycle VARCHAR(255),\n    Suitable_climate VARCHAR(255),\n    Suitable_soil VARCHAR(255),\n    Variety_ID INTEGER PRIMARY KEY,\n    Variety_name VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Working_hours FLOAT\n);\n\nCREATE TABLE Plot (\n    Area VARCHAR(255),\n    Location VARCHAR(255),\n    Organic_matter_content VARCHAR(255),\n    Person_in_charge_ID INTEGER NOT NULL,\n    Plot_ID INTEGER PRIMARY KEY,\n    Soil_pH FLOAT,\n    Soil_type VARCHAR(255),\n    FOREIGN KEY (Person_in_charge_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Planting_record (\n    Planter_ID INTEGER NOT NULL,\n    Planting_method VARCHAR(255),\n    Planting_quantity VARCHAR(255),\n    Planting_time DATETIME,\n    Plot_ID INTEGER NOT NULL,\n    Variety_ID INTEGER NOT NULL,\n    PRIMARY KEY (Plot_ID, Variety_ID, Planting_time),\n    FOREIGN KEY (Planter_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Plot_ID) REFERENCES Plot(Plot_ID),\n    FOREIGN KEY (Variety_ID) REFERENCES Sugar_cane_variety(Variety_ID)\n);\n\nCREATE TABLE Fertilization_record (\n    Fertilization_amount VARCHAR(255),\n    Fertilization_method VARCHAR(255),\n    Fertilization_time DATETIME,\n    Fertilization_type VARCHAR(255),\n    Person_in_charge_ID INTEGER NOT NULL,\n    Plot_ID INTEGER NOT NULL,\n    Remarks VARCHAR(255),\n    PRIMARY KEY (Person_in_charge_ID, Plot_ID, Fertilization_time),\n    FOREIGN KEY (Person_in_charge_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Plot_ID) REFERENCES Plot(Plot_ID)\n);", "remarks": "CS 2025/1/17", "assign_to": "cs", "assign_to_round2": "gcc", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0b13602ec03b41aa56", "question": "The Tobacco Storage Monitoring and Maintenance Data Management System primarily implements the following functionalities:\n1.Warehouse Information Management: Manages the information related to each warehouse, including Warehouse Name, Warehouse Location, Warehouse Type, Warehouse Image Path, Warehouse Description, Creation Time, Creation Date, and Update Date.\n2.Stack Position Information Management: Manages the information related to each stack position, including Stack Position Name, Stack Position Type, Stack Position Image Path, Stack Position Description, Creation Time, Creation Date, and Update Date. Each stack position belongs to a specific warehouse.\n3.Sensor Management: Sensors placed in the warehouse and tobacco stacks collect real-time environmental parameters such as temperature, humidity, box temperature, and oxygen concentration. Collected information includes Sensor Type, Collected Data Value, Collection Time, Data Status, and Data Description.\n4.User Management: Registers unique information for each user, including Username, User Role, User Password, User Phone, User Email, Creation Time, Creation Date, and Update Date.\n5.Dynamic Monitoring and Risk Alerts: Each user can perform actions on stack positions and records the Operation Type, Operation Time, and Operation Description. Each stack position is monitored by sensors, and alerts are issued based on the monitoring indicators, recording Alert Type, Alert Time, Alert Level, Alert Description, and Alert Status.\n\nThe design takes into account multiple aspects such as warehouse, stack position, sensor data, operation records, user information, and alert information to support comprehensive system management and data security needs.", "answer": "CREATE TABLE Warehouse (\n    Creation_Date DATETIME,\n    Creation_Time FLOAT,\n    Update_Date DATETIME,\n    Warehouse_Description VARCHAR(255),\n    Warehouse_ID INTEGER PRIMARY KEY,\n    Warehouse_Image_Path VARCHAR(255),\n    Warehouse_Location VARCHAR(255),\n    Warehouse_Name VARCHAR(255),\n    Warehouse_Type VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Creation_Date DATETIME,\n    Creation_Time FLOAT,\n    Update_Date DATETIME,\n    User_Email VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Password VARCHAR(255),\n    User_Phone VARCHAR(255),\n    User_Role VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Stack_Position (\n    Belonging_Warehouse_ID INTEGER NOT NULL,\n    Creation_Date DATETIME,\n    Creation_Time FLOAT,\n    Stack_Position_Description VARCHAR(255),\n    Stack_Position_ID INTEGER PRIMARY KEY,\n    Stack_Position_Image_Path VARCHAR(255),\n    Stack_Position_Name VARCHAR(255),\n    Stack_Position_Type VARCHAR(255),\n    Update_Date DATETIME,\n    FOREIGN KEY (Belonging_Warehouse_ID) REFERENCES Warehouse(Warehouse_ID)\n);\n\nCREATE TABLE Sensor (\n    Collected_Data_Value VARCHAR(255),\n    Collection_Time FLOAT,\n    Data_Description VARCHAR(255),\n    Data_Status VARCHAR(255),\n    Sensor_ID INTEGER PRIMARY KEY,\n    Sensor_Type VARCHAR(255),\n    Stack_Position_ID INTEGER NOT NULL,\n    FOREIGN KEY (Stack_Position_ID) REFERENCES Stack_Position(Stack_Position_ID)\n);\n\nCREATE TABLE User_Operation_Stack_Position (\n    Operation_Description VARCHAR(255),\n    Operation_Time FLOAT,\n    Operation_Type VARCHAR(255),\n    Operation_User_ID INTEGER NOT NULL,\n    Stack_Position_ID INTEGER NOT NULL,\n    PRIMARY KEY (Operation_User_ID, Stack_Position_ID),\n    FOREIGN KEY (Operation_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Stack_Position_ID) REFERENCES Stack_Position(Stack_Position_ID)\n);\n\nCREATE TABLE Stack_Position_Alert (\n    Alert_Description VARCHAR(255),\n    Alert_Level INTEGER,\n    Alert_Status VARCHAR(255),\n    Alert_Time FLOAT,\n    Alert_Type VARCHAR(255),\n    Stack_Position_ID INTEGER NOT NULL,\n    PRIMARY KEY (Stack_Position_ID, Alert_Time),\n    FOREIGN KEY (Stack_Position_ID) REFERENCES Stack_Position(Stack_Position_ID)\n);", "remarks": "WQ:修改了schema_5,保持主外键一致。", "assign_to": "gcc", "assign_to_round2": "wq", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0b13602ec03b41aa5f", "question": "The meteorological information management system is designed to record and manage meteorological station information, historical evolution information, operator information, and audit records. Meteorological station information includes Station ID, Station Type (such as national station, regional station, marine station, sounding station, etc.), Station Name, Latitude, Longitude, Elevation, Geographic Environment Description, Observation Elements List, Observation Instrument Name and Model, Observation Time, Observation Record Medium, Observation Standards, and other relevant information. Historical evolution information includes Change ID, Station ID, Change Type (such as station name, station number, station location, observation elements, observation instruments, observation time, observation record medium, observation standards, etc.), Old Value, New Value, Start Time, End Time, Reason for Change, Operator ID, Operation Time, and Operation Status (such as pending selection, selected, historical data, etc.). Operator information includes Operator ID, Operator Name, Operator Level (such as provincial, city, county), Operator Role (such as system administrator, city and county user, etc.), Operator Email, and Operator Phone. Audit records include Change ID, Operator ID, Audit Time, Audit Status (such as approved, not approved), and Audit Comments. The system shall support operators in making changes to meteorological station information, recording historical evolutions, submitting audit requests, and auditors in reviewing change records and recording audit results. Each meteorological station can have multiple historical evolution records, each of which requires auditing, and each operator can submit multiple change records and participate in audits. The system shall be able to generate station change reports based on historical evolution information and record audit status and operators' operation history.", "answer": "CREATE TABLE Meteorological_Station (\n    Elevation FLOAT,\n    Geographic_Environment_Description VARCHAR(255),\n    Latitude FLOAT,\n    Longitude FLOAT,\n    Observation_Elements_List VARCHAR(255),\n    Observation_Instrument_Name_and_Model VARCHAR(255),\n    Observation_Record_Medium VARCHAR(255),\n    Observation_Standards VARCHAR(255),\n    Observation_Time DATETIME,\n    Station_ID INTEGER PRIMARY KEY,\n    Station_Name VARCHAR(255),\n    Station_Type VARCHAR(255)\n);\n\nCREATE TABLE Operator (\n    Email VARCHAR(255),\n    Level VARCHAR(255),\n    Name VARCHAR(255),\n    Operator_ID INTEGER PRIMARY KEY,\n    Phone INTEGER,\n    Role VARCHAR(255)\n);\n\nCREATE TABLE Historical_Evolution_Information (\n    Belonging_Station_ID INTEGER NOT NULL,\n    Change_ID INTEGER PRIMARY KEY,\n    Change_Type VARCHAR(255),\n    End_Time DATETIME,\n    New_Value VARCHAR(255),\n    Old_Value VARCHAR(255),\n    Operation_Status VARCHAR(255),\n    Operation_Time DATETIME,\n    Operator_ID INTEGER,\n    Reason_for_Change VARCHAR(255),\n    Start_Time DATETIME,\n    Station_ID INTEGER,\n    FOREIGN KEY (Belonging_Station_ID) REFERENCES Meteorological_Station(Station_ID)\n);\n\nCREATE TABLE Audit_Information (\n    Audit_Comments VARCHAR(255),\n    Audit_Status VARCHAR(255),\n    Audit_Time DATETIME,\n    Change_ID INTEGER NOT NULL,\n    Operator_ID INTEGER NOT NULL,\n    PRIMARY KEY (Change_ID, Operator_ID, Audit_Time),\n    FOREIGN KEY (Change_ID) REFERENCES Historical_Evolution_Information(Change_ID),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "gcc", "domain": ["科学研究和技术服务业", "专业技术服务业"]}
{"id": "67552f0b13602ec03b41aa62", "question": "1.Real-Time Capture and Query of Medical Images: The system should be able to capture and query medical images in real time, ensuring that doctors can quickly access the required image data. The medical image information to be recorded includes Image Type, Film Time, Image Data, Image Resolution, and Image Enhancement Information. Each image corresponds to a unique patient.\n2.Record All Patient Information: The system should record all relevant information for each patient, including Name, Age, Gender, Contact Information, and Medical Records.\n3.Record All Doctor Information: The system should record all relevant information for each doctor, including Name, Department, and Contact Information. Doctors should be able to operate on images and record specific operation details, including Operation Content and Operation Time. Doctors should be able to upload images, instantly uploading the edited images and their data to the server to ensure data sharing and long-term preservation. The system should also record the Upload Time and Server Path. Each image can be shared with multiple doctors, recording the Sharing Time and Target Institution.", "answer": "CREATE TABLE Patient (\n    Age INTEGER,\n    Contact_Information VARCHAR(255),\n    Gender BOOL,\n    Medical_Records VARCHAR(255),\n    Name VARCHAR(255),\n    Patient_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Doctor (\n    Contact_Information VARCHAR(255),\n    Department VARCHAR(255),\n    Doctor_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Medical_Image (\n    Film_Time DATETIME,\n    Image_Data BLOB,\n    Image_Enhancement_Information BLOB,\n    Image_ID INTEGER PRIMARY KEY,\n    Image_Resolution VARCHAR(255),\n    Image_Type VARCHAR(255),\n    Patient_ID INTEGER NOT NULL,\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);\n\nCREATE TABLE Doctor_Operation_on_Image (\n    Doctor_ID INTEGER NOT NULL,\n    Image_ID INTEGER NOT NULL,\n    Operation_Remarks VARCHAR(255),\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    PRIMARY KEY (Image_ID, Doctor_ID, Operation_Time),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (Image_ID) REFERENCES Medical_Image(Image_ID)\n);\n\nCREATE TABLE Doctor_Upload_Image (\n    Doctor_ID INTEGER NOT NULL,\n    Image_ID INTEGER NOT NULL,\n    Server_Path VARCHAR(255),\n    Upload_Time DATETIME,\n    PRIMARY KEY (Image_ID, Doctor_ID),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (Image_ID) REFERENCES Medical_Image(Image_ID)\n);\n\nCREATE TABLE Doctor_Share_Image (\n    Image_ID INTEGER NOT NULL,\n    Shared_Doctor_ID INTEGER NOT NULL,\n    Sharing_Time DATETIME,\n    Target_Institution VARCHAR(255),\n    PRIMARY KEY (Image_ID, Shared_Doctor_ID),\n    FOREIGN KEY (Image_ID) REFERENCES Medical_Image(Image_ID),\n    FOREIGN KEY (Shared_Doctor_ID) REFERENCES Doctor(Doctor_ID)\n);", "remarks": "WQ: 无修改 前提是影像上传会覆盖原先的记录，也合理。", "assign_to": "gcc", "assign_to_round2": "wq", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0b13602ec03b41aa79", "question": "\"The Intelligent Operation and Maintenance Management System for electrical equipment must meet core requirements including real-time monitoring, intelligent fault prediction, and remote monitoring interfaces. The system shall store basic information for each piece of equipment, such as equipment name, equipment type, manufacturer, and installation date, and shall record operational state parameters at different time points (such as temperature, vibration, etc.) to enable fault prediction through time series analysis and supervised learning models, coupled with continuous optimization using gradient descent and regularization techniques. To handle peak business periods and prevent data loss, the system shall implement a data buffering mechanism and utilize remote monitoring interfaces to ensure accurate transmission of real-time monitoring. The system shall record maintenance operations, including maintenance time, maintenance type, maintenance personnel, and maintenance costs, balancing maintenance frequency and costs based on equipment health indicators and predicted maintenance needs. For management and decision-making, the system can store historical data for each piece of equipment to perform trend analysis, providing references for decision models to achieve optimal resource allocation and fault prevention strategies.\"", "answer": "CREATE TABLE Electrical_Equipment (\n    Equipment_ID INTEGER PRIMARY KEY,\n    Equipment_Name VARCHAR(255),\n    Equipment_Type VARCHAR(255),\n    Installation_Date DATETIME,\n    Manufacturer VARCHAR(255)\n);\n\nCREATE TABLE Log_Record (\n    Equipment_ID INTEGER NOT NULL,\n    Record_Time DATETIME,\n    State_Parameters VARCHAR(255),\n    PRIMARY KEY (Equipment_ID, Record_Time),\n    FOREIGN KEY (Equipment_ID) REFERENCES Electrical_Equipment(Equipment_ID)\n);\n\nCREATE TABLE Maintenance_Record (\n    Equipment_ID INTEGER NOT NULL,\n    Maintenance_Cost FLOAT,\n    Maintenance_Personnel VARCHAR(255),\n    Maintenance_Time DATETIME,\n    Maintenance_Type VARCHAR(255),\n    PRIMARY KEY (Equipment_ID, Maintenance_Time),\n    FOREIGN KEY (Equipment_ID) REFERENCES Electrical_Equipment(Equipment_ID)\n);", "remarks": "需求描述中缺少相关属性，已添加", "assign_to": "zp", "assign_to_round2": "gcc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aa9c", "question": "The database design of an online bookstore management system includes relations for members, books, orders, and order details. The member table records member ID, username, password, address, postal code, phone number, expenditure, and points. The book table records book ID, type name, book title, author, publisher, publication date, ISBN, and price. The order table records order ID, member ID, sales amount, order date, and shipping date, where the order ID uniquely identifies an order, member ID associates with the member ID in the member table, and the order date must not be later than the shipping date. The order detail table records order ID, book ID, and quantity, describing each book and its quantity in an order. The system implements functions such as order creation, book querying, sales statistics, member spending records, and points calculation through these relations, ensuring data integrity and consistency, and supporting efficient query and management operations.", "answer": "CREATE TABLE Member (\n    Address VARCHAR(255),\n    Expenditure FLOAT,\n    Member_ID INTEGER PRIMARY KEY,\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Points FLOAT,\n    Postal_Code VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Book_Title VARCHAR(255),\n    ISBN VARCHAR(255),\n    Price FLOAT,\n    Publication_Date VARCHAR(255),\n    Publisher VARCHAR(255),\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Member_ID INTEGER NOT NULL,\n    Order_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Points FLOAT,\n    Sales_Amount FLOAT,\n    Shipping_Date DATETIME,\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);\n\nCREATE TABLE Order_Detail (\n    Book_ID INTEGER PRIMARY KEY NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Sales_Quantity INTEGER,\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aaa2", "question": "The business requirements description of the parking space management system is as follows:  \n\nThe parking lot has multiple parking spaces, each with a parking space number and a status (such as \"Vacant\" or \"Occupied\"). The parking lot is equipped with multiple entrances and exits, each with a unique number and specific location (such as \"East Gate\" or \"West Gate\"). After a vehicle enters the parking lot, the system records the vehicle information, including the vehicle ID, ticket number, and vehicle model.  \n\nFor each parking event, the parking lot management system needs to record the entry and exit information of each vehicle, including the vehicle ID, entry time, exit time, entrance number, exit number, and parking space number. Each parking record must be associated with specific vehicle, parking space, entrance, and exit information to enable real-time monitoring of parking space usage, optimize resource allocation in the parking lot, and provide accurate parking duration and billing basis.", "answer": "CREATE TABLE Parking (\n    Parking_Space_ID INTEGER PRIMARY KEY,\n    Parking_Space_Status VARCHAR(255)\n);\n\nCREATE TABLE Entrance (\n    Entrance_Location VARCHAR(255),\n    Entrance_Number INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Exit (\n    Exit_Location VARCHAR(255),\n    Exit_Number INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Vehicle (\n    License_Plate_Number INTEGER,\n    Vehicle_ID INTEGER PRIMARY KEY,\n    Vehicle_Model VARCHAR(255)\n);\n\nCREATE TABLE Parking_Record (\n    Entrance_Number INTEGER NOT NULL,\n    Entry_Time DATETIME,\n    Exit_Number INTEGER NOT NULL,\n    Exit_Time DATETIME,\n    Parking_Duration FLOAT,\n    Parking_Fee FLOAT,\n    Parking_Space_ID INTEGER NOT NULL,\n    Vehicle_ID INTEGER NOT NULL,\n    PRIMARY KEY (Parking_Space_ID, Vehicle_ID),\n    FOREIGN KEY (Entrance_Number) REFERENCES Entrance(Entrance_Number),\n    FOREIGN KEY (Exit_Number) REFERENCES Exit(Exit_Number),\n    FOREIGN KEY (Parking_Space_ID) REFERENCES Parking(Parking_Space_ID),\n    FOREIGN KEY (Vehicle_ID) REFERENCES Vehicle(Vehicle_ID)\n);", "remarks": "车辆停车记录应该是关系，不属于实体", "assign_to": "cyx", "assign_to_round2": "gcc", "domain": ["卫生和社会工作", "社会工作"]}
{"id": "67552f0b13602ec03b41aaa4", "question": "\"The system is required to routinely record patients' vital signs, including temperature, blood pressure, heart rate, and other data, generating a unique log ID and record time for each entry. These vital signs will be formatted and stored in a log file. If any vital sign exceeds the preset normal range, the system will send an alert message, including alert ID, patient ID, abnormal vital signs, alert time, and alert content. The preset normal ranges are maintained by doctors, and the system will save these normal range details for comparison.\"", "answer": "CREATE TABLE Patient (\n    Age INTEGER,\n    Contact_Number INTEGER,\n    Emergency_Contact_Number INTEGER,\n    Name VARCHAR(255),\n    Patient_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Medical_Record (\n    Blood_Pressure VARCHAR(255),\n    Heart_Rate INTEGER,\n    Patient_ID INTEGER NOT NULL,\n    Record_ID INTEGER PRIMARY KEY,\n    Record_Time DATETIME,\n    Temperature FLOAT,\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);\n\nCREATE TABLE Alert_Record (\n    Abnormal_Record_ID INTEGER NOT NULL,\n    Alert_Content VARCHAR(255),\n    Alert_ID INTEGER PRIMARY KEY,\n    Alert_Time DATETIME,\n    FOREIGN KEY (Abnormal_Record_ID) REFERENCES Medical_Record(Record_ID)\n);", "remarks": "WQ：无修改", "assign_to": "zp", "assign_to_round2": "wq", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0b13602ec03b41aaab", "question": "The Library Management System tracks information related to borrowers and books, as well as the management of borrowing transactions and penalties for overdue returns. The main functional requirements of the system include:\n1.Borrower: Each borrower must have their borrowing-related information recorded, including Name, Overdue Books, and Fines.\n2.Books: Records detailed information about each book, such as Book Title, Author, Publication Date, Publisher, Stock, Loan Status, Loan Duration, and Fine.\n3.Borrower Loaned Books: When a borrower checks out a book, the system should record the Loan Date and the Expected Return Date.\n4.Fines: If a borrower returns a book late, a fine should be recorded, which includes the Fine Amount and Overdue Days.", "answer": "CREATE TABLE Borrower (\n    Borrower_ID INTEGER PRIMARY KEY,\n    Fines FLOAT,\n    Name VARCHAR(255),\n    Overdue_Books INTEGER\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Book_Title VARCHAR(255),\n    Fine FLOAT,\n    Loan_Duration INTEGER,\n    Loan_Status VARCHAR(255),\n    Publication_Date DATETIME,\n    Publisher VARCHAR(255),\n    Stock INTEGER\n);\n\nCREATE TABLE Borrower_Loaned_Books (\n    Book_ID INTEGER NOT NULL,\n    Borrower_ID INTEGER NOT NULL,\n    Expected_Return_Date DATETIME,\n    Loan_Date DATETIME,\n    PRIMARY KEY (Borrower_ID, Book_ID),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Borrower_ID) REFERENCES Borrower(Borrower_ID)\n);\n\nCREATE TABLE Fines (\n    Book_ID INTEGER NOT NULL,\n    Borrower_ID INTEGER NOT NULL,\n    Fine_Amount FLOAT,\n    Overdue_Days INTEGER,\n    PRIMARY KEY (Borrower_ID, Book_ID),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Borrower_ID) REFERENCES Borrower(Borrower_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szh", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0b13602ec03b41aab0", "question": "This is a Patient Monitoring System. For patient management, the system records each patient's basic information, including unique medical record number, name, gender, address, ID card number, phone number, and admission time. For vital signs management, the system periodically collects patients' vital sign data, such as body temperature, blood pressure, heart rate, etc. Each vital sign has its upper and lower limits for normal range, which doctors can add or update. The system formats the collected vital sign data and stores it in logs, while comparing these data with preset normal ranges, sending warning messages if limits are exceeded. The system generates medical records based on vital sign data, recording diagnosis time and content. For treatment management, the system generates treatment recommendations based on vital sign data and medical records, which doctors and nurses can query to provide treatment accordingly.", "answer": "CREATE TABLE Patient (\n    Address VARCHAR(255),\n    Admission_time DATETIME,\n    Gender VARCHAR(255),\n    ID_card_number VARCHAR(255),\n    Medical_record_number VARCHAR(255) PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_number VARCHAR(255)\n);\n\nCREATE TABLE Vital_signs (\n    Feature_name VARCHAR(255) PRIMARY KEY,\n    Normal_range_lower_limit FLOAT,\n    Normal_range_upper_limit FLOAT\n);\n\nCREATE TABLE Monitoring (\n    Feature_name VARCHAR(255) NOT NULL,\n    Feature_value FLOAT,\n    Medical_record_number VARCHAR(255) NOT NULL,\n    Record_time DATETIME,\n    PRIMARY KEY (Medical_record_number, Feature_name, Record_time),\n    FOREIGN KEY (Feature_name) REFERENCES Vital_signs(Feature_name),\n    FOREIGN KEY (Medical_record_number) REFERENCES Patient(Medical_record_number)\n);", "remarks": "WQ:schema_2主键中添加记录时间", "assign_to": "hzb", "assign_to_round2": "wq", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0b13602ec03b41aabb", "question": "Business Requirements Description for Airline Ticket Reservation System:\nAn airline operates multiple flights, each of which has a Flight ID, Airline, Departure City, Departure Time, Destination, Arrival Time, and Ticket Price. The company records discount information, including Flight ID, Discount Start Date, Discount End Date, and Discount Rate. The company manages multiple passenger records, each of which includes Passenger ID, Passenger Name, Passenger Gender, Passenger Date of Birth, Passenger Phone, and VIP Discount. Each ticket purchase is recorded with a Ticket Order Number, Passenger ID, Flight ID, Travel Date, and Purchase Amount. The purchase amount may be influenced by flight discounts and VIP discounts.", "answer": "CREATE TABLE Flight (\n    Airline VARCHAR(255),\n    Arrival_Time DATETIME,\n    Departure_City VARCHAR(255),\n    Departure_Time DATETIME,\n    Destination VARCHAR(255),\n    Flight_ID INTEGER PRIMARY KEY,\n    Ticket_Price FLOAT\n);\n\nCREATE TABLE Passenger (\n    Passenger_Date_of_Birth DATETIME,\n    Passenger_Gender VARCHAR(255),\n    Passenger_ID INTEGER PRIMARY KEY,\n    Passenger_Name VARCHAR(255),\n    Passenger_Phone VARCHAR(255),\n    VIP_Discount FLOAT\n);\n\nCREATE TABLE Discount_Information (\n    Discount_End_Date DATETIME,\n    Discount_ID INTEGER PRIMARY KEY,\n    Discount_Rate FLOAT,\n    Discount_Start_Date DATETIME,\n    Flight_ID INTEGER NOT NULL,\n    FOREIGN KEY (Flight_ID) REFERENCES Flight(Flight_ID)\n);\n\nCREATE TABLE Ticket_Purchase_Record (\n    Flight_ID INTEGER NOT NULL,\n    Passenger_ID INTEGER NOT NULL,\n    Purchase_Amount FLOAT,\n    Ticket_Order_Number VARCHAR(255),\n    Travel_Date DATETIME,\n    FOREIGN KEY (Flight_ID) REFERENCES Flight(Flight_ID),\n    FOREIGN KEY (Passenger_ID) REFERENCES Passenger(Passenger_ID)\n);", "remarks": "折扣信息属性中有航班ID，并且购票记录应该是关系不是实体，并且主键多余", "assign_to": "szh2", "assign_to_round2": "gcc", "domain": ["交通运输、仓储和邮政业", "航空运输业"]}
{"id": "67552f0b13602ec03b41aacb", "question": "In the File/Directory (AbstractFile) module, users can create files or directories. When creating, enter the file ID (FileID) as the Primary key to uniquely identify the file or directory; enter the name (Name) for easy identification; select the type (Type), which can only be a file or directory; the system automatically records the creation time (CreateTime) to save the creation time of the file or directory; the update time (UpdateTime) will be updated when the file or directory information is modified. Users can modify the name and type of the file or directory, and the system will update the update time accordingly.\nIn the Directory (Folder) module, when users create a directory, they enter the directory ID (FolderID) as the Primary key; associate the file ID (FileID) as the Foreign key to ensure that it is associated with the file or directory in the AbstractFile table; set the child file/directory list (ChildList) and add the ID of the child file or subdirectory to this list; users can add or delete child files/directories, and the system will update the child file/directory list and update the update time. Users can also modify the file ID of the directory, and the system will check the Foreign key association and update the update time.\nIn the File module, when creating a file, the user enters the file ID (FileID) as the Primary key; enters the name (Name) and selects the type (Type), limiting it to file; enters the file size (FileSize) to indicate the size of the file; the system will record the creation time (CreateTime) and update time (UpdateTime), and update the update time when the file information is modified. The user can modify the file name, type and file size, and the system will update the corresponding information and update the update time. \"", "answer": "CREATE TABLE Abstract_File (\n    Creation_Time DATETIME,\n    File_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Type VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Directory (\n    Directory_ID INTEGER PRIMARY KEY,\n    File_ID INTEGER NOT NULL,\n    Sub-file/directory_list BLOB,\n    FOREIGN KEY (File_ID) REFERENCES Abstract_File(File_ID)\n);\n\nCREATE TABLE File (\n    Abstract_File_ID INTEGER NOT NULL,\n    Creation_Time DATETIME,\n    Directory_ID INTEGER NOT NULL,\n    File_ID INTEGER PRIMARY KEY,\n    File_Size FLOAT,\n    Name VARCHAR(255),\n    Type VARCHAR(255),\n    Update_Time DATETIME,\n    FOREIGN KEY (Abstract_File_ID) REFERENCES Abstract_File(File_ID),\n    FOREIGN KEY (Directory_ID) REFERENCES Directory(Directory_ID)\n);", "remarks": "schema_2的外键缺失", "assign_to": "tk", "assign_to_round2": "gcc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aadb", "question": "The database for an online pharmacy system shall be designed and implemented with the following requirements:\n\nThe system shall support customer registration, including filling out customer information, payment methods, and signing an authorization agreement; and login, allowing only registered customers to log in.\n\nThe system shall support prescription entry and submission, including filling out doctor information and medication information; and prescription validation, verifying doctor information and sending confirmation requests. The prescription status shall be set to \"Invalid Doctor Information\", \"Invalid Prescription\", \"Unable to Review\", or \"Approved for Payment\" based on the doctor's response or timeout.\n\nThe system shall support medication purchase, automatically calculating medication prices and mailing to customers who have paid.\n", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Agreement_Status VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255)\n);\n\nCREATE TABLE Medication (\n    Dosage VARCHAR(255),\n    Medication_ID INTEGER PRIMARY KEY,\n    Medication_Name VARCHAR(255),\n    Price FLOAT,\n    Stock_Quantity INTEGER\n);\n\nCREATE TABLE Payment_Method (\n    Customer_ID INTEGER NOT NULL,\n    Payment_Details VARCHAR(255),\n    Payment_Method_ID INTEGER,\n    Payment_Type VARCHAR(255),\n    PRIMARY KEY (Payment_Method_ID, Customer_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Prescription (\n    Customer_ID INTEGER NOT NULL,\n    Doctor_Contact_Information VARCHAR(255),\n    Doctor_Hospital VARCHAR(255),\n    Doctor_Name VARCHAR(255),\n    Prescription_ID INTEGER PRIMARY KEY,\n    Prescription_Status VARCHAR(255),\n    Submission_Time FLOAT,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Prescription_Medication_Association (\n    Medication_ID INTEGER NOT NULL,\n    Prescription_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Prescription_ID, Medication_ID),\n    FOREIGN KEY (Medication_ID) REFERENCES Medication(Medication_ID),\n    FOREIGN KEY (Prescription_ID) REFERENCES Prescription(Prescription_ID)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Mailing_Address VARCHAR(255),\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Order_Time FLOAT,\n    Prescription_ID INTEGER NOT NULL,\n    Total_Price FLOAT,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Prescription_ID) REFERENCES Prescription_Medication_Association(Prescription_ID)\n);\n\nCREATE TABLE Verification_Log (\n    Log_ID INTEGER PRIMARY KEY,\n    Prescription_ID INTEGER NOT NULL,\n    Verification_Result VARCHAR(255),\n    Verification_Time DATETIME,\n    FOREIGN KEY (Prescription_ID) REFERENCES Prescription_Medication_Association(Prescription_ID)\n);", "remarks": "实体中包含了关系，已删除处方药品关联实体；对象和外键格式不对，没有按照schema_x", "assign_to": "dyq", "assign_to_round2": "gcc", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0b13602ec03b41ab2b", "question": "Business Requirements Description for Pizza Shop Management System:\nA pizza shop offers a variety of pizzas, each of which has a Pizza ID, Pizza Name, Price, and Stock Quantity. The shop has multiple customers, and their Customer ID, Customer Name, Customer Phone, and Customer Address are recorded. The shop processes multiple orders, each of which has an Order ID, Customer ID, Order Date, Expected Delivery Date, and Order Status. Each order records the pizzas ordered and their quantities.", "answer": "CREATE TABLE Pizza (\n    Pizza_ID INTEGER PRIMARY KEY,\n    Pizza_Name VARCHAR(255),\n    Price FLOAT,\n    Stock_Quantity INTEGER\n);\n\nCREATE TABLE Customer (\n    Customer_Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255),\n    Customer_Phone VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Expected_Delivery_Date DATETIME,\n    Order_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Ordered_Pizza (\n    Order_ID INTEGER NOT NULL,\n    Pizza_ID INTEGER NOT NULL,\n    Pizza_Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Pizza_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Pizza_ID) REFERENCES Pizza(Pizza_ID)\n);", "remarks": "WQ:无修改", "assign_to": "szh2", "assign_to_round2": "wq", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a789", "question": "A logistics company's freight management system has the following business requirements:\n\nThe company owns multiple freight trucks. Each truck has information including license plate number, model, and load capacity. The company undertakes multiple transportation tasks. Each task has information including task number, origin, destination, cargo name, weight, and transportation time. The company has multiple employees. Employee information includes employee ID, employee name, employee phone number, and employee role (driver or assistant). Each transportation task requires the assignment of one truck, one driver, and one assistant. The system records the start time and end time of each transportation task, and supports real-time monitoring and performance evaluation of transportation tasks.\n", "answer": "CREATE TABLE Freight_Truck (\n    License_Plate_Number VARCHAR(255) PRIMARY KEY,\n    Load_Capacity VARCHAR(255),\n    Model VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Role VARCHAR(255)\n);\n\nCREATE TABLE Transportation_Task (\n    Assigned_License_Plate_Number VARCHAR(255) NOT NULL,\n    Assistant_ID INTEGER NOT NULL,\n    Cargo_Name VARCHAR(255),\n    Destination VARCHAR(255),\n    Driver_ID INTEGER NOT NULL,\n    End_Time DATETIME,\n    Origin VARCHAR(255),\n    Start_Time DATETIME,\n    Task_Number INTEGER PRIMARY KEY,\n    Transportation_Time DATETIME,\n    Weight FLOAT,\n    FOREIGN KEY (Assigned_License_Plate_Number) REFERENCES Freight_Truck(License_Plate_Number),\n    FOREIGN KEY (Assistant_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Driver_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["交通运输、仓储和邮政业", "道路运输业"]}
{"id": "67552f0a13602ec03b41a791", "question": "To facilitate management, a fishing company has decided to introduce a database for tool management. This company manages various fishing tools, each with a unique tool ID, name, and model. The company needs to record each tool's usage, including usage time, user, and location. The system also needs to record maintenance details for the tools, including maintenance time, maintenance content, and the person performing maintenance. Additionally, the system should be able to assess the performance of each tool, including usage frequency and maintenance counts.", "answer": "CREATE TABLE tool (\n    Maintenance_Count INTEGER,\n    Tool_ID INTEGER PRIMARY KEY,\n    Tool_Model VARCHAR(255),\n    Tool_Name VARCHAR(255),\n    Usage_Frequency FLOAT\n);\n\nCREATE TABLE usage_record (\n    Record_ID INTEGER PRIMARY KEY,\n    Tool_ID INTEGER NOT NULL,\n    Usage_Location VARCHAR(255),\n    Usage_Time DATETIME,\n    User VARCHAR(255),\n    FOREIGN KEY (Tool_ID) REFERENCES tool(Tool_ID)\n);\n\nCREATE TABLE maintenance_record (\n    Maintenance_Content VARCHAR(255),\n    Maintenance_ID INTEGER PRIMARY KEY NOT NULL,\n    Maintenance_Person VARCHAR(255),\n    Maintenance_Time FLOAT,\n    Tool_ID INTEGER,\n    FOREIGN KEY (Maintenance_ID) REFERENCES tool(Tool_ID)\n);", "remarks": "记录作为一个实体，工具表与记录表是一对多关系。注意:因为需求没有针对人员有特殊说明，这里不需要特别搞一个人员表，避免冗余设计。", "assign_to": "zp", "assign_to_round2": "lzm", "domain": ["农、林、牧、渔业", "渔业"]}
{"id": "67552f0a13602ec03b41a7a2", "question": "The People's Political Consultative Conference requires a system to manage proposals from its members. Each proposal includes a Proposal ID, Proposal Content, Proposal Time, Proposer(s), and Status. A proposer can consist of multiple members, each with a Member ID, Name, Gender, Date of Birth, Party Affiliation, and Position. The system also needs to record the handling of each proposal, which includes Handling Time, Handler, and Handling Opinion. The handler is a member different from the proposer.\n", "answer": "CREATE TABLE Proposal (\n    Proposal_Content VARCHAR(255),\n    Proposal_ID INTEGER PRIMARY KEY,\n    Proposal_Time DATETIME,\n    Status VARCHAR(255)\n);\n\nCREATE TABLE Member (\n    Date_of_Birth DATETIME,\n    Gender BOOL,\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Party_Affiliation VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Proposal_Submission (\n    Member_ID INTEGER NOT NULL,\n    Proposal_ID INTEGER NOT NULL,\n    PRIMARY KEY (Proposal_ID, Member_ID),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID),\n    FOREIGN KEY (Proposal_ID) REFERENCES Proposal(Proposal_ID)\n);\n\nCREATE TABLE Proposal_Handling (\n    Handling_Opinion VARCHAR(255),\n    Handling_Time DATETIME,\n    Member_ID INTEGER NOT NULL,\n    Proposal_ID INTEGER NOT NULL,\n    PRIMARY KEY (Proposal_ID, Member_ID),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID),\n    FOREIGN KEY (Proposal_ID) REFERENCES Proposal(Proposal_ID)\n);", "remarks": "提案的提交和处理均被认作关系。", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["公共管理、社会保障和社会组织", "人民政协、民主党派"]}
{"id": "67552f0a13602ec03b41a7a3", "question": "A social security organization requires the management of social security information, including the basic information of the insured, types of social security, payment details, and receipt details. The insured's information includes Social Security ID, name, gender, date of birth, identity card number, and contact information; the social security types include a type ID, name, and description; payment details record the time, amount, and payer of each payment; receipt details record the time, amount, and recipient of each receipt.", "answer": "CREATE TABLE Insured_Person (\n    Contact_Information VARCHAR(255),\n    Date_of_Birth DATETIME,\n    Gender VARCHAR(255),\n    Identity_Card_Number VARCHAR(255),\n    Name VARCHAR(255),\n    Social_Security_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Social_Security_Type (\n    Description VARCHAR(255),\n    Name VARCHAR(255),\n    Type_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Insured_Person_Payment (\n    Payer VARCHAR(255),\n    Payment_Amount FLOAT,\n    Payment_ID INTEGER,\n    Payment_Time DATETIME,\n    Social_Security_ID INTEGER NOT NULL,\n    Type_ID INTEGER NOT NULL,\n    PRIMARY KEY (Payment_ID, Social_Security_ID, Type_ID),\n    FOREIGN KEY (Social_Security_ID) REFERENCES Insured_Person(Social_Security_ID),\n    FOREIGN KEY (Type_ID) REFERENCES Social_Security_Type(Type_ID)\n);\n\nCREATE TABLE Insured_Person_Receipt (\n    Receipt_Amount VARCHAR(255),\n    Receipt_ID INTEGER,\n    Receipt_Time DATETIME,\n    Recipient VARCHAR(255),\n    Social_Security_ID INTEGER NOT NULL,\n    Type_ID INTEGER NOT NULL,\n    PRIMARY KEY (Receipt_ID, Social_Security_ID, Type_ID),\n    FOREIGN KEY (Social_Security_ID) REFERENCES Insured_Person(Social_Security_ID),\n    FOREIGN KEY (Type_ID) REFERENCES Social_Security_Type(Type_ID)\n);", "remarks": "修改了schema中存在主键", "assign_to": "szc", "assign_to_round2": "szh", "domain": ["公共管理、社会保障和社会组织", "社会保障"]}
{"id": "67552f0a13602ec03b41a7a8", "question": "Business requirements description for a Farmland Management Information System: The system needs to manage multiple farms, with each farm recording farm ID, farm owner name, owner type (company or individual), owner contact information, and address. Each farm can have multiple plots of land. Each plot has a plot ID, area, soil type, crops, and current status (such as \"sowing\", \"growing\", \"harvesting\", etc.). Each crop has an ID, name, growth cycle, suitable soil type, and suitable climate conditions. For each planting operation, the system needs to record plot ID, crop, planting time, expected harvest time, planting quantity, and operator. For each harvesting operation, the system needs to record plot ID, crop, harvest time, harvest quantity, and operator.", "answer": "CREATE TABLE Farm (\n    Address VARCHAR(255),\n    Contact_information VARCHAR(255),\n    Farm_ID INTEGER PRIMARY KEY,\n    Owner_name VARCHAR(255),\n    Owner_type VARCHAR(255)\n);\n\nCREATE TABLE Crop (\n    Crop_ID INTEGER PRIMARY KEY,\n    Crop_name VARCHAR(255),\n    Growth_cycle INTEGER,\n    Suitable_climate_conditions VARCHAR(255),\n    Suitable_soil_type VARCHAR(255)\n);\n\nCREATE TABLE Plot (\n    Area VARCHAR(255),\n    Current_status VARCHAR(255),\n    Farm_ID INTEGER NOT NULL,\n    Plot_ID INTEGER PRIMARY KEY,\n    Soil_type VARCHAR(255),\n    FOREIGN KEY (Farm_ID) REFERENCES Farm(Farm_ID)\n);\n\nCREATE TABLE Planting_record (\n    Crop_ID INTEGER NOT NULL,\n    Expected_harvest_time DATETIME,\n    Operator VARCHAR(255),\n    Planting_quantity INTEGER,\n    Planting_time DATETIME,\n    Plot_ID INTEGER NOT NULL,\n    PRIMARY KEY (Plot_ID, Crop_ID, Planting_time),\n    FOREIGN KEY (Crop_ID) REFERENCES Crop(Crop_ID),\n    FOREIGN KEY (Plot_ID) REFERENCES Plot(Plot_ID)\n);\n\nCREATE TABLE Harvest_record (\n    Crop_ID INTEGER NOT NULL,\n    Harvest_quantity INTEGER,\n    Harvest_time DATETIME,\n    Operator VARCHAR(255),\n    Plot_ID INTEGER NOT NULL,\n    PRIMARY KEY (Plot_ID, Crop_ID, Harvest_time),\n    FOREIGN KEY (Crop_ID) REFERENCES Crop(Crop_ID),\n    FOREIGN KEY (Plot_ID) REFERENCES Plot(Plot_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szh2", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0a13602ec03b41a7ce", "question": "Business requirements description for the motor vehicle repair system: A motor vehicle repair service station wants to use a database to manage the repair information of the station, which provides vehicle repair and maintenance services. The service station has multiple repair stations, each station has several repair technicians, and it is required to record the information of the repair technicians, including Technician ID, Technician Name, Technician Contact Number, and Technician Skill Level. Each repair task has a Task ID, Vehicle Information (License Plate Number, Vehicle Model, Vehicle Owner Name, Owner Contact Number), Repair Date, Repair Type, and Repair Duration. After the repair is completed, it is necessary to record the Repair Cost, Repair Effect, and Owner Evaluation. The performance evaluation of the repair technicians is based on the number of repair tasks completed and the satisfaction of the vehicle owners.", "answer": "CREATE TABLE station (\n    Station_ID INTEGER PRIMARY KEY,\n    Station_Name VARCHAR(255)\n);\n\nCREATE TABLE user (\n    Contact_Number INTEGER,\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE repair_technician (\n    Contact_Number INTEGER,\n    Skill_Level VARCHAR(255),\n    Station_ID INTEGER NOT NULL,\n    Technician_ID INTEGER PRIMARY KEY,\n    Technician_Name VARCHAR(255),\n    FOREIGN KEY (Station_ID) REFERENCES station(Station_ID)\n);\n\nCREATE TABLE vehicle (\n    License_Plate_Number VARCHAR(255) PRIMARY KEY,\n    Owner_ID INTEGER NOT NULL,\n    Vehicle_Model VARCHAR(255),\n    FOREIGN KEY (Owner_ID) REFERENCES user(User_ID)\n);\n\nCREATE TABLE repair_record (\n    License_Plate_Number VARCHAR(255) NOT NULL,\n    Owner_Evaluation VARCHAR(255),\n    Repair_Cost FLOAT,\n    Repair_Date DATETIME,\n    Repair_Duration DATETIME,\n    Repair_Effect VARCHAR(255),\n    Repair_Type VARCHAR(255),\n    Task_ID INTEGER PRIMARY KEY,\n    Technician_ID INTEGER NOT NULL,\n    FOREIGN KEY (License_Plate_Number) REFERENCES vehicle(License_Plate_Number),\n    FOREIGN KEY (Technician_ID) REFERENCES repair_technician(Technician_ID)\n);", "remarks": "在默认情况下(不做额外说明),车主评价可以包含车主满意度信息，故绩效评估可以通过维修记录表实现，同时反馈维技师的技能等级", "assign_to": "zp", "assign_to_round2": "szh2", "domain": ["居民服务、修理和其他服务业", "机动车、电子产品和日用产品修理业"]}
{"id": "67552f0a13602ec03b41a7cf", "question": "The Electronic Device Repair Service Center provides repair services for electronic devices such as mobile phones and computers. The service center has multiple repair workstations, with multiple repair technicians at each workstation. Each repair task includes a Task ID, Customer Information (Customer Name, Customer Phone Number), Product Information (Product Name, Model Number, Fault Description), Repair Date, Repair Type, and Repair Duration. After completion of repairs, the system must record Repair Cost, Repair Results, and Customer Feedback. Repair technician performance evaluation is based on the number of completed repair tasks and customer satisfaction ratings.", "answer": "CREATE TABLE Workstation (\n    Workstation_ID INTEGER PRIMARY KEY,\n    Workstation_Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Model VARCHAR(255),\n    Product_Name VARCHAR(255)\n);\n\nCREATE TABLE Repair_Technician (\n    Repair_Technician_ID INTEGER PRIMARY KEY,\n    Repair_Technician_Name VARCHAR(255),\n    Repair_Technician_Phone VARCHAR(255),\n    Workstation_ID INTEGER NOT NULL,\n    FOREIGN KEY (Workstation_ID) REFERENCES Workstation(Workstation_ID)\n);\n\nCREATE TABLE Repair_Record (\n    Customer_Feedback VARCHAR(255),\n    Customer_Name VARCHAR(255),\n    Customer_Phone VARCHAR(255),\n    Fault_Description VARCHAR(255),\n    Product_ID INTEGER NOT NULL,\n    Repair_Duration FLOAT,\n    Repair_Technician_ID INTEGER NOT NULL,\n    Repair_Time FLOAT,\n    Repair_Type VARCHAR(255),\n    PRIMARY KEY (Repair_Technician_ID, Product_ID, Repair_Time),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Repair_Technician_ID) REFERENCES Repair_Technician(Repair_Technician_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["居民服务、修理和其他服务业", "机动车、电子产品和日用产品修理业"]}
{"id": "67552f0a13602ec03b41a7d5", "question": "The daily-use products sales company sells home appliances, furniture, and other daily-use products. The company has multiple sales teams, each consisting of several sales personnel. Each sales task is identified by a task ID and includes customer information (customer name, customer telephone), product information (product name, model, price), sales date, sales quantity, and sales cost. After completing a sale, the customer evaluation must be recorded. The performance evaluation of sales personnel is based on the number of sales tasks completed and customer satisfaction.\n", "answer": "CREATE TABLE Sales_Team (\n    Team_ID INTEGER PRIMARY KEY,\n    Team_Name VARCHAR(255)\n);\n\nCREATE TABLE Salesperson (\n    Age INTEGER,\n    Belongs_to_Team_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Salesperson_ID INTEGER PRIMARY KEY,\n    Sex VARCHAR(255),\n    Telephone VARCHAR(255),\n    FOREIGN KEY (Belongs_to_Team_ID) REFERENCES Sales_Team(Team_ID)\n);\n\nCREATE TABLE Sales_Task (\n    Belongs_to_Team_ID INTEGER NOT NULL,\n    Customer_Name VARCHAR(255),\n    Customer_Telephone VARCHAR(255),\n    Product_Model VARCHAR(255),\n    Product_Name VARCHAR(255),\n    Product_Price FLOAT,\n    Sales_Cost FLOAT,\n    Sales_Date DATETIME,\n    Sales_Quantity INTEGER,\n    Task_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Belongs_to_Team_ID) REFERENCES Sales_Team(Team_ID)\n);\n\nCREATE TABLE Performance_Evaluation (\n    Customer_Satisfaction FLOAT,\n    Evaluation_ID INTEGER PRIMARY KEY,\n    Salesperson_ID INTEGER NOT NULL,\n    Task_Completion_Quantity INTEGER,\n    FOREIGN KEY (Salesperson_ID) REFERENCES Salesperson(Salesperson_ID)\n);\n\nCREATE TABLE Task_Record (\n    Customer_Evaluation VARCHAR(255),\n    Record_ID INTEGER PRIMARY KEY,\n    Task_ID INTEGER NOT NULL,\n    FOREIGN KEY (Task_ID) REFERENCES Sales_Task(Task_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "lzm", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a7d7", "question": "The construction company undertakes multiple construction projects. Each project has a project manager, project name, start date, estimated completion date, actual completion date, project budget, and project location. The company has multiple departments, each responsible for different projects. Each department has a department name and department head. Each project involves multiple employees, and each employee can participate in multiple projects. Each employee has an employee number, name, date of birth, gender, phone number, and position. When an employee participates in a project, the project they participate in, participation time, role, and work hours need to be recorded. The project management information system needs to be able to track project progress and cost, as well as generate statistics on employee workload.", "answer": "CREATE TABLE department (\n    Department_Head INTEGER NOT NULL,\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    FOREIGN KEY (Department_Head) REFERENCES employee(Employee_Number)\n);\n\nCREATE TABLE employee (\n    Date_of_Birth DATETIME,\n    Department_ID INTEGER NOT NULL,\n    Employee_Number INTEGER PRIMARY KEY,\n    Gender BOOL,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES department(Department_ID)\n);\n\nCREATE TABLE project (\n    Actual_Completion_Date DATETIME,\n    Actual_Cost FLOAT,\n    Estimated_Completion_Date DATETIME,\n    Project_Budget FLOAT,\n    Project_Location VARCHAR(255),\n    Project_Manager_ID INTEGER NOT NULL,\n    Project_Name VARCHAR(255),\n    Project_Number INTEGER PRIMARY KEY,\n    Project_Progress VARCHAR(255),\n    Start_Date DATETIME,\n    FOREIGN KEY (Project_Manager_ID) REFERENCES employee(Employee_Number)\n);\n\nCREATE TABLE project_participation_record (\n    Employee_Number INTEGER NOT NULL,\n    Participation_Time DATETIME,\n    Project_Number INTEGER NOT NULL,\n    Role VARCHAR(255),\n    Work_Hours FLOAT,\n    PRIMARY KEY (Employee_Number, Project_Number, Participation_Time),\n    FOREIGN KEY (Employee_Number) REFERENCES employee(Employee_Number),\n    FOREIGN KEY (Project_Number) REFERENCES project(Project_Number)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "lzm", "domain": ["建筑业", "房屋建筑业"]}
{"id": "67552f0a13602ec03b41a7de", "question": "A construction installation company has multiple suppliers, each of which has a Supplier ID, name, telephone, email, and address. The company undertakes multiple installation projects, each requiring the procurement of materials from suppliers. The procurement records must include Project ID, Supplier ID, purchase date, material name, material quantity, unit price of the material, and total price. The Supplier Management Information System shall be capable of managing procurement records and assessing supplier credibility.\n", "answer": "CREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY,\n    Telephone INTEGER\n);\n\nCREATE TABLE Project (\n    Actual_Completion_Date DATETIME,\n    Expected_Completion_Date DATETIME,\n    Project_Budget FLOAT,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Location VARCHAR(255),\n    Project_Name VARCHAR(255),\n    Start_Date DATETIME\n);\n\nCREATE TABLE Material (\n    Material_Description VARCHAR(255),\n    Material_ID INTEGER PRIMARY KEY,\n    Material_Name VARCHAR(255)\n);\n\nCREATE TABLE Supplier_Credit_Assessment (\n    Assessment_Content VARCHAR(255),\n    Assessment_Date DATETIME,\n    Assessment_ID INTEGER PRIMARY KEY,\n    Assessment_Score FLOAT,\n    Supplier_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Procurement_Record (\n    Material_ID INTEGER,\n    Material_Quantity FLOAT,\n    Material_Unit_Price FLOAT,\n    Procurement_Record_ID INTEGER PRIMARY KEY,\n    Project_ID INTEGER NOT NULL,\n    Purchase_Date DATETIME,\n    Supplier_ID INTEGER NOT NULL,\n    Total_Price FLOAT,\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "lzm", "domain": ["建筑业", "建筑安装业"]}
{"id": "67552f0a13602ec03b41a7e5", "question": "Real Estate Management System stores information on multiple properties for sale. Each property has a Property ID, address, area, sale price, and sale status. Sales personnel are identified by Employee ID, name, contact phone, and commission rate. Clients are recorded with a Client ID, name, contact phone, and address. Each sale transaction records the Property ID, sale date, sale price, sales personnel information, and client information. ", "answer": "CREATE TABLE Property (\n    Address VARCHAR(255),\n    Area VARCHAR(255),\n    Property_ID INTEGER PRIMARY KEY,\n    Sale_Price FLOAT,\n    Sale_Status VARCHAR(255)\n);\n\nCREATE TABLE Sales_Personnel (\n    Commission_Rate FLOAT,\n    Contact_Phone INTEGER,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Client (\n    Address VARCHAR(255),\n    Client_ID INTEGER PRIMARY KEY,\n    Contact_Phone INTEGER,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Sales_Record (\n    Client_ID INTEGER NOT NULL,\n    Property_ID INTEGER NOT NULL,\n    Sale_Date DATETIME,\n    Sale_Price FLOAT,\n    Sales_Personnel_ID INTEGER NOT NULL,\n    PRIMARY KEY (Property_ID, Employee_ID, Client_ID),\n    FOREIGN KEY (Client_ID) REFERENCES Client(Client_ID),\n    FOREIGN KEY (Property_ID) REFERENCES Property(Property_ID),\n    FOREIGN KEY (Sales_Personnel_ID) REFERENCES Sales_Personnel(Employee_ID)\n);", "remarks": "三元关系", "assign_to": "dyq", "assign_to_round2": "szh", "domain": ["房地产业", "房地产业"]}
{"id": "67552f0a13602ec03b41a7ee", "question": "The database shall be designed to manage the bank's mortgage application process.\nThe system shall record basic information for each applicant, including Applicant ID, Name, Phone Number, Email Address, and Identification Number. \nEach loan application shall include a unique Application Number, Applicant ID, Requested Loan Amount, Loan Term, and current Approval Status.       \nThe loan approval process shall be recorded in detail in the Loan Approval Form, including Application Number, Approval Date, Approval Result, and Approver ID.\nAdditionally, the system shall record detailed information for each approver, including Approver ID, Name, Phone Number, and Email Address.\nEach loan application may go through multiple approval stages, with each stage handled by different approvers. The system shall record each approval action and result.\n", "answer": "CREATE TABLE Applicant (\n    Applicant_ID INTEGER PRIMARY KEY,\n    Email_Address VARCHAR(255),\n    Identification_Number INTEGER,\n    Name VARCHAR(255),\n    Phone_Number INTEGER\n);\n\nCREATE TABLE Approver (\n    Approver_ID INTEGER PRIMARY KEY,\n    Email_Address VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number INTEGER\n);\n\nCREATE TABLE Loan_Application (\n    Applicant_ID INTEGER NOT NULL,\n    Application_Number INTEGER PRIMARY KEY,\n    Approval_Status VARCHAR(255),\n    Loan_Amount FLOAT,\n    Loan_Term INTEGER,\n    FOREIGN KEY (Applicant_ID) REFERENCES Applicant(Applicant_ID)\n);\n\nCREATE TABLE Loan_Approval (\n    Application_Number INTEGER NOT NULL,\n    Approval_Date DATETIME,\n    Approval_Result BOOL,\n    Approver_ID INTEGER NOT NULL,\n    PRIMARY KEY (Approver_ID, Application_Number, Approval_Date),\n    FOREIGN KEY (Application_Number) REFERENCES Loan_Application(Application_Number),\n    FOREIGN KEY (Approver_ID) REFERENCES Approver(Approver_ID)\n);", "remarks": "1:n关系，在N端实体类型转换成的关系模式中加入1端实体类型的键和联系类型的属性。", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a7f0", "question": "A company manages multiple construction projects, each with a Project ID, Project Name, Project Location, and Project Manager.\nThe Project Manager has a unique ID, as well as a Name, Phone Number, and Email.\nEach project generates multiple construction cost records, each record includes Expense Type, Cost Amount, Record Date, and Recording Staff.        \nThe Recording Staff also have their own ID, Name, Phone Number, and Email.", "answer": "CREATE TABLE Personnel (\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Personnel_ID INTEGER PRIMARY KEY,\n    Phone_Number VARCHAR(255),\n    Role VARCHAR(255)\n);\n\nCREATE TABLE Project (\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Location VARCHAR(255),\n    Project_Manager_ID INTEGER NOT NULL,\n    Project_Name VARCHAR(255),\n    FOREIGN KEY (Project_Manager_ID) REFERENCES Personnel(Personnel_ID)\n);\n\nCREATE TABLE Construction_Cost_Record (\n    Cost_Amount FLOAT,\n    Expense_Type VARCHAR(255),\n    Project_ID INTEGER NOT NULL,\n    Record_Date DATETIME,\n    Record_ID INTEGER PRIMARY KEY,\n    Recording_Staff_ID INTEGER NOT NULL,\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID),\n    FOREIGN KEY (Recording_Staff_ID) REFERENCES Personnel(Personnel_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh", "domain": ["建筑业", "建筑装饰、装修和其他建筑业"]}
{"id": "67552f0a13602ec03b41a7f1", "question": "A community property management system is mainly used to manage communities, property information and maintenance tasks. The system covers the basic information of the community, detailed data of the property and the management of maintenance tasks, including the allocation of maintenance personnel, task execution, cost and status tracking, etc. The business requirements are as follows:\nCommunity management: The system manages the basic information of each community, such as the community name, location and property manager. This information can ensure the effective management of each community by the property management party.\nProperty management: Each community contains several properties, and the system records the address, area, maintenance status, etc. of each property. Property information helps to manage the maintenance and repair of each property in the community.\nMaintenance task management: The system can record the content of the maintenance task, the allocation of maintenance personnel, and the cost, duration, status and other information of the maintenance in detail. Through the maintenance task table, the administrator can track the maintenance progress of each property to ensure that the task is completed on time.\nMaintenance personnel management: The system can manage the basic information of maintenance personnel and assign different maintenance personnel according to the maintenance task to ensure the timely and effective completion of the maintenance task.", "answer": "CREATE TABLE Community_information (\n    Community_ID INTEGER PRIMARY KEY,\n    Community_name VARCHAR(255),\n    Location VARCHAR(255),\n    Property_manager VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_staff_information (\n    Contact_information VARCHAR(255),\n    Maintenance_staff_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Property_information (\n    Address VARCHAR(255),\n    Area VARCHAR(255),\n    Community_ID INTEGER NOT NULL,\n    Maintenance_status VARCHAR(255),\n    Property_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Community_ID) REFERENCES Community_information(Community_ID)\n);\n\nCREATE TABLE Maintenance_task (\n    Maintenance_content VARCHAR(255),\n    Maintenance_cost FLOAT,\n    Maintenance_staff_ID INTEGER NOT NULL,\n    Maintenance_time DATETIME,\n    Property_ID INTEGER NOT NULL,\n    PRIMARY KEY (Property_ID, Maintenance_staff_ID, Maintenance_time),\n    FOREIGN KEY (Maintenance_staff_ID) REFERENCES Maintenance_staff_information(Maintenance_staff_ID),\n    FOREIGN KEY (Property_ID) REFERENCES Property_information(Property_ID)\n);", "remarks": "CS 2025/1/3。 2025/1/21修改", "assign_to": "cs", "assign_to_round2": "szc", "domain": ["居民服务、修理和其他服务业", "居民服务业"]}
{"id": "67552f0a13602ec03b41a7f7", "question": "Business requirements for wholesaler customer management system: A wholesaler needs to manage its customer information, including customer number, name, address, contact person, and phone number. Every time a customer places an order, the order number, customer number, order time, product number, quantity, and total price need to be recorded. The system also needs to rate the customer's credit, and the rating indicators include the number of historical orders and the order amount (which can be exported based on order records).", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Contact_Person VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Time DATETIME,\n    Total_Price FLOAT,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Customer_Credit_Rating (\n    Credit_Rating INTEGER,\n    Customer_ID INTEGER PRIMARY KEY NOT NULL,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order_Detail (\n    Order_Detail_ID INTEGER PRIMARY KEY,\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER,\n    Quantity INTEGER,\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "历史订单数量和订单金额可根据订单记录导出，所以把这两个属性从模式里删除了", "assign_to": "szh", "assign_to_round2": "szh2", "domain": ["批发和零售业", "批发业"]}
{"id": "67552f0a13602ec03b41a7f9", "question": "A retail merchant requires a system to manage member information, including Member ID, Name, Phone Number, and Points. The merchant operates multiple products and needs to record Product ID and Product Name. Each time a member shops, the system must record the Shopping Time, Store ID, Product ID, Quantity, and Total Price. The system also needs to classify members into levels, with level indicators including cumulative points range and shopping frequency range.", "answer": "CREATE TABLE Level (\n    Level_ID INTEGER PRIMARY KEY,\n    Points_Range INTEGER,\n    Shopping_Frequency_Range INTEGER\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255)\n);\n\nCREATE TABLE Member (\n    Level_ID INTEGER NOT NULL,\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number INTEGER,\n    Points INTEGER,\n    FOREIGN KEY (Level_ID) REFERENCES Level(Level_ID)\n);\n\nCREATE TABLE Shopping_Record (\n    Member_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Shopping_Time DATETIME,\n    Store_ID INTEGER,\n    Total_Price FLOAT,\n    PRIMARY KEY (Member_ID, Product_ID, Shopping_Time),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a814", "question": "Business requirements for the ecological protection zone management system: An ecological protection zone needs to manage multiple areas, each of which has an area number, name, geographic location, and administrator. The protection zone needs to record the species and number of plants and animals in each area. Each record needs to include the plant and animal record number, record time, recorder, plant and animal species, and number. The system also needs to record environmental changes within the protection zone, including environmental change record number, temperature, humidity, rainfall, etc., and indicate the time and location of the change.", "answer": "CREATE TABLE Region (\n    Administrator VARCHAR(255),\n    Geographical_Location VARCHAR(255),\n    Name VARCHAR(255),\n    Region_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Flora_and_Fauna_Record (\n    Quantity INTEGER,\n    Record_ID INTEGER PRIMARY KEY,\n    Record_Time DATETIME,\n    Recorder VARCHAR(255),\n    Region_ID INTEGER NOT NULL,\n    Type VARCHAR(255),\n    FOREIGN KEY (Region_ID) REFERENCES Region(Region_ID)\n);\n\nCREATE TABLE Environmental_Change_Record (\n    Change_ID INTEGER PRIMARY KEY,\n    Change_Time DATETIME,\n    Humidity FLOAT,\n    Location VARCHAR(255),\n    Rainfall FLOAT,\n    Region_ID INTEGER NOT NULL,\n    Temperature FLOAT,\n    FOREIGN KEY (Region_ID) REFERENCES Region(Region_ID)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "szh2", "domain": ["水利、环境和公共设施管理业", "生态保护和环境治理业"]}
{"id": "67552f0a13602ec03b41a81a", "question": "1. Business Requirements Description (Translated):\nThe Public Facility Maintenance System is designed to help a city’s management organization oversee various public facilities such as streetlights, parks, and bridges. The system needs to manage the following aspects:\nEach facility should have a unique Facility ID, Name, Location, Responsible Person, and Creation Date.The system should record the maintenance details for each facility, including Maintenance Time, Maintenance Content, Maintenance Personnel, and Maintenance Costs.Track the Usage Time, Usage Frequency, and User Feedback for each facility.Each user has a unique User ID and Name, and their interactions with the facilities are also recorded in the system.", "answer": "CREATE TABLE Facility (\n    Creation_Date DATETIME,\n    Facility_ID INTEGER PRIMARY KEY,\n    Facility_Location VARCHAR(255),\n    Facility_Name VARCHAR(255),\n    Facility_Responsible_Person VARCHAR(255)\n);\n\nCREATE TABLE User (\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Facility_Maintenance (\n    Facility_ID INTEGER NOT NULL,\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Cost FLOAT,\n    Maintenance_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Facility_ID, User_ID, Maintenance_Time),\n    FOREIGN KEY (Facility_ID) REFERENCES Facility(Facility_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Facility_Usage (\n    Facility_ID INTEGER NOT NULL,\n    Usage_Frequency FLOAT,\n    Usage_Time DATETIME,\n    User_Feedback VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Facility_ID, User_ID, Usage_Time),\n    FOREIGN KEY (Facility_ID) REFERENCES Facility(Facility_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szh2", "domain": ["水利、环境和公共设施管理业", "公共设施管理业"]}
{"id": "67552f0a13602ec03b41a820", "question": "The Water Treatment Company Equipment Management System needs to monitor the operational status of its equipment. The system will track the following details:\nEach piece of equipment has a unique Equipment ID, Name, Model, Installation Location, and Installation Date.For each operation of the equipment, the system needs to record Start Time, End Time,Operational Status, and the Operator ID responsible. Each operator has a unique Operator ID, Name, Department, and Contact Information.", "answer": "CREATE TABLE Equipment (\n    Equipment_ID INTEGER PRIMARY KEY,\n    Equipment_Model VARCHAR(255),\n    Equipment_Name VARCHAR(255),\n    Installation_Date DATETIME,\n    Installation_Location VARCHAR(255)\n);\n\nCREATE TABLE Operator (\n    Contact_Information VARCHAR(255),\n    Department VARCHAR(255),\n    Name VARCHAR(255),\n    Operator_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Equipment_Operation (\n    End_Time DATETIME,\n    Equipment_ID INTEGER NOT NULL,\n    Operational_Status VARCHAR(255),\n    Operator_ID INTEGER NOT NULL,\n    Start_Time DATETIME,\n    PRIMARY KEY (Equipment_ID, Operator_ID, Start_Time),\n    FOREIGN KEY (Equipment_ID) REFERENCES Equipment(Equipment_ID),\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szc", "domain": ["生活生产和供应业", "水的生产和供应业"]}
{"id": "67552f0a13602ec03b41a82e", "question": "The system shall record basic information of attendees, including name, gender, organization, and position. Attendee information helps with post-conference statistical analysis, allowing conference organizers to understand the composition of participants and facilitate subsequent contact and arrangements.\n\nAttendance management:\nThe system shall track each attendee's participation and record the conferences they attend. This ensures that each attendee's attendance information is accurate and facilitates conference management and follow-up.\n\nPresentation management:\nThe system shall support recording each speaker's presentation schedule at the conference, including the topic, time, and location of the presentation. Detailed information for each presentation is recorded to track the progress of each presentation and ensure the smooth running of the conference proceedings.\n\nThe system provides comprehensive conference data management functions, from conference organization and attendee information management to presentation scheduling and tracking, efficiently supporting the organization and execution of conferences.", "answer": "CREATE TABLE Conference (\n    Conference_ID INTEGER PRIMARY KEY,\n    Date DATETIME,\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Theme VARCHAR(255)\n);\n\nCREATE TABLE Attendee_Information (\n    Attendee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Organization VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Attendance (\n    Attendee_ID INTEGER NOT NULL,\n    Conference_ID INTEGER NOT NULL,\n    PRIMARY KEY (Attendee_ID, Conference_ID),\n    FOREIGN KEY (Attendee_ID) REFERENCES Attendee_Information(Attendee_ID),\n    FOREIGN KEY (Conference_ID) REFERENCES Conference(Conference_ID)\n);\n\nCREATE TABLE Speaker_Presentation (\n    Conference_ID INTEGER NOT NULL,\n    Presentation_Address VARCHAR(255),\n    Presentation_Time DATETIME,\n    Presentation_Topic VARCHAR(255),\n    Speaker_ID INTEGER NOT NULL,\n    PRIMARY KEY (Speaker_ID, Conference_ID, Presentation_Time),\n    FOREIGN KEY (Conference_ID) REFERENCES Conference(Conference_ID),\n    FOREIGN KEY (Speaker_ID) REFERENCES Attendee_Information(Attendee_ID)\n);", "remarks": "CS 2025/1/6 。2025/1/21修改", "assign_to": "cs", "assign_to_round2": "lzm", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a82f", "question": "Consulting Service System Business Requirement Description:\nThe Technical Consulting Department provides multiple technical consulting service projects, each of which involves multiple consultants. Consulting service projects have a Project ID, Name, Start Date, End Date, and Client Name. Consultants have a Consultant ID, Name, Date of Birth, Gender, Phone Number, and Professional Field. Consulting service records need to record the Service ID, Project ID, Consultant ID, Service Date, and Service Content.\n", "answer": "CREATE TABLE project (\n    Client_Name VARCHAR(255),\n    End_Date DATETIME,\n    Name VARCHAR(255),\n    Project_ID INTEGER PRIMARY KEY,\n    Start_Date DATETIME\n);\n\nCREATE TABLE consultant (\n    Consultant_ID INTEGER PRIMARY KEY,\n    Date_of_Birth DATETIME,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Professional_Field VARCHAR(255)\n);\n\nCREATE TABLE service_record (\n    Consultant_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    Service_Content VARCHAR(255),\n    Service_Date DATETIME,\n    Service_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Consultant_ID) REFERENCES consultant(Consultant_ID),\n    FOREIGN KEY (Project_ID) REFERENCES project(Project_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a831", "question": "A rental company has multiple branches, with branch information including name, address, and manager name. Each branch manages a certain number of vehicles. Vehicles have license plate numbers, models, year, and rental rates. Customer information includes name, phone number, and email. Customers can rent vehicles, with each rental recording rental time, return time, and rental fee. The rental company needs to record the income of each branch for performance evaluation.", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone INTEGER\n);\n\nCREATE TABLE Branch (\n    Address VARCHAR(255),\n    Branch_ID INTEGER PRIMARY KEY,\n    Branch_income FLOAT,\n    Manager_name VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Vehicle (\n    Branch_ID INTEGER NOT NULL,\n    License_plate VARCHAR(255),\n    Model VARCHAR(255),\n    Rental_rate FLOAT,\n    Vehicle_ID INTEGER PRIMARY KEY,\n    Year INTEGER,\n    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID)\n);\n\nCREATE TABLE Customer_vehicle_rental (\n    Customer_ID INTEGER NOT NULL,\n    Rental_fee FLOAT,\n    Rental_time DATETIME,\n    Return_time DATETIME,\n    Vehicle_ID INTEGER NOT NULL,\n    PRIMARY KEY (Customer_ID, Vehicle_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Vehicle_ID) REFERENCES Vehicle(Vehicle_ID)\n);", "remarks": "最后的分支机构收入情况被我归类为业务逻辑，在当前schema中没有体现。1/25,分支属性增加分支收入，满足业务需求描述。", "assign_to": "hzb", "assign_to_round2": "szc", "domain": ["租赁和商务服务业", "租赁业"]}
{"id": "67552f0a13602ec03b41a835", "question": "A business services company manages multiple contracts, each contract has a Contract ID, Customer, Service Content, Start Time, End Time, and Contract Amount.\nCustomers have a Customer ID, Name, Phone, and Email.\nThe company needs to record the payment status of contracts, each payment must record the Payment Date and Payment Amount.", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone INTEGER\n);\n\nCREATE TABLE Contract (\n    Contract_Amount FLOAT,\n    Contract_ID INTEGER PRIMARY KEY,\n    Customer_ID INTEGER NOT NULL,\n    End_Time DATETIME,\n    Service_Content VARCHAR(255),\n    Start_Time DATETIME,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Payment_Record (\n    Contract_ID INTEGER NOT NULL,\n    Payment_Amount FLOAT,\n    Payment_Date DATETIME,\n    Payment_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Contract_ID) REFERENCES Contract(Contract_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a83a", "question": "Business service company employee assessment management business requirements description:\n\nA business service company needs to manage employee assessments. Employees have employee numbers, names, genders, phone numbers, and positions. Each assessment needs to record the assessment date, assessment content, and assessment score. The company needs to count the monthly assessment scores of each employee for performance appraisal.", "answer": "CREATE TABLE Employee (\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Assessment_Record (\n    Assessment_Content VARCHAR(255),\n    Assessment_Date DATETIME,\n    Assessment_ID INTEGER PRIMARY KEY,\n    Assessment_Score FLOAT,\n    Employee_ID INTEGER NOT NULL,\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Employee_Monthly_Assessment_Statistics (\n    Average_Score FLOAT,\n    Employee_ID INTEGER NOT NULL,\n    Month DATETIME,\n    PRIMARY KEY (Employee_ID, Month),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "lzm", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a849", "question": "The Credit Card Management System for a credit card company requires managing various types of credit cards and associated transactions:\nThe company issues multiple types of credit cards, each with a unique Card Type Code, Card Type Name, and Annual Fee.\nThe company has several customers, each identified by a unique Customer ID, Name, ID Number, and Contact Number. Each customer can have multiple credit cards.\nEach credit card has a unique Card Number, Card Type Code, Account Opening Date, and Credit Limit. A customer may have several credit cards.\nEvery transaction made using a credit card must record the Amount, Transaction Time, Transaction Location, and Transaction Type.\nThe system also tracks repayments made by customers, including the Repayment Amount and Repayment Time.", "answer": "CREATE TABLE Credit_Card_Type (\n    Annual_Fee FLOAT,\n    Card_Type_Code VARCHAR(255) PRIMARY KEY,\n    Card_Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Contact_Number VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    ID_Number VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Credit_Card (\n    Account_Opening_Date DATETIME,\n    Card_Number VARCHAR(255) PRIMARY KEY,\n    Card_Type_Code VARCHAR(255) NOT NULL,\n    Credit_Limit INTEGER,\n    Customer_ID INTEGER NOT NULL,\n    FOREIGN KEY (Card_Type_Code) REFERENCES Credit_Card_Type(Card_Type_Code),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Transaction (\n    Card_Number VARCHAR(255) NOT NULL,\n    Customer_ID INTEGER NOT NULL,\n    Transaction_Amount FLOAT,\n    Transaction_Location VARCHAR(255),\n    Transaction_Time DATETIME,\n    Transaction_Type VARCHAR(255),\n    PRIMARY KEY (Customer_ID, Card_Number, Transaction_Time),\n    FOREIGN KEY (Card_Number) REFERENCES Credit_Card(Card_Number),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Repayment (\n    Card_Number VARCHAR(255) NOT NULL,\n    Customer_ID INTEGER NOT NULL,\n    Repayment_Amount INTEGER,\n    Repayment_Time DATETIME,\n    PRIMARY KEY (Customer_ID, Card_Number, Repayment_Time),\n    FOREIGN KEY (Card_Number) REFERENCES Credit_Card(Card_Number),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szh2", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a857", "question": "This is a printer device management system. First, it needs to maintain basic information of printer manufacturers (name, person in charge). Each model belongs to a specific manufacturer and includes standard driver configurations for that printer model. For each specific printer device, the system needs to record which model it is, where it is installed, and its network hostname. Some printers may need personalized driver settings in addition to the standard driver configuration.", "answer": "CREATE TABLE Manufacturer (\n    Manufacturer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Person_in_charge VARCHAR(255)\n);\n\nCREATE TABLE Model (\n    Manufacturer_ID INTEGER NOT NULL,\n    Model_ID INTEGER PRIMARY KEY,\n    Model_name VARCHAR(255),\n    FOREIGN KEY (Manufacturer_ID) REFERENCES Manufacturer(Manufacturer_ID)\n);\n\nCREATE TABLE Printer (\n    Additional_driver_information VARCHAR(255),\n    Hostname VARCHAR(255),\n    Model_ID INTEGER NOT NULL,\n    Printer_ID INTEGER PRIMARY KEY,\n    Printer_location VARCHAR(255),\n    FOREIGN KEY (Model_ID) REFERENCES Model(Model_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "lzm", "domain": ["制造业", "计算机、通信和其他电子设备制造业"]}
{"id": "67552f0a13602ec03b41a873", "question": "Below is the database requirement description for a card management system: The system includes cards, card collections, and a user card exchange feature. Cards possess Attributes such as name, type, artist, effect, power, intelligence, and endurance, and can belong to one or more card collections. Users can manage personal information, including username, password, email, and phone number, and can exchange cards. Each exchange record includes the user IDs of both parties, exchange time, and the exchanged card ID. The database design of the system includes multiple entities such as \"Card\" (Card ID, Card Name, Card Type, Card Artist, Card Effect, Card Power, Card Intelligence, Card Endurance),\n\"Card Collection\" (Collection ID, Collection Name),\n\"User\" (User ID, Username, Password, Email, Phone Number), and relational tables \"Card Collection Association\" (Card ID, Collection ID, Collection Collection Number, Card Rarity) and \"User Exchange Card\" (User 1 ID, User 2 ID, Exchange Time, Exchanged Card ID). These tables are related through Foreign key to ensure the integrity of the system.\n", "answer": "CREATE TABLE Card (\n    Card_Artist VARCHAR(255),\n    Card_Effect VARCHAR(255),\n    Card_Endurance INTEGER,\n    Card_ID INTEGER PRIMARY KEY,\n    Card_Intelligence INTEGER,\n    Card_Name VARCHAR(255),\n    Card_Power INTEGER,\n    Card_Type VARCHAR(255)\n);\n\nCREATE TABLE Card_Collection (\n    Collection_ID INTEGER PRIMARY KEY,\n    Collection_Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Phone INTEGER,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Card_Collection_Association (\n    Card_ID INTEGER NOT NULL,\n    Card_Rarity VARCHAR(255),\n    Collection_ID INTEGER NOT NULL,\n    Collection_Number INTEGER,\n    PRIMARY KEY (Card_ID, Collection_ID),\n    FOREIGN KEY (Card_ID) REFERENCES Card(Card_ID),\n    FOREIGN KEY (Collection_ID) REFERENCES Card_Collection(Collection_ID)\n);\n\nCREATE TABLE User_Card_Exchange (\n    Exchange_Time DATETIME,\n    Exchanged_Card_ID INTEGER NOT NULL,\n    User_1_ID INTEGER NOT NULL,\n    User_2_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_1_ID, User_2_ID, Exchange_Time),\n    FOREIGN KEY (Exchanged_Card_ID) REFERENCES Card(Card_ID),\n    FOREIGN KEY (User_1_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (User_2_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a875", "question": "This is an e-commerce system used to manage product information, order information, as well as related tax and geographic location data. The system allows adding, editing, and deleting product information, including product title, type, brand, price, image link, and click count. Multiple descriptions can be added to each product, including description content and type.\n\nThe system also handles address management, including postal codes, states, and city information, enabling users to select addresses conveniently when placing orders. Tax rates are recorded based on different postal codes and regions to ensure accurate tax calculations.\n\nThe system records users’ order information, including order price, tax, total price, order date, customers’ personal information, address information, payment method, and shipping method. It keeps track of products and quantities in each order, supporting detailed query and management of orders.\n\nBy analyzing product click counts, the system helps identify user interests and behavior, providing data support for marketing strategies.", "answer": "CREATE TABLE Product (\n    Brand VARCHAR(255),\n    Click_Count INTEGER,\n    Image_Link VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Title VARCHAR(255),\n    Product_Type VARCHAR(255)\n);\n\nCREATE TABLE Address (\n    City VARCHAR(255),\n    Postal_Code INTEGER PRIMARY KEY,\n    State VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number INTEGER\n);\n\nCREATE TABLE Product_Description (\n    Description_Content VARCHAR(255),\n    Description_ID INTEGER PRIMARY KEY,\n    Description_Type VARCHAR(255),\n    Product_ID INTEGER NOT NULL,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Tax_Rate (\n    Postal_Code INTEGER NOT NULL,\n    Tax_Rate FLOAT,\n    Tax_Rate_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Postal_Code) REFERENCES Address(Postal_Code)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Price FLOAT,\n    Payment_Method VARCHAR(255),\n    Postal_Code INTEGER NOT NULL,\n    Shipping_Method VARCHAR(255),\n    Tax FLOAT,\n    Total_Price FLOAT,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Postal_Code) REFERENCES Address(Postal_Code)\n);\n\nCREATE TABLE Order_Detail (\n    Detail_ID INTEGER PRIMARY KEY,\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "lzm", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a888", "question": "The retail and wholesale industry requires efficient management systems to replace manual processes, in order to support business growth and meet increasing management needs. An effective management system can help businesses better organize customer, supplier, product, and sales records, improve work efficiency, reduce human errors, enhance customer satisfaction, and optimize inventory management and financial accounting. A small-scale retail or wholesale management system can be used to manage customer information, supplier information, product information, and sales records.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Responsible_Person_Name VARCHAR(255),\n    Responsible_Person_Phone VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Stock FLOAT,\n    Supplier_ID INTEGER,\n    Unit_Price FLOAT\n);\n\nCREATE TABLE Product_Purchase (\n    Product_ID INTEGER NOT NULL,\n    Purchase_Price FLOAT,\n    Purchase_Quantity INTEGER,\n    Purchase_Time DATETIME,\n    Supplier_ID INTEGER NOT NULL,\n    Total_Purchase_Price FLOAT,\n    PRIMARY KEY (Supplier_ID, Product_ID, Purchase_Time),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Sales_Record (\n    Customer_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Sale_Price FLOAT,\n    Sale_Quantity INTEGER,\n    Sale_Time DATETIME,\n    Total_Sale_Price FLOAT,\n    PRIMARY KEY (Product_ID, Customer_ID, Sale_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "CS 2025/1/7", "assign_to": "cs", "assign_to_round2": "lzm", "domain": ["批发和零售业", "批发业"]}
{"id": "67552f0a13602ec03b41a88e", "question": "The company plans to develop a recipe management system to record and manage recipes and related information.\nThe system shall support adding, modifying, and deleting recipes, recording recipe descriptions and images, and adding detailed preparation steps for each recipe.\nAt the same time, the system shall support defining and managing recipe types, such as main dishes and desserts, to facilitate categorization and retrieval.\nThe ingredient management function shall support adding, modifying, and deleting ingredients, recording ingredient descriptions and images, and associating required ingredients and their quantities with each recipe.\nThe system shall also provide query functionality, supporting querying recipes based on conditions such as type and ingredients, and viewing detailed recipe information, including steps and ingredients.", "answer": "CREATE TABLE Recipe_Type_Table (\n    Description VARCHAR(255),\n    Name VARCHAR(255),\n    Type_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Ingredient_Table (\n    Description VARCHAR(255),\n    Image VARCHAR(255),\n    Ingredient_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Recipe_Table (\n    Description VARCHAR(255),\n    Image VARCHAR(255),\n    Name VARCHAR(255),\n    Recipe_ID INTEGER PRIMARY KEY,\n    Steps BLOB,\n    Type_ID INTEGER NOT NULL,\n    FOREIGN KEY (Type_ID) REFERENCES Recipe_Type_Table(Type_ID)\n);\n\nCREATE TABLE Recipe_and_Ingredient_Relationship_Table (\n    Ingredient_ID INTEGER NOT NULL,\n    Quantity FLOAT,\n    Recipe_ID INTEGER NOT NULL,\n    PRIMARY KEY (Recipe_ID, Ingredient_ID),\n    FOREIGN KEY (Ingredient_ID) REFERENCES Ingredient_Table(Ingredient_ID),\n    FOREIGN KEY (Recipe_ID) REFERENCES Recipe_Table(Recipe_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a890", "question": "This is a role management system in a role-playing game. In the game world, each creature can play different roles, such as warrior, mage, merchant, etc. Each role has its unique abilities and permissions that determine what actions they can perform. The system supports setting up multiple different role types in the game, each with its unique positioning and characteristics, and can add or adjust role types according to game needs. Each role has its specific range of behavioral capabilities, for example, warriors can fight and defend, mages can cast spells and heal, merchants can trade and craft items. By clearly defining what each role can do, the game's balance is maintained. Creatures in the game (including player characters and NPCs) can obtain different role identities. The system manages various permissions in the game through the role system, ensuring that creatures can only perform actions allowed by their roles, preventing unauthorized actions in the game.", "answer": "CREATE TABLE Role (\n    Role_ID INTEGER PRIMARY KEY,\n    Role_capability_description VARCHAR(255),\n    Role_name VARCHAR(255)\n);\n\nCREATE TABLE Permission (\n    Permission_ID INTEGER PRIMARY KEY,\n    Permission_content VARCHAR(255)\n);\n\nCREATE TABLE Creature (\n    Creature_ID INTEGER PRIMARY KEY,\n    Creature_name VARCHAR(255),\n    Creature_type VARCHAR(255),\n    Role_ID INTEGER NOT NULL,\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);\n\nCREATE TABLE Role_permission (\n    Is_enabled BOOL,\n    Permission_ID INTEGER NOT NULL,\n    Role_ID INTEGER NOT NULL,\n    PRIMARY KEY (Role_ID, Permission_ID),\n    FOREIGN KEY (Permission_ID) REFERENCES Permission(Permission_ID),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "lzm", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a8a6", "question": "Design and implement a database management system for an enterprise-level natural language processing (NLP) platform, which shall support:\n\nCompany management (store basic company information, authorization tokens and their hash values, record creation and modification timestamps),      \n\nUser management (store detailed user information, password salt values and their hash values, manage permissions and record creation and modification timestamps),\n\nRequest processing log recording (store request ID, user ID, status, timestamp, request data, compression results and probe information),\n\nand User feedback management (store rating, comments and creation timestamp).", "answer": "CREATE TABLE Company (\n    Authorization_Token VARCHAR(255),\n    Company_ID INTEGER PRIMARY KEY,\n    Company_Name VARCHAR(255),\n    Creation_Time DATETIME,\n    Modification_Time DATETIME,\n    Token_Hash_Value INTEGER\n);\n\nCREATE TABLE User (\n    Company_ID INTEGER NOT NULL,\n    Creation_Time DATETIME,\n    Modification_Time DATETIME,\n    Password_Hash_Value INTEGER,\n    Password_Salt_Value VARCHAR(255),\n    Permission_Level VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255),\n    FOREIGN KEY (Company_ID) REFERENCES Company(Company_ID)\n);\n\nCREATE TABLE Request_Log (\n    Compression_Result BLOB,\n    Probe_Information VARCHAR(255),\n    Request_Data VARCHAR(255),\n    Request_ID INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    Timestamp DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Feedback (\n    Comment VARCHAR(255),\n    Creation_Time DATETIME,\n    Feedback_ID INTEGER PRIMARY KEY,\n    Rating FLOAT,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8a9", "question": "The bookstore has several branches, each with a specific location. The bookstore sells various books, each book having categories such as novels, textbooks, etc. A book may belong to multiple categories, which have a Category ID and name. Each book has a price and stock quantity. Customer information includes Customer ID, first name, last name, phone, email, and address. Bookstore customers can place orders to purchase books, with each order recording the Customer ID, Branch ID, Book ID, quantity purchased, and order date.", "answer": "CREATE TABLE Branch (\n    Branch_ID INTEGER PRIMARY KEY,\n    Location VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    First_Name VARCHAR(255),\n    Last_Name VARCHAR(255),\n    Phone INTEGER\n);\n\nCREATE TABLE Category (\n    Category_ID INTEGER PRIMARY KEY,\n    Category_Name VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Book_ID INTEGER PRIMARY KEY,\n    Book_Name VARCHAR(255),\n    Category_ID INTEGER NOT NULL,\n    Price FLOAT,\n    Stock_Quantity INTEGER,\n    FOREIGN KEY (Category_ID) REFERENCES Category(Category_ID)\n);\n\nCREATE TABLE Order (\n    Book_ID INTEGER NOT NULL,\n    Branch_ID INTEGER NOT NULL,\n    Customer_ID INTEGER NOT NULL,\n    Order_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Purchase_Quantity INTEGER,\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a8ae", "question": "This database could be a supply chain management system with the following primary functions:\nRegion and Country Management: Manage the geographic location information of suppliers and customers, including detailed descriptions of regions and countries. Regions include region names and descriptions, while countries include country names and descriptions.\nProduct Information Management: Maintain detailed product information such as product name, manufacturer, brand, type, size, and retail price.\nSupplier Management: Manage supplier information, including supplier name, address, associated country, contact phone number, and account balance.\nProduct-Supplier Relationship Management: Manage the supply relationships between products and suppliers, including the quantity of products supplied by suppliers and supply costs.\nCustomer Management: Manage customer information, including customer name, address, associated country, contact phone number, account balance, and market segment.\nOrder Management: Manage customer orders, including order status, total price, order date, priority, and handler. The system also details the products included in each order, including quantity, extended price, discount, tax, return indicator, status, shipment date, committed date, receipt date, shipping instructions, and shipping method.\nEach supplier and customer is associated with a region.", "answer": "CREATE TABLE Country (\n    Country_Description VARCHAR(255),\n    Country_ID INTEGER PRIMARY KEY,\n    Country_Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Brand VARCHAR(255),\n    Manufacturer VARCHAR(255),\n    Name VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Retail_Price FLOAT,\n    Size INTEGER,\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Region (\n    Country_ID INTEGER NOT NULL,\n    Region_Description VARCHAR(255),\n    Region_ID INTEGER PRIMARY KEY,\n    Region_Name VARCHAR(255),\n    FOREIGN KEY (Country_ID) REFERENCES Country(Country_ID)\n);\n\nCREATE TABLE Supplier (\n    Account_Balance FLOAT,\n    Address VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Region_ID INTEGER NOT NULL,\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_Name VARCHAR(255),\n    FOREIGN KEY (Region_ID) REFERENCES Region(Region_ID)\n);\n\nCREATE TABLE Customer (\n    Account_Balance FLOAT,\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Market_Segment VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Region_ID INTEGER NOT NULL,\n    FOREIGN KEY (Region_ID) REFERENCES Region(Region_ID)\n);\n\nCREATE TABLE Supplier_Supplies_Product (\n    Product_ID INTEGER NOT NULL,\n    Supplier_ID INTEGER NOT NULL,\n    Supply_Cost FLOAT,\n    Supply_Quantity INTEGER,\n    PRIMARY KEY (Product_ID, Supplier_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Handler VARCHAR(255),\n    Order_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Priority VARCHAR(255),\n    Total_Price FLOAT,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order_Composed_of_Products (\n    Discount FLOAT,\n    Extended_Price FLOAT,\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Receipt_Date DATETIME,\n    Return_Indicator VARCHAR(255),\n    Shipment_Date DATETIME,\n    Shipping_Instructions VARCHAR(255),\n    Shipping_Method VARCHAR(255),\n    Status VARCHAR(255),\n    Tax FLOAT,\n    PRIMARY KEY (Order_ID, Product_ID, Shipment_Date),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "lzm", "domain": ["生活生产和供应业", "电力、热力生产和供应业"]}
{"id": "67552f0a13602ec03b41a8cc", "question": "The customer management and order processing system aims to effectively record and manage customer personal information, order details, payment information, and logistics status. Through this system, businesses can better understand customer needs, enhance customer experience, and optimize order processing efficiency.\n\nThe system not only helps businesses track each customer's historical orders, payment status, and logistics status but also provides a record of interactions between customers and the business. It offers important data support for marketing, sales, and customer service teams, helping businesses better perform customer analysis, product recommendations, and customer relationship maintenance.\n\nCustomer management:\n\nManage basic customer information, including name, contact information, address, etc.\nStore customer registration information, consumption habits, etc., to provide data support for subsequent marketing and customer service.\n\nOrder management:\n\nRecord each customer's order information, including order number, order creation time, order status, order total amount, etc.\nTrack the specific product details of each order (including product ID, quantity, price, etc.).\n\nPayment management:\n\nRecord payment information for orders, including payment method, payment time, payment status, etc.\nHandle different payment methods (such as credit card, Alipay, WeChat Pay, etc.).", "answer": "CREATE TABLE Customer_Information (\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY NOT NULL,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer_Information(Customer_ID)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_Content VARCHAR(255),\n    Order_Creation_Time DATETIME,\n    Order_ID INTEGER PRIMARY KEY NOT NULL,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer_Information(Customer_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);\n\nCREATE TABLE Customer_Payment_Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Payment_Amount FLOAT,\n    Payment_Method VARCHAR(255),\n    Payment_Status VARCHAR(255),\n    Payment_Time DATETIME,\n    PRIMARY KEY (Customer_ID, Order_ID, Payment_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer_Information(Customer_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "CS 2025/1/7 可能有点太简单？ 合理", "assign_to": "cs", "assign_to_round2": "szh", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a8f9", "question": "Experience Management System Functional Requirements Description:\n\nUser Management: \nEach user of the Experience Management System is identified uniquely by a User ID. Additionally, each user possesses a username, a login password, a contact email, a phone number, and a registration time for efficient user management.\n\nExperience Record Management:\nThe system is capable of documenting detailed information about various experiences, including descriptions and code content. Each experience record also features a unique Experience ID (Primary key) for identification purposes.\n\nUser Activity Logging:\nEach experience record logs its creator's information, including the creator's User ID, as well as creation and modification times. This information aids in tracking the operation history of experience records and supports auditing functions.\n\nStatus Management:\nThe active status of each experience record is indicated by a status field, where a status value of 'F' signifies that the record is valid. This field allows the system to determine whether an experience record is in a valid status, and thus decide whether to display or use the record.\n\nMultilingual Support:\nThe character set and sorting rules of the table support Spanish, ensuring that the system can accurately store, retrieve, and display information of experience records in a multilingual environment.\n", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Experience (\n    Code_Content VARCHAR(255),\n    Creation_Time DATETIME,\n    Creator_ID INTEGER NOT NULL,\n    Experience_Description VARCHAR(255),\n    Experience_ID INTEGER PRIMARY KEY,\n    Language VARCHAR(255),\n    Modification_Time DATETIME,\n    Status VARCHAR(255),\n    FOREIGN KEY (Creator_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a903", "question": "The scholarship management system contains multiple scholarship entries, each including a Scholarship ID, amount, application requirements, deadline, description, link, and name. The system allows user registrations, with user information comprising User ID, activation token, email, password hash, and username. Users can 'like' the scholarships they are interested in to record their preferences toward specific scholarships. Additionally, scholarships can be managed under different categories, with category information including Category ID and name; each scholarship may be associated with multiple categories. The association between users and scholarships is facilitated through a 'likes' table, which records which users have liked which scholarships.\n", "answer": "CREATE TABLE User (\n    Activation_Token VARCHAR(255),\n    Email VARCHAR(255),\n    Password_Hash VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Scholarship (\n    Application_Requirements VARCHAR(255),\n    Deadline DATETIME,\n    Description VARCHAR(255),\n    Link VARCHAR(255),\n    Scholarship_Amount FLOAT,\n    Scholarship_ID INTEGER PRIMARY KEY,\n    Scholarship_Name VARCHAR(255)\n);\n\nCREATE TABLE Category (\n    Category_ID INTEGER PRIMARY KEY,\n    Category_Name VARCHAR(255)\n);\n\nCREATE TABLE User_Likes_Scholarship (\n    Like_Time DATETIME,\n    Scholarship_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Scholarship_ID, Like_Time),\n    FOREIGN KEY (Scholarship_ID) REFERENCES Scholarship(Scholarship_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Scholarship_Category (\n    Category_ID INTEGER NOT NULL,\n    Scholarship_ID INTEGER NOT NULL,\n    PRIMARY KEY (Scholarship_ID, Category_ID),\n    FOREIGN KEY (Category_ID) REFERENCES Category(Category_ID),\n    FOREIGN KEY (Scholarship_ID) REFERENCES Scholarship(Scholarship_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "lzm", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a90d", "question": "This database is designed for an e-commerce system, which manages customer information, address details, product information, and order processing. The main functions include:\n1.Customer Management: Stores and manages the basic information of customers, such as customer ID, first name, last name, email, birthday, etc. It also tracks the creation, update, and deletion (soft delete) timestamps.\n2.Address Management: Stores address details for customers, including address line, postal code, city, state, and country. It distinguishes between billing and shipping addresses and tracks the creation, update, and deletion (soft delete) timestamps.\n3.Product Management: Manages product details, such as product ID, name, code, price, and description. It also records the creation, update, and deletion (soft delete) timestamps.\n4.Order Management: Stores order information, including order ID and customer ID. It also tracks the creation, update, and deletion (soft delete) timestamps. Orders can have a many-to-many relationship with products, meaning an order can contain multiple products, and a product can appear in multiple orders.", "answer": "CREATE TABLE Customer (\n    Birthday DATETIME,\n    Creation_Time DATETIME,\n    Customer_ID INTEGER PRIMARY KEY,\n    Deletion_Time DATETIME,\n    Email VARCHAR(255),\n    First_Name VARCHAR(255),\n    Last_Name VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Product (\n    Code VARCHAR(255),\n    Creation_Time DATETIME,\n    Deletion_Time DATETIME,\n    Description VARCHAR(255),\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Update_Time DATETIME\n);\n\nCREATE TABLE Address (\n    Address_ID INTEGER PRIMARY KEY,\n    Address_Line VARCHAR(255),\n    City VARCHAR(255),\n    Country VARCHAR(255),\n    Creation_Time DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    Deletion_Time DATETIME,\n    Postal_Code VARCHAR(255),\n    State VARCHAR(255),\n    Type VARCHAR(255),\n    Update_Time DATETIME,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order (\n    Creation_Time DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    Deletion_Time DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Update_Time DATETIME,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order_and_Product (\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "lzm", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a911", "question": "The advertising management system requires the management of multi-level tag information. Each tag includes a primary category and a secondary category, with corresponding numerical codes assigned to each. The system needs to track the creation time and update time for each tag to facilitate subsequent queries and statistics. Additionally, the system should use a status field to indicate whether a tag is active. The system should store the tag's categories, codes, creation and update times, as well as the tag's status. It should ensure support for quick queries based on categories and codes.", "answer": "CREATE TABLE Category (\n    Category_Code VARCHAR(255) PRIMARY KEY,\n    Category_Name VARCHAR(255)\n);\n\nCREATE TABLE Tag (\n    Creation_Time DATETIME,\n    Primary_Category VARCHAR(255) NOT NULL,\n    Secondary_Category VARCHAR(255) NOT NULL,\n    Status VARCHAR(255),\n    Tag_ID INTEGER PRIMARY KEY,\n    Update_Time DATETIME,\n    FOREIGN KEY (Primary_Category) REFERENCES Category(Category_Code),\n    FOREIGN KEY (Secondary_Category) REFERENCES Category(Category_Code)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "szh", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a91b", "question": "The system is used to manage users' digital product purchases, subscriptions, and refunds across multiple platforms (such as Android and iOS), primarily for digital content and service payment, subscription management, and financial tracking. The system is able to manage user information, storing user ID, username, email, phone number, registration time, and device platform. The system includes management of purchase records, including order number, purchase date, price, currency, and other details; management of receipts, containing receipt vouchers, data, and hash values for each purchase; and product management, supporting product inventory units, prices, and currencies for different platforms (Android and iOS). At the same time, the system also handles refunds, trial periods, promotional periods, subscription validity and its cycle types, ensuring accurate tracking of each user's purchase and subscription status. In addition, it supports cross-platform and sandbox environment purchase records and manages renewals and changes by associating purchase records, ensuring data consistency and integrity.\n", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Platform VARCHAR(255),\n    Registration_Time DATETIME,\n    Update_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Creation_Time DATETIME,\n    Currency VARCHAR(255),\n    Description VARCHAR(255),\n    Inventory_Unit VARCHAR(255),\n    Platform VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Receipt (\n    Creation_Time DATETIME,\n    Hash_Value VARCHAR(255),\n    Receipt_Data VARCHAR(255),\n    Receipt_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE User_Subscribed_Products (\n    End_Date DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Promotional_Period VARCHAR(255),\n    Renewal_Status VARCHAR(255),\n    Start_Date DATETIME,\n    Subscription_Status VARCHAR(255),\n    Subscription_Time DATETIME,\n    Trial_Period VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    Validity_Type VARCHAR(255),\n    PRIMARY KEY (User_ID, Product_ID, Subscription_Time),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Refunded_Products (\n    Product_ID INTEGER NOT NULL,\n    Refund_Amount FLOAT,\n    Refund_Date DATETIME,\n    Refund_Status VARCHAR(255),\n    Refund_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Product_ID, Refund_Time),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Purchased_Products (\n    Currency VARCHAR(255),\n    Hash_Value VARCHAR(255),\n    Order_Number VARCHAR(255),\n    Product_ID INTEGER NOT NULL,\n    Purchase_Platform VARCHAR(255),\n    Purchase_Price FLOAT,\n    Purchase_Time DATETIME,\n    Receipt_ID INTEGER NOT NULL,\n    Refund_Status VARCHAR(255),\n    Subscription_Status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Product_ID, Order_Number),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Receipt_ID) REFERENCES Receipt(Receipt_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a935", "question": "The following is a business requirement description for a surveillance database system:\n\nThe system is used to manage cameras, video recordings, alarms, and events. System functions include camera management, video recording management, alarm and event recording, as well as real-time monitoring and historical query. The camera management module is responsible for storing camera titles, locations, RTSP stream addresses, and real-time video stream paths, while also recording camera analysis times. The video recording function includes storing the video file path, cover path, start time, and duration for each camera. The alarm management module records alarm information in videos, such as alarm type, level, start and end times, and allows quick retrieval of associated alarms via video ID. The event recording function records specific events in videos through coordinates and dimensions, as well as event type and occurrence time. In addition, the system supports real-time video monitoring via RTSP stream addresses and intelligent analysis based on camera analysis times to generate alarms and event records. With these records, the system supports data analysis functions such as event frequency statistics and alarm type analysis to help security personnel promptly identify and resolve issues. Historical query and security management functions also help trace events and address potential security risks.\n", "answer": "CREATE TABLE Camera (\n    Analysis_Time DATETIME,\n    Camera_ID INTEGER PRIMARY KEY,\n    Location VARCHAR(255),\n    RTSP_Stream_Address VARCHAR(255),\n    Title VARCHAR(255),\n    Video_Stream_Path VARCHAR(255)\n);\n\nCREATE TABLE Video_Recording (\n    Camera_ID INTEGER NOT NULL,\n    Cover_Path VARCHAR(255),\n    Duration VARCHAR(255),\n    Start_Time DATETIME,\n    Video_File_Path VARCHAR(255),\n    Video_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Camera_ID) REFERENCES Camera(Camera_ID)\n);\n\nCREATE TABLE Alarm (\n    Alarm_ID INTEGER PRIMARY KEY,\n    Alarm_Level VARCHAR(255),\n    Alarm_Type VARCHAR(255),\n    End_Time DATETIME,\n    Start_Time DATETIME,\n    Video_ID INTEGER NOT NULL,\n    FOREIGN KEY (Video_ID) REFERENCES Video_Recording(Video_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "lzm", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a967", "question": "This database is a house rental management system that can achieve the following main functions:\n\n1: Management of district and street information: You can add, delete, and modify district and street information to ensure that the geographical classification of house rental information is accurate.\n\n2: House type management: Define different house types, such as single room, whole rental, etc., so that users can choose the right house according to their needs.\n\n3: House information management: Record the detailed information of each house, including the street, type, description and price, etc., so that users can find and understand the details of the house.\n\n4: User management: Manage the user's registration information, including username, password and email, to ensure the information security and privacy of each user.\n\n5: Rental management: Record the user's rental behavior, including the rented house, price, description and rental date, to facilitate tracking of rental status and follow-up services.\n\n6: Query function: Support users to query house information according to conditions such as district, street, house type, etc., and view rental records.\n\n7: Rental record statistics: You can count the rental status of each area, street or house type to provide decision support for managers.", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Area (\n    Area_ID INTEGER PRIMARY KEY,\n    Area_Name VARCHAR(255)\n);\n\nCREATE TABLE House_Type (\n    Type_ID INTEGER PRIMARY KEY,\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Street (\n    Belongs_to_Area_ID INTEGER NOT NULL,\n    Street_ID INTEGER PRIMARY KEY,\n    Street_Name VARCHAR(255),\n    FOREIGN KEY (Belongs_to_Area_ID) REFERENCES Area(Area_ID)\n);\n\nCREATE TABLE House (\n    Belongs_to_Street_ID INTEGER NOT NULL,\n    Description VARCHAR(255),\n    House_ID INTEGER PRIMARY KEY,\n    Price FLOAT,\n    Type_ID INTEGER NOT NULL,\n    FOREIGN KEY (Belongs_to_Street_ID) REFERENCES Street(Street_ID),\n    FOREIGN KEY (Type_ID) REFERENCES House_Type(Type_ID)\n);\n\nCREATE TABLE Lease (\n    Description VARCHAR(255),\n    House_ID INTEGER NOT NULL,\n    Lease_Date DATETIME,\n    Price FLOAT,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, House_ID, Lease_Date),\n    FOREIGN KEY (House_ID) REFERENCES House(House_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "lzm", "domain": ["租赁和商务服务业", "租赁业"]}
{"id": "67552f0a13602ec03b41a9a8", "question": "The blog management system requires the recording of information for both platform users and administrators, and allows users to publish articles, post comments, and reply to comments. The system must be able to distinguish between regular users and administrators, and store the status (such as pending review, reviewed) and publication time for each article, comment, and reply. The system shall support viewing the number of reads and likes on articles, and be capable of tracking which articles, comments, or replies a user has made at what times.", "answer": "CREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255),\n    User_Permissions VARCHAR(255)\n);\n\nCREATE TABLE Article (\n    Article_ID INTEGER PRIMARY KEY,\n    Number_of_Likes INTEGER,\n    Number_of_Reads INTEGER,\n    Publication_Time DATETIME,\n    Publishing_User INTEGER,\n    Status VARCHAR(255)\n);\n\nCREATE TABLE Comment (\n    Comment_ID INTEGER PRIMARY KEY,\n    Publication_Time DATETIME,\n    Publishing_User INTEGER,\n    Status VARCHAR(255)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a9b3", "question": "The database is a naval fleet management system. Its main functions are to manage information about ships, crew members, fleets, mission execution, and supplies. The system helps the navy efficiently manage the daily operations of the fleet, including ship management, crew task scheduling, fleet resource allocation, and ship supply status. The database contains the following functions:\n\nShip Management: records basic information about ships.\nFields: Ship ID (Primary key), Name, Type, Fleet ID, Construction Date, Service Status\n\nCrew Member Management: records basic information about crew members.\nFields: Crew Member ID (Primary key), Name, Gender, Position, Fleet ID, Phone Number, Length of Service\n\nFleet Management: records basic information about fleets.\nFields: Fleet ID (Primary key), Name, Commander ID (Foreign key), Base\n\nFleet Mission Execution Management: records the status of missions executed by crew members and fleets.\nFields: Crew Member ID (Foreign key), Fleet ID (Foreign key), Execution Time, Remarks, Is Crew Member Primary Responsible\n\nShip Supply Management: records the supply status of ships.\nFields: Responsible Supply Crew Member ID (Foreign key), Ship ID (Foreign key), Supply Time, Supply Items, Supply Quantity", "answer": "CREATE TABLE Ship (\n    Construction_Date DATETIME,\n    Fleet_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Service_Status VARCHAR(255),\n    Ship_ID INTEGER PRIMARY KEY,\n    Type VARCHAR(255),\n    FOREIGN KEY (Fleet_ID) REFERENCES Fleet(Fleet_ID)\n);\n\nCREATE TABLE Crew_Member (\n    Crew_Member_ID INTEGER PRIMARY KEY,\n    Fleet_ID INTEGER NOT NULL,\n    Gender VARCHAR(255),\n    Length_of_Service INTEGER,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Fleet_ID) REFERENCES Fleet(Fleet_ID)\n);\n\nCREATE TABLE Fleet (\n    Base VARCHAR(255),\n    Commander_ID INTEGER NOT NULL,\n    Fleet_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    FOREIGN KEY (Commander_ID) REFERENCES Crew_Member(Crew_Member_ID)\n);\n\nCREATE TABLE Fleet_Mission_Execution (\n    Crew_Member_ID INTEGER NOT NULL,\n    Execution_Time DATETIME,\n    Fleet_ID INTEGER NOT NULL,\n    Is_Crew_Member_Primary_Responsible BOOL,\n    Remarks VARCHAR(255),\n    PRIMARY KEY (Crew_Member_ID, Fleet_ID, Execution_Time),\n    FOREIGN KEY (Crew_Member_ID) REFERENCES Crew_Member(Crew_Member_ID),\n    FOREIGN KEY (Fleet_ID) REFERENCES Fleet(Fleet_ID)\n);\n\nCREATE TABLE Ship_Supply (\n    Responsible_Supply_Crew_Member_ID INTEGER NOT NULL,\n    Ship_ID INTEGER NOT NULL,\n    Supply_Items VARCHAR(255),\n    Supply_Quantity INTEGER,\n    Supply_Time DATETIME,\n    PRIMARY KEY (Responsible_Supply_Crew_Member_ID, Ship_ID, Supply_Time),\n    FOREIGN KEY (Responsible_Supply_Crew_Member_ID) REFERENCES Crew_Member(Crew_Member_ID),\n    FOREIGN KEY (Ship_ID) REFERENCES Ship(Ship_ID)\n);", "remarks": "CS 2025/1/16", "assign_to": "cs", "assign_to_round2": "lzm", "domain": ["公共管理、社会保障和社会组织", "国家机构"]}
{"id": "67552f0a13602ec03b41a9b5", "question": "This is a student course selection system. For student information management, the system maintains students' basic information, including student ID, name, gender, date of birth, class, and department. For course information management, the system records course basic information, including course name, credits, and teacher. For course selection management, the system supports students in selecting courses and records credits and scores.\n", "answer": "CREATE TABLE Student (\n    Class VARCHAR(255),\n    Date_of_birth DATETIME,\n    Department VARCHAR(255),\n    Gender BOOL,\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Course (\n    Course_ID INTEGER PRIMARY KEY,\n    Course_name VARCHAR(255),\n    Credits FLOAT,\n    Teacher VARCHAR(255)\n);\n\nCREATE TABLE Student_course_selection (\n    Course_ID INTEGER NOT NULL,\n    Credits FLOAT,\n    Score FLOAT,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "lzm", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9be", "question": "The database design for a membership-based mall is as follows: The system includes tables for employees, orders, members, and system administrators. The employee table records basic information about employees, including Employee ID, Username, and Password. The order table records detailed information about orders, including Order ID, Order Price, Order Time, Member ID, and Employee ID. The member table records basic information about members, including Member ID, Username, Password, Balance, Phone Number, Birth Month and Year, and Gender. The system administrator table records basic information about system administrators, including Administrator ID, Username, and Password. The system uses these tables to manage information about employees, orders, members, and system administrators, in order to facilitate the operation and management functions of the mall.", "answer": "CREATE TABLE Employee (\n    Employee_ID INTEGER PRIMARY KEY,\n    Password VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Member (\n    Balance BOOL,\n    Birth_Month_and_Year DATETIME,\n    Gender VARCHAR(255),\n    Member_ID INTEGER PRIMARY KEY,\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Administrator (\n    Administrator_ID INTEGER PRIMARY KEY,\n    Password VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Employee_ID INTEGER NOT NULL,\n    Member_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Time DATETIME,\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a9d5", "question": "A library management system needs to record the following information:\nThe library has many readers, and the reader information includes the reader number, name, email, phone number, registration date and the last information update time.\nThe library's collection includes the book number, title, author, ISBN number, publication date, current inventory, book classification and the latest data update time.\nThe borrowing process is: after registering, readers can query the book inventory through the system, record the borrowing date for each borrowing, update the return date when returning, and automatically calculate the overdue fine amount if the return is overdue.\nThe same reader can borrow different books multiple times, and each book is allowed to be borrowed by different readers in a cycle. Each borrowing is allowed to be renewed three times and the renewal number is recorded.\nThe system needs to update the book inventory status in real time. When a book is borrowed, the inventory is deducted, and the inventory is restored after the book is returned. The latest modification time of the corresponding data must be updated for each operation.", "answer": "CREATE TABLE Reader (\n    Reader_Email VARCHAR(255),\n    Reader_ID INTEGER PRIMARY KEY,\n    Reader_Name VARCHAR(255),\n    Reader_Phone VARCHAR(255),\n    Registration_Date DATETIME,\n    Update_Time DATETIME\n);\n\nCREATE TABLE Book (\n    Book_Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Book_ISBN VARCHAR(255),\n    Book_Publication_Date DATETIME,\n    Book_Stock INTEGER,\n    Book_Title VARCHAR(255),\n    Book_Type VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Borrowing (\n    Book_ID INTEGER NOT NULL,\n    Borrow_Date DATETIME,\n    Overdue_Fine FLOAT,\n    Reader_ID INTEGER NOT NULL,\n    Renewal_Count INTEGER,\n    Return_Date DATETIME,\n    PRIMARY KEY (Reader_ID, Book_ID, Borrow_Date),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Reader_ID) REFERENCES Reader(Reader_ID)\n);", "remarks": "dyq，重写需求描述，删除借阅编号，修改借阅记录主键，更新对应实体、关系、schema", "assign_to": "szh", "assign_to_round2": "dyq", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9f1", "question": "System Requirements Function Description\n\nAccording to the provided file content, Weishu is a novel reading system based on WeChat applet, and the main functional modules are as follows:\n\n1: My bookshelf: Users can add their favorite novels to the bookshelf for subsequent reading.\n\n2: Bookstore: Provides browsing and search functions for various novels, and users can find their favorite novels.\n\n3: Personal Center: Users can view and manage personal information, such as changing passwords, viewing bookshelves, etc.\n\n4: H5 reader: Provides online reading function and supports reading novel content directly in WeChat applet.\n\n5: Login and registration: Users can manage their accounts through registration and login functions.\n\n6: Book reviews: Users can comment on novels and share their reading experience.\n\n7: Book rankings: Display popular novel rankings to help users discover popular books.", "answer": "CREATE TABLE User (\n    Creation_time DATETIME,\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Update_time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Novel (\n    Author VARCHAR(255),\n    Creation_time DATETIME,\n    ISBN VARCHAR(255),\n    Novel_ID INTEGER PRIMARY KEY,\n    Novel_description VARCHAR(255),\n    Novel_title VARCHAR(255),\n    Publication_date DATETIME,\n    Update_time DATETIME\n);\n\nCREATE TABLE Bookshelf (\n    Add_time DATETIME,\n    Bookshelf_ID INTEGER PRIMARY KEY,\n    Novel_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Novel_ID) REFERENCES Novel(Novel_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Book_review (\n    Book_review_ID INTEGER PRIMARY KEY,\n    Creation_time DATETIME,\n    Novel_ID INTEGER NOT NULL,\n    Rating FLOAT,\n    Review_content VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Novel_ID) REFERENCES Novel(Novel_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Novel_added_to_Bookshelf (\n    Add_time DATETIME,\n    Bookshelf_ID INTEGER NOT NULL,\n    Novel_ID INTEGER NOT NULL,\n    PRIMARY KEY (Novel_ID, Bookshelf_ID, Add_time),\n    FOREIGN KEY (Bookshelf_ID) REFERENCES Bookshelf(Bookshelf_ID),\n    FOREIGN KEY (Novel_ID) REFERENCES Novel(Novel_ID)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "lzm", "domain": ["文化、体育和娱乐业", "新闻和出版业"]}
{"id": "67552f0a13602ec03b41a9f5", "question": "System Requirements Function Description\n\n1. Front-end Function\nFilm and TV Information Browsing: Users can browse the latest movie and TV series information\nFilm and TV Reviews: Users can comment on movies and TV series\nFilm and TV Sharing: Users can share their favorite movies and TV series\nFilm and TV Rankings: Users can view the most popular movie and TV series rankings\nFilm and TV Search: Users can search for movies and TV series of interest by keywords\nCrew Information Query: Users can query the crew information of movies and TV series, such as directors, actors, etc.\nUser Login: Users can register and log in to the website to enjoy more personalized services\nCrew Login: Crew members can register and log in to the website to publish and manage relevant information\nUser Registration: Users can register to become website members\nCrew Registration: Crew members can register to become website members\n\n2. Backstage functions\nGeneral user management: Administrators can manage the account information of registered users, such as adding, deleting, and modifying user information\nCrew information management: Administrators can manage the account information of registered crews, such as adding, deleting, and modifying crew information\nAdministrator information management: Administrators can manage their own account information, such as changing passwords, viewing logs, etc.\nNews information management: Administrators can publish, edit, and delete news information\nNews column management: Administrators can add, delete, and modify news columns\nFilm and television information publishing management: Administrators can publish, edit, and delete information about movies and TV series\nComment information management: Administrators can view, review, and delete user comment information\nFilm and television ranking management: Administrators can adjust the ranking rules for movies and TV series\nSystem maintenance: Administrators can perform basic system maintenance, such as backing up the database, updating the system, etc.", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Login_Status VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Crew (\n    Crew_ID INTEGER PRIMARY KEY,\n    Crew_Information VARCHAR(255),\n    Crew_Members VARCHAR(255),\n    Crew_Name VARCHAR(255),\n    Login_Status BOOL\n);\n\nCREATE TABLE Film_Information (\n    Information_Content VARCHAR(255),\n    Information_ID INTEGER PRIMARY KEY,\n    Information_Title VARCHAR(255),\n    Publish_Time DATETIME,\n    Publisher VARCHAR(255)\n);\n\nCREATE TABLE Comment (\n    Comment_Content VARCHAR(255),\n    Comment_Time DATETIME,\n    Film_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Information_ID, User_ID, Comment_Time),\n    FOREIGN KEY (Film_ID) REFERENCES Film_Information(Information_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Film_Ranking (\n    Film_ID INTEGER NOT NULL,\n    Ranking_ID INTEGER PRIMARY KEY,\n    Ranking_Position VARCHAR(255),\n    Update_Time DATETIME,\n    FOREIGN KEY (Film_ID) REFERENCES Film_Information(Information_ID)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "lzm", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a9f9", "question": "The system includes the following functionalities:\n1.Registration and Login Functionality\nNew User Registration: Teachers and students can register new accounts. The system must verify the uniqueness of student ID or teacher ID.\nUser Login: After registration, users can log in to the system. The system must authenticate the user’s identity to prevent impersonation.\nUser Information: Each user has a unique user ID, username, password, student number (or teacher ID), role, registration time, and last login time.\n2.Sign-in Functionality\nStudent Sign-in: Students can sign in online. The system uses IP address and time constraints to prevent impersonation and multiple sign-ins. The system records the current sign-in status.\nTeacher Control Sign-in: Teachers can start and stop sign-in through control flags, view sign-in details. The control flag includes flag ID, teacher ID, sign-in start time, and end time.\n3.Statistics Functionality\nStudent Attendance Statistics: The system records each sign-in event and uses the total sign-in count to calculate the student’s regular performance.\n4.Class and Course Management\nClass Information: Each student’s class includes class name, major, and grade.\nCourse Information: Each course includes course name and description.\nRelationships: Each class has multiple students, and each course is taught by a teacher. ", "answer": "CREATE TABLE User (\n    Last_Login_Time DATETIME,\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    Role VARCHAR(255),\n    Student_ID INTEGER,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Class (\n    Class_ID INTEGER PRIMARY KEY,\n    Class_Name VARCHAR(255),\n    Grade FLOAT,\n    Major VARCHAR(255)\n);\n\nCREATE TABLE Sign-in (\n    IP_Address VARCHAR(255),\n    Sign-in_Status VARCHAR(255),\n    Sign-in_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Sign-in_Time),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Course (\n    Course_Description VARCHAR(255),\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Name VARCHAR(255),\n    Teacher_ID INTEGER NOT NULL,\n    FOREIGN KEY (Teacher_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Control_Flag (\n    Sign-in_End_Time DATETIME,\n    Sign-in_Start_Time DATETIME,\n    Teacher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Teacher_ID, Sign-in_Start_Time),\n    FOREIGN KEY (Teacher_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Grade (\n    Course_ID INTEGER NOT NULL,\n    Final_Grade FLOAT,\n    Grade_ID INTEGER PRIMARY KEY,\n    Regular_Grade FLOAT,\n    Student_ID INTEGER NOT NULL,\n    Total_Grade FLOAT,\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES User(User_ID)\n);", "remarks": "dyq，删除统计表，删除签到ID，删除标识ID，更新对应实体、关系、schema", "assign_to": "gcc", "assign_to_round2": "dyq", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9fb", "question": "The system is a user-article sharing forum with the following features:\n1.User Interaction Features:\nEach user has a unique User ID, Username, Password, Registration Time, Last Login Time, and Role.\nA user can participate in multiple activities, engage in video interviews, and comment or recommend books and articles.\n2.Content Management:\nThe system manages several books and articles.\nBook Information: Each book has a Book ID, Title, Author, and Description.\nArticle Information: Each article has an Article ID, Title, Content, Author, and Publish Time.\nActivity Information: Each activity has an Activity ID, Activity Name, Activity Time, and Description.\nVideo Interview Information: Each video interview has a Video ID, Title, Video Link, and Publish Time.\n3.Activity Management:\nThe system can organize source code reading activities, record activity names, times, and descriptions.\nUsers can participate in multiple activities.\nThe system also handles lottery activities, recording winner information and awarding gifts.", "answer": "CREATE TABLE User (\n    Last_Login_Time DATETIME,\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Article (\n    Article_ID INTEGER PRIMARY KEY,\n    Author VARCHAR(255),\n    Content VARCHAR(255),\n    Publish_Time DATETIME,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_Description VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Activity (\n    Activity_Description VARCHAR(255),\n    Activity_ID INTEGER PRIMARY KEY,\n    Activity_Name VARCHAR(255),\n    Activity_Time DATETIME\n);\n\nCREATE TABLE Video_Interview (\n    Publish_Time DATETIME,\n    Title VARCHAR(255),\n    Video_ID INTEGER PRIMARY KEY,\n    Video_Link VARCHAR(255)\n);\n\nCREATE TABLE User_Comments (\n    Article_ID INTEGER NOT NULL,\n    Comment_Content VARCHAR(255),\n    Comment_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Article_ID),\n    FOREIGN KEY (Article_ID) REFERENCES Article(Article_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Book_Recommendation (\n    Book_ID INTEGER NOT NULL,\n    Book_Review VARCHAR(255),\n    Recommendation_Reason VARCHAR(255),\n    Recommendation_Time DATETIME,\n    Recommender_ID INTEGER NOT NULL,\n    PRIMARY KEY (Book_ID, Recommender_ID),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Recommender_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Activity_Lottery (\n    Activity_ID INTEGER NOT NULL,\n    Prize_Name VARCHAR(255),\n    Winner_ID INTEGER NOT NULL,\n    PRIMARY KEY (Activity_ID, Winner_ID),\n    FOREIGN KEY (Activity_ID) REFERENCES Activity(Activity_ID),\n    FOREIGN KEY (Winner_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Activity_Participation (\n    Activity_ID INTEGER NOT NULL,\n    Participation_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Activity_ID),\n    FOREIGN KEY (Activity_ID) REFERENCES Activity(Activity_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "lzm", "domain": ["水利、环境和公共设施管理业", "公共设施管理业"]}
{"id": "67552f0b13602ec03b41aa25", "question": "A website provides travel information and user comment functionality. Users can register accounts, leaving details such as username, password, email, and other information. Users can post comments that include the content of the message and the time of posting. The website displays various tourist attractions, including the name, description, location, image URL, and category of each attraction. Each tourist attraction may receive some honors, which include a title and description. Additionally, the website features a carousel functionality that displays some images. The details of the images include the image ID, image URL, and creation time.\n", "answer": "CREATE TABLE user (\n    creation_time DATETIME,\n    email VARCHAR(255),\n    password VARCHAR(255),\n    user_id INTEGER PRIMARY KEY,\n    username VARCHAR(255)\n);\n\nCREATE TABLE tourist_attraction (\n    attraction_id INTEGER PRIMARY KEY,\n    attraction_name VARCHAR(255),\n    category VARCHAR(255),\n    creation_time DATETIME,\n    description VARCHAR(255),\n    image_url VARCHAR(255),\n    location VARCHAR(255)\n);\n\nCREATE TABLE carousel (\n    carousel_id INTEGER PRIMARY KEY,\n    creation_time DATETIME,\n    image_url VARCHAR(255)\n);\n\nCREATE TABLE comment (\n    comment_content VARCHAR(255),\n    comment_id INTEGER PRIMARY KEY,\n    creation_time DATETIME,\n    user_id INTEGER NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES user(user_id)\n);\n\nCREATE TABLE city_honor (\n    attraction_id INTEGER NOT NULL,\n    creation_time DATETIME,\n    honor_description VARCHAR(255),\n    honor_id INTEGER PRIMARY KEY,\n    honor_title VARCHAR(255),\n    FOREIGN KEY (attraction_id) REFERENCES tourist_attraction(attraction_id)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0b13602ec03b41aa28", "question": "Business Requirement Description:\n1.Frontend User Features:\nUsers can log in through the WeChat mini-program. Each user has a unique User ID, Username, Password, Phone Number, Registration Time, Last Login Time, and Role.\n2.Product Management:\nAdministrators can add, edit, and delete product information. Each product includes Product ID, Product Name, Product Description, Price, Stock Quantity, Product Category, and Shelving Time.\n3.Order Management:\nAdministrators can manage the order status, such as processing orders and shipping. Each order includes Order ID, User ID, Order Status, Total Amount, Order Time, Payment Time, and Delivery Address.\n4.Purchase Management:\nEach user can add multiple products to their shopping cart and place multiple orders, with each order containing multiple products.", "answer": "CREATE TABLE User (\n    Last_Login_Time DATETIME,\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Registration_Time DATETIME,\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Price FLOAT,\n    Product_Category VARCHAR(255),\n    Product_Description VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Shelving_Time DATETIME,\n    Stock_Quantity INTEGER\n);\n\nCREATE TABLE Order (\n    Delivery_Address VARCHAR(255),\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Payment_Time DATETIME,\n    Total_Amount FLOAT,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Shopping_Cart (\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Admin_Product_Management (\n    Admin_ID INTEGER NOT NULL,\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    Product_ID INTEGER NOT NULL,\n    PRIMARY KEY (Admin_ID, Product_ID),\n    FOREIGN KEY (Admin_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Order_Product (\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Subtotal FLOAT,\n    Unit_Price FLOAT,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE User_Order (\n    Delivery_Address VARCHAR(255),\n    Order_ID INTEGER NOT NULL,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Payment_Time DATETIME,\n    Total_Amount FLOAT,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Order_ID, User_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Admin_Order_Management (\n    Admin_ID INTEGER NOT NULL,\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    Order_ID INTEGER NOT NULL,\n    PRIMARY KEY (Admin_ID, Order_ID),\n    FOREIGN KEY (Admin_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aa2d", "question": "This is a pet grooming salon management system. The shop needs to manage pet groomers, customers, and their pets' information. Groomer information includes name, specialization, years of experience, and rating. Pets need to have basic information recorded including breed, age, weight, and fur characteristics. Each grooming service needs to record the service items, service duration, pricing, and customer ratings for the groomer's service.", "answer": "CREATE TABLE Groomer (\n    Groomer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Rating FLOAT,\n    Specialization VARCHAR(255),\n    Years_of_experience INTEGER\n);\n\nCREATE TABLE Pet (\n    Age INTEGER,\n    Breed VARCHAR(255),\n    Fur_characteristics VARCHAR(255),\n    Pet_ID INTEGER PRIMARY KEY,\n    Weight FLOAT\n);\n\nCREATE TABLE Grooming_service (\n    Customer_rating FLOAT,\n    Groomer_ID INTEGER NOT NULL,\n    Pet_ID INTEGER NOT NULL,\n    Price FLOAT,\n    Service_items VARCHAR(255),\n    Service_market VARCHAR(255),\n    Service_time FLOAT,\n    PRIMARY KEY (Groomer_ID, Pet_ID, Service_time),\n    FOREIGN KEY (Groomer_ID) REFERENCES Groomer(Groomer_ID),\n    FOREIGN KEY (Pet_ID) REFERENCES Pet(Pet_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "lzm", "domain": ["居民服务、修理和其他服务业", "其他服务业"]}
{"id": "67552f0b13602ec03b41aa35", "question": "The database is a multiplayer online gaming system, with primary functions including player information management, game records, single-player games, two-player battle games, player communication, and game status management. Below is the business description of the database:\n\n1. Player Management\nRecord the basic information of players. Each player has a unique Player ID, which includes the player's username, password, game, phone number, and registration time. This table supports player identity authentication and basic information queries.\n\n2. Game Record Management\nRecord the basic information of the game. Each game has a unique Game ID, including game rules, game content, and the maximum number of players allowed. This table is used to define the rules and configurations of the game, ensuring the rationality of the game battles.\n\n3. Single Player Management\nRecord the game records of a single player. Each record includes Player ID, Game ID, game start time, game end time, and game status. This table supports the recording and querying of single-player games, tracking the player's status in each game.\n\n4. Player Communication Management\nRecord the communication content between players. Each record includes the first Player ID, second Player ID, communication start time, communication end time, and communication content. This table is used to save the chat records or command content between players during game battles.\n\n5. Two-Player Battle Game Management\nRecord the battle information between two players. Each record includes the first Player ID, second Player ID, Game ID, battle start time, battle end time, and battle results. This table manages two-player battle games, recording the operations and results of the battling players.", "answer": "CREATE TABLE Player (\n    Game VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_Number INTEGER,\n    Player_ID INTEGER PRIMARY KEY,\n    Registration_Time DATETIME,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Game_Record (\n    Game_Content VARCHAR(255),\n    Game_ID INTEGER PRIMARY KEY,\n    Game_Rules VARCHAR(255),\n    Maximum_Number_of_Players INTEGER\n);\n\nCREATE TABLE Player_Communication (\n    Communication_Content VARCHAR(255),\n    Communication_End_Time DATETIME,\n    Communication_Start_Time DATETIME,\n    First_Player_ID INTEGER NOT NULL,\n    Second_Player_ID INTEGER NOT NULL,\n    PRIMARY KEY (First_Player_ID, Second_Player_ID, Communication_Start_Time),\n    FOREIGN KEY (First_Player_ID) REFERENCES Player(Player_ID),\n    FOREIGN KEY (Second_Player_ID) REFERENCES Player(Player_ID)\n);\n\nCREATE TABLE Single_Player_Game (\n    Game_End_Time DATETIME,\n    Game_ID INTEGER NOT NULL,\n    Game_Start_Time DATETIME,\n    Game_Status VARCHAR(255),\n    Player_ID INTEGER NOT NULL,\n    PRIMARY KEY (Player_ID, Game_ID, Game_Start_Time),\n    FOREIGN KEY (Game_ID) REFERENCES Game_Record(Game_ID),\n    FOREIGN KEY (Player_ID) REFERENCES Player(Player_ID)\n);\n\nCREATE TABLE Two-Player_Battle_Game (\n    Battle_End_Time DATETIME,\n    Battle_Result VARCHAR(255),\n    Battle_Start_Time DATETIME,\n    First_Player_ID INTEGER NOT NULL,\n    Game_ID INTEGER NOT NULL,\n    Second_Player_ID INTEGER NOT NULL,\n    PRIMARY KEY (First_Player_ID, Second_Player_ID, Game_ID, Battle_Start_Time),\n    FOREIGN KEY (First_Player_ID) REFERENCES Player(Player_ID),\n    FOREIGN KEY (Game_ID) REFERENCES Game_Record(Game_ID),\n    FOREIGN KEY (Second_Player_ID) REFERENCES Player(Player_ID)\n);", "remarks": "CS 2025/1/17", "assign_to": "cs", "assign_to_round2": "lzm", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0b13602ec03b41aa38", "question": "The database described is an instant messaging system with core capabilities supporting message exchange between users, group chat management, and storage and tracking of messages and history.It includes the following functions:\n\nUser Management, Store basic user information, including usernames, passwords, contact information, and registration times. Each user has a unique User ID.\n\nGroup Chat Management, Stores group chat information, including the unique identifier (Group Chat ID), group chat name, creator's details, and creation time and number of members of the group chat.\n\nChat Record Management, Stores the chat records between users. Each record includes the sender and receiver's User IDs, time the message was sent, type of message (such as text, image, etc.), content of the message, and the time the message was read.\n\nUser Joining Group Chat Management, Records information related to users joining a group chat, including the User ID, Group Chat ID, join time, and notes made by the user when applying to join the group chat.\n\nUser Leaving Group Chat Management, Records information related to users leaving a group chat, including the User ID, Group Chat ID, and the time of leaving.", "answer": "CREATE TABLE User (\n    Games VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Group_Chat (\n    Creation_Time DATETIME,\n    Creator_ID INTEGER NOT NULL,\n    Group_Chat_ID INTEGER PRIMARY KEY,\n    Group_Chat_Name VARCHAR(255),\n    Total_Members INTEGER,\n    FOREIGN KEY (Creator_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Chat_Record (\n    Message_Content VARCHAR(255),\n    Message_Type VARCHAR(255),\n    Read_Time DATETIME,\n    Send_Time DATETIME,\n    User_1_ID INTEGER NOT NULL,\n    User_2_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_1_ID, User_2_ID, Send_Time),\n    FOREIGN KEY (User_1_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (User_2_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Joining_Group_Chat (\n    Application_Information VARCHAR(255),\n    Group_Chat_ID INTEGER NOT NULL,\n    Join_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Group_Chat_ID, Join_Time),\n    FOREIGN KEY (Group_Chat_ID) REFERENCES Group_Chat(Group_Chat_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Leaving_Group_Chat (\n    Group_Chat_ID INTEGER NOT NULL,\n    Leaving_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Group_Chat_ID, Leaving_Time),\n    FOREIGN KEY (Group_Chat_ID) REFERENCES Group_Chat(Group_Chat_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 2025/1/17", "assign_to": "cs", "assign_to_round2": "lzm", "domain": ["居民服务、修理和其他服务业", "居民服务业"]}
{"id": "67552f0b13602ec03b41aa4b", "question": "System Requirements Function Description\n\nThis system is a seismometer calibration information management system based on B/S architecture, which is mainly designed for users of provincial seismic stations and central stations. The main functions of the system include:\n\n1. Data entry function:\nEnter the calibration-related information of the seismometer, such as mechanical period, equivalent pendulum length, moment of inertia, calibration coil sensitivity, comparison results, vibration table test results, etc.\n\n2. Data query function:\nQuery the calibration information of the station seismometer, such as calibration time, amplitude, width, etc.\nQuery the historical results of seismometer calibration and conduct statistical analysis.\n\n3. User management function:\nManage user information, including user name, password, name, earthquake monitoring center station, etc.\nThrough permission access control, different user roles can access different interfaces. Ordinary users mainly have the authority to query, edit and their own related information, and administrator users have the authority to edit and manage various functions.\n\n4. System management function:\nManage personnel information, seismometer voltage sensitivity, seismometer calibration coil sensitivity, moment of inertia, equivalent pendulum length and other aspects of information.", "answer": "CREATE TABLE User (\n    Affiliated_Earthquake_Monitoring_Center_Station VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    User_Name VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Seismometer_Calibration_Information (\n    Amplitude FLOAT,\n    Calibration_Coil_Sensitivity FLOAT,\n    Calibration_Time DATETIME PRIMARY KEY,\n    Equivalent_Pendulum_Length FLOAT,\n    Mechanical_Cycle VARCHAR(255),\n    Moment_of_Inertia FLOAT,\n    Ratio_Test_Result VARCHAR(255),\n    Vibration_Table_Test_Result VARCHAR(255),\n    Width FLOAT\n);\n\nCREATE TABLE System_Management_Information (\n    Equivalent_Pendulum_Length FLOAT,\n    Moment_of_Inertia FLOAT,\n    Personnel_Information VARCHAR(255) PRIMARY KEY,\n    Seismometer_Calibration_Coil_Sensitivity FLOAT,\n    Seismometer_Voltage_Sensitivity FLOAT\n);\n\nCREATE TABLE User_Role_Access_Control (\n    Calibration_Time DATETIME NOT NULL,\n    Role VARCHAR(255),\n    User_Name VARCHAR(255) NOT NULL,\n    PRIMARY KEY (User_Name, Calibration_Time),\n    FOREIGN KEY (Calibration_Time) REFERENCES Seismometer_Calibration_Information(Calibration_Time),\n    FOREIGN KEY (User_Name) REFERENCES User(User_Name)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "lzm", "domain": ["科学研究和技术服务业", "专业技术服务业"]}
{"id": "67552f0b13602ec03b41aaa8", "question": "This is a group company business management system. For mall management, the system records basic information of each mall, including unique mall ID, mall name, address, and contact number. For department management, the system records basic information of each department, including unique department ID, department name, location distribution, and contact number. Each mall can contain multiple departments. For employee management, the system records basic information of each employee, including unique employee ID, name, position, phone number, and salary. Each employee can only belong to one department. For manager management, each department has one manager.", "answer": "CREATE TABLE Mall (\n    Address VARCHAR(255),\n    Contact_number INTEGER,\n    Mall_ID INTEGER PRIMARY KEY,\n    Mall_name VARCHAR(255)\n);\n\nCREATE TABLE Department (\n    Contact_number INTEGER,\n    Department_ID INTEGER PRIMARY KEY,\n    Department_name VARCHAR(255),\n    Location_distribution VARCHAR(255),\n    Mall_ID INTEGER NOT NULL,\n    Manager_employee_ID INTEGER NOT NULL,\n    FOREIGN KEY (Mall_ID) REFERENCES Mall(Mall_ID),\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER,\n    Name VARCHAR(255),\n    Phone_number INTEGER,\n    Position VARCHAR(255),\n    Salary FLOAT,\n    PRIMARY KEY (Employee_ID, Department_ID),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szh", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0b13602ec03b41aaa9", "question": "The business requirements description of the hotel and flight booking system is as follows:  \n\nThe hotel manages multiple customers, each with a customer ID, name, gender, type, ID number, contact information, booking date, check-in time, and check-out time. Customer types are divided into regular customers and VIP customers, with different types of customers enjoying different discount rates.  \n\nThe company manages multiple flights, each with a flight name, flight date, airline name, departure location, departure time, destination, and arrival time. Customers can book flight tickets through the system.  \n\nThe company records flight booking information, with each booking record including a booking ID, discount rate, and ticket order number. Each booking also needs to record the customer and flight information.  \n\nAdditionally, the company manages multiple customer orders, with each order recording the order ID, customer ID, flight number, ticket order number, and discount rate.", "answer": "CREATE TABLE Customer (\n    Customer_Booking_Date DATETIME,\n    Customer_Check-in_Time DATETIME,\n    Customer_Check-out_Time DATETIME,\n    Customer_Contact_Information VARCHAR(255),\n    Customer_Gender VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_ID_Number INTEGER,\n    Customer_Name VARCHAR(255),\n    Customer_Type VARCHAR(255)\n);\n\nCREATE TABLE Flight (\n    Airline_Name VARCHAR(255),\n    Arrival_Time DATETIME,\n    Departure_Location VARCHAR(255),\n    Departure_Time DATETIME,\n    Destination VARCHAR(255),\n    Flight_Date DATETIME,\n    Flight_ID INTEGER PRIMARY KEY,\n    Flight_Name VARCHAR(255)\n);\n\nCREATE TABLE Flight_Booking_Record (\n    Booked_Flight_ID INTEGER NOT NULL,\n    Booking_Record_ID INTEGER PRIMARY KEY,\n    Customer_ID INTEGER,\n    Discount_Rate FLOAT,\n    Ticket_Order_Number INTEGER,\n    FOREIGN KEY (Booked_Flight_ID) REFERENCES Flight(Flight_ID)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Discount_Rate FLOAT,\n    Order_Flight_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Ticket_Order_Number INTEGER,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Order_Flight_ID) REFERENCES Flight(Flight_ID)\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "szh", "domain": ["交通运输、仓储和邮政业", "航空运输业"]}
{"id": "67552f0b13602ec03b41aaba", "question": "The database is a charity donation management system primarily designed to record donor information, manage fundraising events, and track each donor's contribution records in different fundraising activities. The system aids charitable organizations in the effective management of fundraising events and donor interactions, ensuring transparency and traceability of donation amounts.\n\nThe system includes the following functions:\n\n1. Donor Management\nStore basic information of donors. Through this table, the system can manage personal profiles of donors, including names, contact details, and addresses, ensuring effective communication with the donors.\n2. Fundraising Event Management\nRecords all information for fundraising events. It includes the names, types, timings, and locations of the events. Through this table, the system can track the progress of each fundraising activity, including the current amount raised and the status of the event (ongoing or concluded).\n3. Donation Record Management\nRecords the donation behavior of donors in different fundraising events. Each record includes the donor, donation amount, time, method, and message. Through this table, the system can trace the donation history of each donor and record details of each donation.", "answer": "CREATE TABLE Donor (\n    Address VARCHAR(255),\n    Date_of_Birth DATETIME,\n    Donor_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Identity_Card_Number VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Fundraising_Event (\n    Current_Event_Amount FLOAT,\n    Event_Address VARCHAR(255),\n    Event_End_Time DATETIME,\n    Event_ID INTEGER PRIMARY KEY,\n    Event_Name VARCHAR(255),\n    Event_Start_Time DATETIME,\n    Event_Status VARCHAR(255),\n    Event_Type VARCHAR(255)\n);\n\nCREATE TABLE Donation_Record (\n    Donation_Amount FLOAT,\n    Donation_Message VARCHAR(255),\n    Donation_Method VARCHAR(255),\n    Donation_Time DATETIME,\n    Donor_ID INTEGER NOT NULL,\n    Event_ID INTEGER NOT NULL,\n    PRIMARY KEY (Donor_ID, Event_ID, Donation_Time),\n    FOREIGN KEY (Donor_ID) REFERENCES Donor(Donor_ID),\n    FOREIGN KEY (Event_ID) REFERENCES Fundraising_Event(Event_ID)\n);", "remarks": "2025 1/17 CS", "assign_to": "cs", "assign_to_round2": "lzm", "domain": ["公共管理、社会保障和社会组织", "群众团体、社会团体和其他成员组织"]}
{"id": "67552f0b13602ec03b41aae8", "question": "This is an email client system. For user management, the system records basic information of each user, including unique username and password. For email account management, the system records basic information of each email account, including email address and corresponding password. A user can have multiple email accounts. For address book management, each user can have one address book. The system records basic information of each contact, including unique contact ID, name, phone number, work address, and up to three email addresses. Each contact can only belong to one user. For email management, the system records basic information of each email, including unique email ID, sender address, recipient address, email status (received, pending, sent, and deleted), subject, content, sending time, and receiving time. One email can be sent to multiple users. For attachment management, the system records basic information of each attachment, including unique attachment ID within the email, attachment filename, and attachment size. One attachment can only belong to one email.", "answer": "CREATE TABLE User (\n    Password VARCHAR(255),\n    Username VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Email_account (\n    Email_address VARCHAR(255) PRIMARY KEY,\n    Email_password VARCHAR(255),\n    Username VARCHAR(255) NOT NULL,\n    FOREIGN KEY (Username) REFERENCES User(Username)\n);\n\nCREATE TABLE Contact (\n    Contact_ID INTEGER PRIMARY KEY,\n    Email_address_1 VARCHAR(255),\n    Email_address_2 VARCHAR(255),\n    Email_address_3 VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Username VARCHAR(255) NOT NULL,\n    Work_address VARCHAR(255),\n    FOREIGN KEY (Username) REFERENCES User(Username)\n);\n\nCREATE TABLE Email (\n    Content VARCHAR(255),\n    Email_ID INTEGER PRIMARY KEY,\n    Receiving_time DATETIME,\n    Sender_address VARCHAR(255) NOT NULL,\n    Sending_time DATETIME,\n    Status VARCHAR(255),\n    Subject VARCHAR(255),\n    FOREIGN KEY (Sender_address) REFERENCES Email_account(Email_address)\n);\n\nCREATE TABLE Receipt (\n    Email_ID INTEGER NOT NULL,\n    Recipient_address VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Recipient_address, Email_ID),\n    FOREIGN KEY (Email_ID) REFERENCES Email(Email_ID),\n    FOREIGN KEY (Recipient_address) REFERENCES Email_account(Email_address)\n);\n\nCREATE TABLE Attachment (\n    Attachment_ID INTEGER PRIMARY KEY,\n    Attachment_filename VARCHAR(255),\n    Attachment_size FLOAT,\n    Email_ID INTEGER NOT NULL,\n    FOREIGN KEY (Email_ID) REFERENCES Email(Email_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "lzm", "domain": ["信息传输、软件和信息技术服务业", "电信、广播电视和卫星传输服务"]}
{"id": "67552f0b13602ec03b41aaec", "question": "The course registration system of a university is designed as follows:\nA student has information such as Student ID, Name, Date of Birth, Phone Number, Home Address, and Registration Eligibility.\nThe university offers multiple courses, each with a Course ID, Course Name, Credits, Instructor, Class Time, and Location.\nWhen a student registers for a course, the system first verifies the legality of the provided information and checks the student's degree examination results to confirm registration eligibility.\nThe degree examination result information includes Result ID, Student ID, Examination Name, Grade, and Examination Date.\nIf a student is eligible for registration, the student can select courses and proceed with registration. The registration information includes Student ID, Course ID, Registration Time, and Status.\nThe system stores the registration information in the database and associates the enrolled students with the corresponding courses.\nAfter registration is completed, the system sends a notification of successful registration to the student and sends the registered courses and student information to the academic staff for subsequent management.", "answer": "CREATE TABLE Student (\n    Date_of_Birth DATETIME,\n    Home_Address VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Registration_Eligibility BOOL,\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Course (\n    Class_Location VARCHAR(255),\n    Class_Time DATETIME,\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Name VARCHAR(255),\n    Credits FLOAT,\n    Instructor VARCHAR(255)\n);\n\nCREATE TABLE Degree_Examination_Result (\n    Examination_Date DATETIME,\n    Examination_Name VARCHAR(255),\n    Grade INTEGER,\n    Result_ID INTEGER PRIMARY KEY,\n    Student_ID INTEGER NOT NULL,\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Registration (\n    Course_ID INTEGER NOT NULL,\n    Registration_Time DATETIME,\n    Status VARCHAR(255),\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aafc", "question": "This is a voter information management system. For voter management, the system records basic information of each voter, including unique voter ID, name, residential address, and registration status. Each eligible voter must register their voting district through the system and can only register in one district. For address management, the system records basic information of each address, including unique address ID, detailed address, and type (city or town). For district management, the system records basic information of each district, including unique district ID, name, and type. A voter's district is determined by their residential address, and each person can only have one address. A district may contain multiple towns, while larger cities may contain multiple districts.", "answer": "CREATE TABLE Address (\n    Address_ID INTEGER PRIMARY KEY,\n    Detailed_address VARCHAR(255),\n    Type VARCHAR(255)\n);\n\nCREATE TABLE City (\n    City_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Region VARCHAR(255)\n);\n\nCREATE TABLE District (\n    City_ID INTEGER NOT NULL,\n    District_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Type VARCHAR(255),\n    FOREIGN KEY (City_ID) REFERENCES City(City_ID)\n);\n\nCREATE TABLE Voter (\n    Address_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Registration_district_ID INTEGER NOT NULL,\n    Registration_status VARCHAR(255),\n    Voter_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Address_ID) REFERENCES Address(Address_ID),\n    FOREIGN KEY (Registration_district_ID) REFERENCES District(District_ID)\n);\n\nCREATE TABLE Town (\n    District_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Region VARCHAR(255),\n    Town_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (District_ID) REFERENCES District(District_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "lzm", "domain": ["公共管理、社会保障和社会组织", "国家机构"]}
{"id": "67552f0b13602ec03b41ab0f", "question": "The supermarket management system is designed as follows:\nThe company owns multiple supermarkets, each with manager, address, and telephone information.\nEach supermarket has multiple departments, with name, manager, and contact telephone for each department.\nEach department employs multiple employees, with employee number, name, contact information, position, and salary for each employee.\nThe supermarket sells multiple products, with product number, name, model, unit price, and inventory quantity for each product.\nThe system needs to record the process of allocating products to salespersons, including allocation time, allocation quantity, and salesperson information such as salesperson number, name, contact information, etc.\nThrough this data, the system can manage the supermarket's operations, including employee management, product inventory, and allocation, to optimize business processes and improve efficiency.", "answer": "CREATE TABLE Company (\n    Address VARCHAR(255),\n    Company_ID INTEGER PRIMARY KEY,\n    Company_Name VARCHAR(255),\n    Telephone INTEGER\n);\n\nCREATE TABLE Product (\n    Model VARCHAR(255),\n    Name VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Unit_Price FLOAT\n);\n\nCREATE TABLE Salesperson (\n    Contact_Information INTEGER,\n    Name VARCHAR(255),\n    Salesperson_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Supermarket (\n    Address VARCHAR(255),\n    Company_ID INTEGER NOT NULL,\n    Manager VARCHAR(255),\n    Supermarket_ID INTEGER PRIMARY KEY,\n    Telephone INTEGER,\n    FOREIGN KEY (Company_ID) REFERENCES Company(Company_ID)\n);\n\nCREATE TABLE Allocation_Record (\n    Allocation_ID INTEGER PRIMARY KEY,\n    Allocation_Quantity INTEGER,\n    Allocation_Time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Salesperson_ID INTEGER NOT NULL,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Salesperson_ID) REFERENCES Salesperson(Salesperson_ID)\n);\n\nCREATE TABLE Department (\n    Contact_Telephone INTEGER,\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Manager VARCHAR(255),\n    Supermarket_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supermarket_ID) REFERENCES Supermarket(Supermarket_ID)\n);\n\nCREATE TABLE Product_Inventory (\n    Inventory_ID INTEGER PRIMARY KEY,\n    Inventory_Quantity INTEGER,\n    Product_ID INTEGER NOT NULL,\n    Supermarket_ID INTEGER NOT NULL,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supermarket_ID) REFERENCES Supermarket(Supermarket_ID)\n);\n\nCREATE TABLE Employee (\n    Contact_Information INTEGER,\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Salary FLOAT,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0b13602ec03b41ab4d", "question": "The company produces chess pieces for various chess games. Each chessboard represents a production line or batch for a specific chess game, with a chessboard ID and chessboard name. Each chessboard contains multiple chess pieces, each with color and position information.\nThe company performs quality inspection on each chess piece, recording the inspection time and result. If the inspection fails, the defect type is recorded and a quality alert is generated.\nAdditionally, the company uses quality inspection models to predict and evaluate the quality status during the production process, recording the model running time and results.", "answer": "CREATE TABLE Chessboard (\n    Chessboard_ID INTEGER PRIMARY KEY,\n    Chessboard_Name VARCHAR(255)\n);\n\nCREATE TABLE Quality_Inspection_Model (\n    Model_ID INTEGER PRIMARY KEY,\n    Model_Result VARCHAR(255),\n    Running_Time FLOAT\n);\n\nCREATE TABLE Chess_Piece (\n    Belonging_Chessboard INTEGER NOT NULL,\n    Chess_Piece_ID INTEGER PRIMARY KEY,\n    Color VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Belonging_Chessboard) REFERENCES Chessboard(Chessboard_ID)\n);\n\nCREATE TABLE Quality_Inspection (\n    Chess_Piece_ID INTEGER NOT NULL,\n    Inspection_ID INTEGER PRIMARY KEY,\n    Inspection_Result VARCHAR(255),\n    Inspection_Time DATETIME,\n    FOREIGN KEY (Chess_Piece_ID) REFERENCES Chess_Piece(Chess_Piece_ID)\n);\n\nCREATE TABLE Quality_Alert (\n    Alert_ID INTEGER PRIMARY KEY,\n    Defect_Type VARCHAR(255),\n    Inspection_ID INTEGER NOT NULL,\n    FOREIGN KEY (Inspection_ID) REFERENCES Quality_Inspection(Inspection_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "lzm", "domain": ["制造业", "其他制造业"]}
{"id": "67552f0a13602ec03b41a78c", "question": "The pipeline company manages multiple pipelines, each identified by a pipeline ID, starting point, ending point, length, and diameter. The company employs multiple maintenance personnel, and each maintenance task must record the pipeline ID, maintenance personnel, maintenance details, and maintenance time. The system shall support real-time monitoring of pipeline maintenance tasks and performance evaluation.", "answer": "CREATE TABLE Pipeline (\n    Diameter FLOAT,\n    Ending_Point VARCHAR(255),\n    Pipeline_ID INTEGER PRIMARY KEY,\n    Starting_Point VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_Personnel (\n    Maintenance_Personnel_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_Activity_Record (\n    Maintenance_Details VARCHAR(255),\n    Maintenance_Personnel_ID INTEGER NOT NULL,\n    Maintenance_Time DATETIME,\n    Pipeline_ID INTEGER NOT NULL,\n    PRIMARY KEY (Pipeline_ID, Maintenance_Personnel_ID, Maintenance_Time),\n    FOREIGN KEY (Maintenance_Personnel_ID) REFERENCES Maintenance_Personnel(Maintenance_Personnel_ID),\n    FOREIGN KEY (Pipeline_ID) REFERENCES Pipeline(Pipeline_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "dyq", "domain": ["水利、环境和公共设施管理业", "生态保护和环境治理业"]}
{"id": "67552f0a13602ec03b41a795", "question": "The hotel has multiple restaurants, each with a name, location, and operating hours. The restaurants offer various dishes, each with a name, price, and category. Customers can make table reservations at the restaurants. Each reservation records the customer information, restaurant information, reservation time, and number of diners.\n", "answer": "CREATE TABLE Restaurant (\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Operating_Hours FLOAT,\n    Restaurant_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Dish (\n    Category VARCHAR(255),\n    Dish_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Price FLOAT\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Restaurant_Dish (\n    Dish_ID INTEGER NOT NULL,\n    Restaurant_ID INTEGER NOT NULL,\n    PRIMARY KEY (Restaurant_ID, Dish_ID),\n    FOREIGN KEY (Dish_ID) REFERENCES Dish(Dish_ID),\n    FOREIGN KEY (Restaurant_ID) REFERENCES Restaurant(Restaurant_ID)\n);\n\nCREATE TABLE Customer_Reservation (\n    Customer_ID INTEGER NOT NULL,\n    Number_of_Diners INTEGER,\n    Reservation_ID INTEGER PRIMARY KEY,\n    Reservation_Time DATETIME,\n    Restaurant_ID INTEGER NOT NULL,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Restaurant_ID) REFERENCES Restaurant(Restaurant_ID)\n);", "remarks": "完善了需求描述；修正了多对多关系的模式", "assign_to": "szc", "assign_to_round2": "cyx", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a796", "question": "The restaurant has multiple dining tables, each with a table number, location, and seating capacity. Customers can make table reservations. Each reservation records customer information, table information, reservation time, number of diners, and reservation status (such as confirmed or cancelled).\n", "answer": "CREATE TABLE Table (\n    Location VARCHAR(255),\n    Seating_Capacity INTEGER,\n    Table_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Reservation (\n    Customer_ID INTEGER NOT NULL,\n    Number_of_Diners INTEGER,\n    Reservation_Status VARCHAR(255),\n    Reservation_Time DATETIME,\n    Table_ID INTEGER NOT NULL,\n    PRIMARY KEY (Customer_ID, Table_ID, Reservation_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Table_ID) REFERENCES Table(Table_ID)\n);", "remarks": "预定关系的主键冗余，删除了预定ID", "assign_to": "szc", "assign_to_round2": "zp", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a799", "question": "Broadcast Television Company produces and broadcasts a variety of programs, encompassing news, entertainment, sports, and other content types. Each program has a unique program ID, name, type, broadcast time, and duration. To ensure the quality of the programs, the company employs multiple production staff responsible for planning, producing, and post-producing each program. Each production staff member may participate in the production of multiple programs, and multiple production staff members may be involved in the production process of each program.\n\nEach time a program production is completed, in addition to recording the participating production staff, it is also necessary to record the production time, reviewers, and review results of the program. Reviewers are responsible for examining the content of the programs to ensure compliance and quality. The system must also support querying information about the programs and their production staff, as well as the review status of each program.", "answer": "CREATE TABLE Program (\n    Broadcast_End_Time DATETIME,\n    Broadcast_Start_Time DATETIME,\n    Duration FLOAT,\n    Program_ID INTEGER PRIMARY KEY,\n    Program_Name VARCHAR(255),\n    Program_Type VARCHAR(255)\n);\n\nCREATE TABLE Staff (\n    Contact_Number VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Staff_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Program_Production (\n    Production_Staff_ID INTEGER NOT NULL,\n    Program_ID INTEGER NOT NULL,\n    Working_Duration INTEGER,\n    PRIMARY KEY (Program_ID, Production_Staff_ID),\n    FOREIGN KEY (Production_Staff_ID) REFERENCES Staff(Staff_ID),\n    FOREIGN KEY (Program_ID) REFERENCES Program(Program_ID)\n);\n\nCREATE TABLE Program_Review (\n    Program_ID INTEGER NOT NULL,\n    Review_Result VARCHAR(255),\n    Reviewer_ID INTEGER NOT NULL,\n    Working_Duration INTEGER,\n    PRIMARY KEY (Program_ID, Reviewer_ID),\n    FOREIGN KEY (Program_ID) REFERENCES Program(Program_ID),\n    FOREIGN KEY (Reviewer_ID) REFERENCES Staff(Staff_ID)\n);", "remarks": "CS 2025/1/3", "assign_to": "cs", "assign_to_round2": "dyq", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a79a", "question": "The satellite transmission service company offers multiple satellite transmission services, each characterized by a service ID, name, transmission type, transmission rate, and price. The company has multiple clients, and each client can subscribe to multiple services. For every service subscription, the subscription time, end time, and operator must be recorded.", "answer": "CREATE TABLE Service (\n    Price FLOAT,\n    Service_ID INTEGER PRIMARY KEY,\n    Service_Name VARCHAR(255),\n    Transmission_Rate FLOAT,\n    Transmission_Type VARCHAR(255)\n);\n\nCREATE TABLE Client (\n    Client_Address VARCHAR(255),\n    Client_Email VARCHAR(255),\n    Client_ID INTEGER PRIMARY KEY,\n    Client_Name VARCHAR(255),\n    Client_Phone INTEGER\n);\n\nCREATE TABLE Service_Subscription (\n    Client_ID INTEGER NOT NULL,\n    Operator VARCHAR(255),\n    Service_ID INTEGER NOT NULL,\n    Subscription_End_Time DATETIME,\n    Subscription_Start_Time DATETIME,\n    PRIMARY KEY (Service_ID, Client_ID, Subscription_Start_Time),\n    FOREIGN KEY (Client_ID) REFERENCES Client(Client_ID),\n    FOREIGN KEY (Service_ID) REFERENCES Service(Service_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "电信、广播电视和卫星传输服务"]}
{"id": "67552f0a13602ec03b41a7b2", "question": "The business requirements description of the animal husbandry management information system are as follows:  \n\nMultiple ranches need to be managed, each with a ranch ID, name, and address, and each ranch can manage multiple types of livestock.  \nEach type of livestock has a name, species, livestock ID, and ranch ID.  \n\nThe ranch needs to record the health status of the livestock (including recording time, health status, health status ID, and livestock ID),  \nvaccination status (including vaccination measures, vaccination time, vaccination status ID, and livestock ID),  \nfeed consumption (including consumption time, feed type, consumption amount, feed consumption ID, and livestock ID),  \nand entry/exit records (including time, entry/exit type, entry/exit record ID, and livestock ID).", "answer": "CREATE TABLE Ranch (\n    Address VARCHAR(255),\n    Name VARCHAR(255),\n    Ranch_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Livestock (\n    Livestock_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Ranch_ID INTEGER NOT NULL,\n    Species VARCHAR(255),\n    FOREIGN KEY (Ranch_ID) REFERENCES Ranch(Ranch_ID)\n);\n\nCREATE TABLE Health_Status (\n    Health_Status VARCHAR(255),\n    Livestock_ID INTEGER NOT NULL,\n    Recording_Time DATETIME,\n    PRIMARY KEY (Livestock_ID, Recording_Time),\n    FOREIGN KEY (Livestock_ID) REFERENCES Livestock(Livestock_ID)\n);\n\nCREATE TABLE Vaccination_Status (\n    Livestock_ID INTEGER NOT NULL,\n    Vaccination_Measures VARCHAR(255),\n    Vaccination_Time DATETIME,\n    PRIMARY KEY (Livestock_ID, Vaccination_Time),\n    FOREIGN KEY (Livestock_ID) REFERENCES Livestock(Livestock_ID)\n);\n\nCREATE TABLE Feed_Consumption (\n    Consumption_Amount INTEGER,\n    Consumption_Time DATETIME,\n    Feed_Type VARCHAR(255),\n    Livestock_ID INTEGER NOT NULL,\n    PRIMARY KEY (Livestock_ID, Consumption_Time),\n    FOREIGN KEY (Livestock_ID) REFERENCES Livestock(Livestock_ID)\n);\n\nCREATE TABLE Entry/Exit_Records (\n    Entry/Exit_Type VARCHAR(255),\n    Livestock_ID INTEGER NOT NULL,\n    Time DATETIME,\n    PRIMARY KEY (Livestock_ID, Time),\n    FOREIGN KEY (Livestock_ID) REFERENCES Livestock(Livestock_ID)\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "dyq", "domain": ["农、林、牧、渔业", "畜牧业"]}
{"id": "67552f0a13602ec03b41a7bd", "question": "The restaurant receives customer feedback. Each feedback item has a Feedback ID, Customer Information, Feedback Content, Feedback Time, and Processing Status (such as Processed or Unprocessed). The restaurant needs to record the detailed information and processing status of each feedback item.\n", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Feedback (\n    Customer_ID INTEGER NOT NULL,\n    Feedback_Content VARCHAR(255),\n    Feedback_ID INTEGER PRIMARY KEY,\n    Feedback_Time DATETIME,\n    Processing_Status VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);", "remarks": "处理人员表不需要，需求未提及", "assign_to": "szc", "assign_to_round2": "zp", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a7be", "question": "The following is a description of an Internet Service Feedback Management System: The system is mainly used for managing user feedback. The system records users' basic information, including user ID, username, contact number, and email. Each feedback has a feedback ID, user ID, feedback content, feedback time, processing status, and processing result. The company has multiple customer service representatives, each with an employee ID, name, contact information, and work status. Each customer service representative can handle multiple feedback items. For each feedback processing, the system needs to record the processing time, processing result, and the processor.", "answer": "CREATE TABLE User (\n    Contact_number INTEGER,\n    Email VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Customer_service_representative (\n    Contact_information VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Work_status VARCHAR(255)\n);\n\nCREATE TABLE Feedback (\n    Feedback_ID INTEGER PRIMARY KEY,\n    Feedback_content VARCHAR(255),\n    Feedback_time DATETIME,\n    Processing_status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Feedback_result (\n    Feedback_ID INTEGER PRIMARY KEY NOT NULL,\n    Processing_result VARCHAR(255),\n    Processing_time DATETIME,\n    Processor_employee_ID INTEGER NOT NULL,\n    FOREIGN KEY (Feedback_ID) REFERENCES Feedback(Feedback_ID),\n    FOREIGN KEY (Processor_employee_ID) REFERENCES Customer_service_representative(Employee_ID)\n);", "remarks": "反馈处理是客服人员和反馈的1对n关系，应将客服ID作为反馈的外键，为了避免某些反馈没有处理结果导致冗余存储，故用1对1的关系引申出反馈结果表，该表只存储有结果的反馈对应的结果。同时每个schema的名字需要指明是一个表。", "assign_to": "hzb", "assign_to_round2": "zp", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a7c2", "question": "Agricultural Ecosystem Monitoring System requires recording monitoring data for multiple ecosystems. Each ecosystem has a System ID, Name, Location, Type (such as \"Forest\", \"Wetland\", etc.), and Current Status (such as \"Healthy\", \"Degraded\", etc.). Each monitoring record includes System ID, Monitoring Date, Temperature, Humidity, Soil Moisture, Plant Growth, and Operator. Each operator has an Employee ID, Name, Gender, Contact Information, and Position.", "answer": "CREATE TABLE Ecosystem (\n    Current_Status VARCHAR(255),\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    System_ID INTEGER PRIMARY KEY,\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Operator (\n    Contact_Information VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Monitoring_Record (\n    Employee_ID INTEGER NOT NULL,\n    Humidity FLOAT,\n    Monitoring_Date DATETIME,\n    Plant_Growth VARCHAR(255),\n    Soil_Moisture FLOAT,\n    System_ID INTEGER NOT NULL,\n    Temperature FLOAT,\n    PRIMARY KEY (System_ID, Monitoring_Date),\n    FOREIGN KEY (Employee_ID) REFERENCES Operator(Employee_ID),\n    FOREIGN KEY (System_ID) REFERENCES Ecosystem(System_ID)\n);", "remarks": "外键不一定是主键\n修改说明：关系处补充了该关系的所有属性", "assign_to": "dyq", "assign_to_round2": "zp", "domain": ["水利、环境和公共设施管理业", "生态保护和环境治理业"]}
{"id": "67552f0a13602ec03b41a7d2", "question": "The following is a description of a Residential Housekeeping Service Company System: The company provides housekeeping services such as cleaning, cooking, and care. The company has multiple service teams, with each team having multiple housekeepers. Housekeeper information includes staff ID, name, contact number, service type, years of experience, and professional skills. Each service task has a task ID, customer information (customer name, customer phone), service date, service address, service type, and service duration. After service completion, the system needs to record service fee, service effectiveness, and customer evaluation. Housekeepers' performance evaluation is based on the number of completed tasks and customer satisfaction.", "answer": "CREATE TABLE Service_team (\n    Team_ID INTEGER PRIMARY KEY,\n    Team_name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_name VARCHAR(255),\n    Customer_phone VARCHAR(255)\n);\n\nCREATE TABLE Service_evaluation (\n    Customer_evaluation VARCHAR(255),\n    Evaluation_ID INTEGER PRIMARY KEY,\n    Service_effectiveness BOOL,\n    Service_fee FLOAT\n);\n\nCREATE TABLE Housekeeper (\n    Contact_number VARCHAR(255),\n    Name VARCHAR(255),\n    Professional_skills VARCHAR(255),\n    Service_type VARCHAR(255),\n    Staff_ID INTEGER PRIMARY KEY,\n    Team_ID INTEGER NOT NULL,\n    Years_of_experience INTEGER,\n    FOREIGN KEY (Team_ID) REFERENCES Service_team(Team_ID)\n);\n\nCREATE TABLE Service_task (\n    Evaluation_ID INTEGER NOT NULL,\n    Service_address VARCHAR(255),\n    Service_date DATETIME,\n    Service_duration FLOAT,\n    Service_type VARCHAR(255),\n    Task_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Evaluation_ID) REFERENCES Service_evaluation(Evaluation_ID)\n);\n\nCREATE TABLE Staff_task (\n    Staff_ID INTEGER NOT NULL,\n    Task_ID INTEGER NOT NULL,\n    PRIMARY KEY (Staff_ID, Task_ID),\n    FOREIGN KEY (Staff_ID) REFERENCES Housekeeper(Staff_ID),\n    FOREIGN KEY (Task_ID) REFERENCES Service_task(Task_ID)\n);\n\nCREATE TABLE Customer_task (\n    Customer_ID INTEGER NOT NULL,\n    Task_ID INTEGER NOT NULL,\n    PRIMARY KEY (Customer_ID, Task_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Task_ID) REFERENCES Service_task(Task_ID)\n);", "remarks": "relation_3为一对一关系，当前处理方式是：将评价编号作为外键，与任务编号关联", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["居民服务、修理和其他服务业", "居民服务业"]}
{"id": "67552f0a13602ec03b41a7df", "question": "This is a Construction Company Safety Inspection Management System. For project basic information management, the system records information such as project ID, project name, project manager, construction start date, expected completion date, actual completion date, project budget, and project location. For safety inspection records, the system maintains information including inspection ID, project ID, inspection date, inspection content, inspection results, and inspector. For projects with unsatisfactory inspection results, the system conducts tracking management, recording information such as tracking record ID, project ID, tracking date, tracking content, and tracking results.", "answer": "CREATE TABLE Project (\n    Actual_completion_date DATETIME,\n    Construction_start_date DATETIME,\n    Expected_completion_date DATETIME,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_budget FLOAT,\n    Project_location VARCHAR(255),\n    Project_manager VARCHAR(255),\n    Project_name VARCHAR(255)\n);\n\nCREATE TABLE Safety_inspection_record (\n    Inspection_ID INTEGER PRIMARY KEY,\n    Inspection_content VARCHAR(255),\n    Inspection_date DATETIME,\n    Inspection_result VARCHAR(255),\n    Inspector VARCHAR(255),\n    Project_ID INTEGER NOT NULL,\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);\n\nCREATE TABLE Unqualified_project_tracking_record (\n    Project_ID INTEGER NOT NULL,\n    Tracking_content VARCHAR(255),\n    Tracking_date DATETIME,\n    Tracking_record_ID INTEGER PRIMARY KEY,\n    Tracking_result VARCHAR(255),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["建筑业", "建筑装饰、装修和其他建筑业"]}
{"id": "67552f0a13602ec03b41a7f4", "question": "The business requirements description for the analysis and management of real estate sales data are as follows:  \nIt is necessary to store basic information about properties, such as property ID, address, area, sale price, and sale date. Additionally, details of various analysis reports need to be recorded, including report ID, report date, report type, and analysis results.", "answer": "CREATE TABLE Property_Table (\n    Address VARCHAR(255),\n    Area VARCHAR(255),\n    Property_ID INTEGER PRIMARY KEY,\n    Sale_Date DATETIME,\n    Sale_Price FLOAT\n);\n\nCREATE TABLE Analysis_Report_Table (\n    Analysis_Results VARCHAR(255),\n    Property_ID INTEGER NOT NULL,\n    Report_Date DATETIME,\n    Report_ID INTEGER PRIMARY KEY,\n    Report_Type VARCHAR(255),\n    FOREIGN KEY (Property_ID) REFERENCES Property_Table(Property_ID)\n);", "remarks": "一个房产可能有多个报告，故房产和报告是1对多关系，故将房产编号作为报告表的外键", "assign_to": "cyx", "assign_to_round2": "zp", "domain": ["房地产业", "房地产业"]}
{"id": "67552f0a13602ec03b41a803", "question": "The movie production company needs to manage multiple movie projects, and each project has multiple directors, actors, and producers. The system needs to record each project's name, type, budget, filming time, and relevant personnel information, including name, email, and phone number.\n", "answer": "CREATE TABLE Movie_Project (\n    Budget FLOAT,\n    Filming_Time DATETIME,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Name VARCHAR(255),\n    Project_Type VARCHAR(255)\n);\n\nCREATE TABLE Director (\n    Director_ID INTEGER PRIMARY KEY,\n    Director_Name VARCHAR(255),\n    Email VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Actor (\n    Actor_ID INTEGER PRIMARY KEY,\n    Actor_Name VARCHAR(255),\n    Email VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Producer (\n    Email VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Producer_ID INTEGER PRIMARY KEY,\n    Producer_Name VARCHAR(255)\n);\n\nCREATE TABLE Director_Participate_Project (\n    Director_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    PRIMARY KEY (Director_ID, Project_ID),\n    FOREIGN KEY (Director_ID) REFERENCES Director(Director_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Movie_Project(Project_ID)\n);\n\nCREATE TABLE Actor_Participate_Project (\n    Actor_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    PRIMARY KEY (Actor_ID, Project_ID),\n    FOREIGN KEY (Actor_ID) REFERENCES Actor(Actor_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Movie_Project(Project_ID)\n);\n\nCREATE TABLE Producer_Participate_Project (\n    Producer_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    PRIMARY KEY (Producer_ID, Project_ID),\n    FOREIGN KEY (Producer_ID) REFERENCES Producer(Producer_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Movie_Project(Project_ID)\n);", "remarks": "完善了需求描述", "assign_to": "szc", "assign_to_round2": "cyx", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a805", "question": "The Cultural Arts Company needs to manage multiple exhibitions. Each exhibition has multiple curators and exhibits. The system needs to record the name, location, start time, and end time of each exhibition, as well as the information of curators and exhibits.\n", "answer": "CREATE TABLE Exhibition (\n    Exhibition_End_Time DATETIME,\n    Exhibition_ID INTEGER PRIMARY KEY,\n    Exhibition_Location VARCHAR(255),\n    Exhibition_Name VARCHAR(255),\n    Exhibition_Start_Time DATETIME\n);\n\nCREATE TABLE Curator (\n    Curator_ID INTEGER PRIMARY KEY,\n    Curator_Name VARCHAR(255),\n    Email VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Exhibit (\n    Exhibit_Description VARCHAR(255),\n    Exhibit_ID INTEGER PRIMARY KEY,\n    Exhibit_Image_Path VARCHAR(255),\n    Exhibit_Name VARCHAR(255),\n    Exhibit_Source VARCHAR(255)\n);\n\nCREATE TABLE Exhibition_Management (\n    Curator_ID INTEGER NOT NULL,\n    Exhibition_ID INTEGER NOT NULL,\n    PRIMARY KEY (Curator_ID, Exhibition_ID),\n    FOREIGN KEY (Curator_ID) REFERENCES Curator(Curator_ID),\n    FOREIGN KEY (Exhibition_ID) REFERENCES Exhibition(Exhibition_ID)\n);\n\nCREATE TABLE Exhibit_Association (\n    Exhibit_ID INTEGER NOT NULL,\n    Exhibition_ID INTEGER NOT NULL,\n    PRIMARY KEY (Exhibit_ID, Exhibition_ID),\n    FOREIGN KEY (Exhibit_ID) REFERENCES Exhibit(Exhibit_ID),\n    FOREIGN KEY (Exhibition_ID) REFERENCES Exhibition(Exhibition_ID)\n);", "remarks": "修改了schema的名字", "assign_to": "szc", "assign_to_round2": "zp", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a80b", "question": "This is a Publishing House Book Management System. For book management, the system needs to manage multiple books, with each book containing information such as ISBN number, book title, publication date, and category. For author management, the system records multiple authors' information for each book, including author ID, name, email, and address. For editor management, the system maintains multiple editors' information for each book, including editor ID, name, email, and office location. For book relationship management, the system needs to record authors and editors for each book, including book ISBN number, author ID, and editor ID.\n", "answer": "CREATE TABLE Book (\n    Book_title VARCHAR(255),\n    Category VARCHAR(255),\n    ISBN VARCHAR(255) PRIMARY KEY,\n    Publication_date DATETIME\n);\n\nCREATE TABLE Author (\n    Address VARCHAR(255),\n    Author_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Editor (\n    Editor_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Office_location VARCHAR(255)\n);\n\nCREATE TABLE Book_author (\n    Author_ID INTEGER NOT NULL,\n    ISBN VARCHAR(255) NOT NULL,\n    PRIMARY KEY (ISBN, Author_ID),\n    FOREIGN KEY (Author_ID) REFERENCES Author(Author_ID),\n    FOREIGN KEY (ISBN) REFERENCES Book(ISBN)\n);\n\nCREATE TABLE Book_editor (\n    Editor_ID INTEGER NOT NULL,\n    ISBN VARCHAR(255) NOT NULL,\n    PRIMARY KEY (ISBN, Editor_ID),\n    FOREIGN KEY (Editor_ID) REFERENCES Editor(Editor_ID),\n    FOREIGN KEY (ISBN) REFERENCES Book(ISBN)\n);", "remarks": "修改了schema的表名", "assign_to": "hzb", "assign_to_round2": "zp", "domain": ["文化、体育和娱乐业", "新闻和出版业"]}
{"id": "67552f0a13602ec03b41a80c", "question": "The business requirements description for the book management system are as follows:  \nFor books, it is necessary to record key information for each book, such as the unique identifier BookID, title (Title), International Standard Book Number (ISBN), publication date (PublicationDate), and category (Category).  \nAn author can write many books, and for authors, the system needs to store AuthorID, name (Name), email (Email), and phone number (Phone).  \nAdditionally, an editor can edit multiple books, and the editor's information includes EditorID, name (Name), email (Email), and phone number (Phone).  \nThe system aims to achieve effective management of books, authors, editors, and the relationships between them.", "answer": "CREATE TABLE Book (\n    AuthorID INTEGER,\n    BookID INTEGER PRIMARY KEY,\n    Category VARCHAR(255),\n    EditorID INTEGER,\n    ISBN VARCHAR(255),\n    PublicationDate DATETIME,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Author (\n    AuthorID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Editor (\n    EditorID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "dyq", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a80d", "question": "The radio station needs to manage multiple advertisements. Each advertisement has multiple clients and multiple broadcast time slots. The system needs to record the name, content, and broadcast time of each advertisement, as well as the contact information of clients and the arrangement of time slots.", "answer": "CREATE TABLE Advertisement (\n    Advertisement_ID INTEGER PRIMARY KEY,\n    Content VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Broadcast_Record (\n    Advertisement_ID INTEGER NOT NULL,\n    Time_Slot DATETIME,\n    PRIMARY KEY (Advertisement_ID, Time_Slot),\n    FOREIGN KEY (Advertisement_ID) REFERENCES Advertisement(Advertisement_ID)\n);\n\nCREATE TABLE Advertisement_Push (\n    Advertisement_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Advertisement_ID, User_ID),\n    FOREIGN KEY (Advertisement_ID) REFERENCES Advertisement(Advertisement_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "这里的演播记录表以实体的形式存在，不确定是否正确，我看时间段本身可以唯一确定一行，就没有把时间段单独做成一个表，避免冗余", "assign_to": "zp", "assign_to_round2": "cyx", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a80e", "question": "The database is an advertising management system, whose main function is to manage the broadcast of advertisements and track the advertising broadcast data of customers. The following is a specific description of the requirements:\nAdvertising management: The system can manage the basic information of multiple advertisements, including the name, content, duration, etc. of the advertisement. Each advertisement can have a different broadcast schedule.\n\nCustomer management: The system can record the basic information of customers, including name, email and contact number.\n\nAdvertising broadcast tracking: The system tracks the detailed information of each advertisement broadcast, including the start time, end time, broadcast duration, ratings, etc. of the advertisement.", "answer": "CREATE TABLE Advertisement (\n    Advertisement_Content VARCHAR(255),\n    Advertisement_Duration DATETIME,\n    Advertisement_ID INTEGER PRIMARY KEY,\n    Advertisement_Name VARCHAR(255)\n);\n\nCREATE TABLE Client (\n    Client_Email VARCHAR(255),\n    Client_ID INTEGER PRIMARY KEY,\n    Client_Name VARCHAR(255),\n    Client_Phone VARCHAR(255)\n);\n\nCREATE TABLE Play_Advertisement (\n    Advertisement_ID INTEGER NOT NULL,\n    Client_ID INTEGER NOT NULL,\n    End_Time DATETIME,\n    Play_Duration DATETIME,\n    Start_Time DATETIME,\n    Viewership_Rating FLOAT,\n    PRIMARY KEY (Advertisement_ID, Client_ID),\n    FOREIGN KEY (Advertisement_ID) REFERENCES Advertisement(Advertisement_ID),\n    FOREIGN KEY (Client_ID) REFERENCES Client(Client_ID)\n);", "remarks": "CS 2025/1/3。2025/1/21修改。第二轮中完善了需求描述，修改了模式2的主键，删除了开始时间", "assign_to": "cs", "assign_to_round2": "cyx", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a812", "question": "The theater management system needs to manage information about performances, actors, and venues, and record the participation of actors in each performance. Specifically:\nFor each performance, the system shall record the name, start time, end time, and venue.\nThe theater has multiple venues, each with a name, address, and seating capacity.\nThe theater also has multiple actors, each with a name, email address, and phone number.\nEach performance will invite some actors to participate.", "answer": "CREATE TABLE Venue (\n    Address VARCHAR(255),\n    Name VARCHAR(255),\n    Seating_Capacity INTEGER,\n    Venue_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Actor (\n    Actor_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number INTEGER\n);\n\nCREATE TABLE Performance (\n    End_Time DATETIME,\n    Name VARCHAR(255),\n    Performance_ID INTEGER PRIMARY KEY,\n    Start_Time DATETIME,\n    Venue_ID INTEGER NOT NULL,\n    FOREIGN KEY (Venue_ID) REFERENCES Venue(Venue_ID)\n);\n\nCREATE TABLE Actor_Participation_in_Performance (\n    Actor_ID INTEGER NOT NULL,\n    Performance_ID INTEGER NOT NULL,\n    PRIMARY KEY (Performance_ID, Actor_ID),\n    FOREIGN KEY (Actor_ID) REFERENCES Actor(Actor_ID),\n    FOREIGN KEY (Performance_ID) REFERENCES Performance(Performance_ID)\n);", "remarks": "第二轮完善了需求描述", "assign_to": "dyq", "assign_to_round2": "cyx", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a816", "question": "The urban greening management department requires a system to manage multiple parks. Each park shall have Attributes including name, location, area, and responsible person. The system shall record the plant species, quantity, and growth status for each park. Each record shall include the recording time, recorder, plant species, and quantity. Additionally, the system shall track greening maintenance activities, including maintenance time, maintenance content, maintenance personnel, and maintenance costs.", "answer": "CREATE TABLE Park (\n    Park_Area VARCHAR(255),\n    Park_ID INTEGER PRIMARY KEY,\n    Park_Location VARCHAR(255),\n    Park_Name VARCHAR(255),\n    Responsible_Person VARCHAR(255)\n);\n\nCREATE TABLE Plant (\n    Plant_Category VARCHAR(255),\n    Plant_ID INTEGER PRIMARY KEY,\n    Plant_Name VARCHAR(255)\n);\n\nCREATE TABLE Park_Maintenance (\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Cost FLOAT,\n    Maintenance_ID INTEGER PRIMARY KEY,\n    Maintenance_Personnel VARCHAR(255),\n    Maintenance_Time DATETIME,\n    Park_ID INTEGER NOT NULL,\n    FOREIGN KEY (Park_ID) REFERENCES Park(Park_ID)\n);\n\nCREATE TABLE Park_Ecological_Record (\n    Park_ID INTEGER NOT NULL,\n    Record_Number VARCHAR(255) PRIMARY KEY,\n    Recorder VARCHAR(255),\n    Recording_Time DATETIME,\n    FOREIGN KEY (Park_ID) REFERENCES Park(Park_ID)\n);\n\nCREATE TABLE Plant_Growth_Record (\n    Growth_Status VARCHAR(255),\n    Plant_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Record_Number VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Record_Number, Plant_ID),\n    FOREIGN KEY (Plant_ID) REFERENCES Plant(Plant_ID),\n    FOREIGN KEY (Record_Number) REFERENCES Park_Ecological_Record(Record_Number)\n);", "remarks": "创建了一个公园生态情况记录表，把植物和公园的多对多关系转换为植物和记录的多对多关系避免冗余数据列(记录时间，记录人等信息)的存储", "assign_to": "lzm", "assign_to_round2": "zp", "domain": ["水利、环境和公共设施管理业", "公共设施管理业"]}
{"id": "67552f0a13602ec03b41a81f", "question": "A gas company needs to monitor its production processes. Each production process has a process ID, name, start time, end time, and operator ID. Operators have operator ID, name, department, and contact information. Each monitoring record includes recording time, monitoring parameters, production process ID, and operator ID.", "answer": "CREATE TABLE Operator (\n    Contact_information VARCHAR(255),\n    Department VARCHAR(255),\n    Name VARCHAR(255),\n    Operator_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Production_process (\n    End_time DATETIME,\n    Name VARCHAR(255),\n    Operator_ID INTEGER NOT NULL,\n    Process_ID INTEGER PRIMARY KEY,\n    Start_time DATETIME,\n    FOREIGN KEY (Operator_ID) REFERENCES Operator(Operator_ID)\n);\n\nCREATE TABLE Monitoring_record (\n    Monitoring_parameters VARCHAR(255),\n    Production_process_ID INTEGER NOT NULL,\n    Recording_time DATETIME,\n    PRIMARY KEY (Production_process_ID, Recording_time),\n    FOREIGN KEY (Production_process_ID) REFERENCES Production_process(Process_ID)\n);", "remarks": "监控记录应当作为一个实体存在", "assign_to": "hzb", "assign_to_round2": "zp", "domain": ["生活生产和供应业", "燃气生产和供应业"]}
{"id": "67552f0a13602ec03b41a82c", "question": "The following is a database requirement description for a project fund management system:\n\nThe system aims to manage the fund flow of multiple projects. The project fund management department is responsible for monitoring and recording the financial status of each project. The Projects table records the basic information of each project, including \"Project ID\" (ProjectID, Primary key),\n\"Name\" (Name), and \"Budget\" (Budget), which are used to define and track the basic information and budget of each project. The Fund Flows table records all fund flow information related to the projects, including \"Flow ID\" (FlowID, Primary key),\n\"Project ID\" (ProjectID, Foreign key, associated with the Projects table),\n\"Fund Type\" (Type, income or expenditure),\n\"Amount\" (Amount),\n\"Date\" (Date), and \"Remarks\" (Remarks). By associating the Project ID and Flow ID, the system can accurately track the income and expenditure of each project, ensuring transparent and accurate financial management.\n", "answer": "CREATE TABLE Project (\n    Budget FLOAT,\n    Name VARCHAR(255),\n    Project_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Fund_Flow_Record (\n    Amount INTEGER,\n    Date DATETIME,\n    Flow_ID INTEGER PRIMARY KEY,\n    Fund_Type VARCHAR(255),\n    Project_ID INTEGER NOT NULL,\n    Remarks VARCHAR(255),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "dyq", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a82d", "question": "The laboratory reagent management department is responsible for managing multiple laboratory reagents, ensuring the accuracy and real-time updates of information such as inventory, usage status, and expiration dates. Each reagent is utilized by multiple laboratories to ensure an orderly distribution and usage process.\n\nReagent information includes Reagent ID, name, specifications, inventory quantity, and expiration date. Each laboratory has a unique Laboratory ID, name, person in charge, and location. To track the usage of reagents, it is necessary to record each instance of reagent usage, including Usage ID, Reagent ID, Laboratory ID, usage date, user, and usage quantity.\n\nThe system shall support querying reagent usage records and inventory status and shall be able to generate statistical reports based on reagents, laboratories, and usage dates, assisting management in timely monitoring of inventory information and reagent usage status. Additionally, the system shall provide alerts for impending reagent expiration to ensure laboratory experiments are not affected.", "answer": "CREATE TABLE Reagent (\n    Expiration_Date DATETIME,\n    Inventory_Quantity INTEGER,\n    Reagent_ID INTEGER PRIMARY KEY,\n    Reagent_Name VARCHAR(255),\n    Reagent_Specifications VARCHAR(255)\n);\n\nCREATE TABLE Laboratory (\n    Laboratory_ID INTEGER PRIMARY KEY,\n    Laboratory_Location VARCHAR(255),\n    Laboratory_Name VARCHAR(255),\n    Laboratory_Person_in_Charge_ID INTEGER\n);\n\nCREATE TABLE Personnel (\n    Affiliated_Laboratory_ID INTEGER NOT NULL,\n    Age INTEGER,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Personnel_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Affiliated_Laboratory_ID) REFERENCES Laboratory(Laboratory_ID)\n);\n\nCREATE TABLE Reagent_Usage_Record (\n    Reagent_ID INTEGER NOT NULL,\n    Usage_Duration VARCHAR(255),\n    Usage_Personnel_ID INTEGER NOT NULL,\n    Usage_Quantity INTEGER,\n    Usage_Start_Time DATETIME,\n    PRIMARY KEY (Reagent_ID, Usage_Personnel_ID, Usage_Start_Time),\n    FOREIGN KEY (Reagent_ID) REFERENCES Reagent(Reagent_ID),\n    FOREIGN KEY (Usage_Personnel_ID) REFERENCES Personnel(Personnel_ID)\n);", "remarks": "CS 2025/1/3\nZP 修改了需求描述：引入使用人员以及负责人，修改了schema的表名，添加了缺少的1对多关系", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["科学研究和技术服务业", "专业技术服务业"]}
{"id": "67552f0a13602ec03b41a838", "question": "Business Requirements Description:\n\nA property management company manages multiple facilities within a residential community. Each facility has an ID, name, and location. For each maintenance event, the maintenance time, content, cost, and personnel involved need to be recorded. Maintenance personnel include their ID, name, and contact information.\n", "answer": "CREATE TABLE Facility_Table (\n    facility_ID INTEGER PRIMARY KEY,\n    facility_location VARCHAR(255),\n    facility_name VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_Personnel_Table (\n    contact_number VARCHAR(255),\n    maintenance_personnel_ID INTEGER PRIMARY KEY,\n    name VARCHAR(255)\n);\n\nCREATE TABLE Facility_Maintenance_Table (\n    facility_ID INTEGER NOT NULL,\n    maintenance_content VARCHAR(255),\n    maintenance_cost FLOAT,\n    maintenance_personnel_ID INTEGER NOT NULL,\n    maintenance_time DATETIME,\n    PRIMARY KEY (maintenance_personnel_ID, facility_ID, maintenance_time),\n    FOREIGN KEY (facility_ID) REFERENCES Facility_Table(facility_ID),\n    FOREIGN KEY (maintenance_personnel_ID) REFERENCES Maintenance_Personnel_Table(maintenance_personnel_ID)\n);", "remarks": "修改了schema的表名", "assign_to": "gcc", "assign_to_round2": "zp", "domain": ["居民服务、修理和其他服务业", "居民服务业"]}
{"id": "67552f0a13602ec03b41a83b", "question": "Business Requirements Description:\nA coal mining company operates several mines, and each mine uses various types of equipment. Equipment has an ID, name, model, purchase date, and other relevant details. Mines have a mine ID, name, location, and person in charge. For each equipment maintenance event, the maintenance date, maintenance content, personnel, and maintenance cost need to be recorded. Maintenance personnel include their ID, name, and contact number. The information system should provide statistical analysis of the usage and maintenance of the equipment.", "answer": "CREATE TABLE Mine_Table (\n    location VARCHAR(255),\n    mine_ID INTEGER PRIMARY KEY,\n    mine_name VARCHAR(255),\n    person_in_charge VARCHAR(255)\n);\n\nCREATE TABLE Maintenance_Personnel_Table (\n    contact_number INTEGER,\n    maintenance_personnel_ID INTEGER PRIMARY KEY,\n    name VARCHAR(255)\n);\n\nCREATE TABLE Equipment_Table (\n    equipment_ID INTEGER PRIMARY KEY,\n    mine_ID INTEGER NOT NULL,\n    model VARCHAR(255),\n    name VARCHAR(255),\n    purchase_date DATETIME,\n    FOREIGN KEY (mine_ID) REFERENCES Mine_Table(mine_ID)\n);\n\nCREATE TABLE Maintenance_Record_Table (\n    equipment_ID INTEGER NOT NULL,\n    maintenance_content VARCHAR(255),\n    maintenance_cost FLOAT,\n    maintenance_date DATETIME,\n    maintenance_personnel_ID INTEGER NOT NULL,\n    PRIMARY KEY (equipment_ID, maintenance_date),\n    FOREIGN KEY (equipment_ID) REFERENCES Equipment_Table(equipment_ID),\n    FOREIGN KEY (maintenance_personnel_ID) REFERENCES Maintenance_Personnel_Table(maintenance_personnel_ID)\n);", "remarks": "ZP：修改了设备分配关系属性，删除了设备维护关系的冗余主键和冗余属性，修改了schema的表名", "assign_to": "gcc", "assign_to_round2": "zp", "domain": ["采矿业", "煤炭开采和洗选业"]}
{"id": "67552f0a13602ec03b41a845", "question": "The bank management system requirements are described as follows: The bank has multiple branch offices, and the name and address of each branch office are recorded. Each branch office has multiple customers, and each customer has a Customer ID, name, ID number, contact phone number, and email address.\nCustomers can open accounts at multiple branch offices, and each account has a unique Account number, Account type (Savings, Checking), balance, and open date.\nThe bank needs to record the transaction history of customers, including Transaction type (Deposit, Withdrawal), Transaction amount, Transaction time, and Transaction location.", "answer": "CREATE TABLE Branch_Office (\n    Address VARCHAR(255),\n    Branch_Office_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Contact_Phone_Number INTEGER,\n    Customer_ID INTEGER PRIMARY KEY,\n    Email_Address VARCHAR(255),\n    ID_Number INTEGER,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Account (\n    Account_Number INTEGER PRIMARY KEY,\n    Account_Type VARCHAR(255),\n    Balance FLOAT,\n    Branch_Office_ID INTEGER NOT NULL,\n    Customer_ID INTEGER NOT NULL,\n    Open_Date DATETIME,\n    FOREIGN KEY (Branch_Office_ID) REFERENCES Branch_Office(Branch_Office_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Transaction_Record (\n    Account_Number INTEGER NOT NULL,\n    Transaction_Amount FLOAT,\n    Transaction_ID INTEGER PRIMARY KEY,\n    Transaction_Location VARCHAR(255),\n    Transaction_Time DATETIME,\n    Transaction_Type VARCHAR(255),\n    FOREIGN KEY (Account_Number) REFERENCES Account(Account_Number)\n);", "remarks": "第二轮完善了需求描述，同时认为第一轮对实体和关系的设计不对，但模式正确", "assign_to": "dyq", "assign_to_round2": "cyx", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a84a", "question": "The futures company employs multiple traders, each of whom is assigned a unique trader ID, name, hire date, and contact number. Traders execute futures transactions for clients, with each client identified by a client ID, name, ID number, and contact number. Each transaction must record the futures code, transaction type (buy, sell), transaction quantity, transaction price, and transaction time. Additionally, the futures company shall maintain records of each trader's transaction performance and the risk level of each client.", "answer": "CREATE TABLE Trader (\n    Contact_Number VARCHAR(255),\n    Hire_Date DATETIME,\n    Name VARCHAR(255),\n    Trader_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Client (\n    Client_ID INTEGER PRIMARY KEY,\n    Client_Name VARCHAR(255),\n    Contact_Number VARCHAR(255),\n    ID_Number VARCHAR(255),\n    Risk_Level INTEGER\n);\n\nCREATE TABLE Transaction (\n    Client_ID INTEGER NOT NULL,\n    Futures_Code VARCHAR(255),\n    Trader_ID INTEGER NOT NULL,\n    Transaction_Price FLOAT,\n    Transaction_Quantity INTEGER,\n    Transaction_Time DATETIME,\n    Transaction_Type VARCHAR(255),\n    PRIMARY KEY (Trader_ID, Client_ID, Futures_Code),\n    FOREIGN KEY (Client_ID) REFERENCES Client(Client_ID),\n    FOREIGN KEY (Trader_ID) REFERENCES Trader(Trader_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "dyq", "domain": ["金融业", "资本市场服务"]}
{"id": "67552f0a13602ec03b41a84c", "question": "Here is the English translation in database requirement description style:\n\nThe following describes the business requirements for a private wealth management system database: The private wealth management company is responsible for providing asset management services to multiple clients, and financial advisors are responsible for developing investment plans based on clients' needs and risk preferences. The Financial Advisor (Advisor ID, Name, Hire Date, Contact Number) table records the basic information of each advisor for identifying and managing the company's financial advisors. The Client (Client ID, Name, ID Number, Contact Number, Risk Preference, Total Assets) table records detailed information about clients, managing each client's basic situation and financial needs.\n\nThe Financial Product (Product Code, Product Name, Product Type, Product Value) table contains various financial products offered by the company, helping manage and display products available for client investment. The Investment Portfolio (Portfolio ID, Client ID, Product Code, Quantity Held) table is used to record the financial products held by each client, ensuring the ability to track clients' investment situations.\n\nThe Transaction Record (Record ID, Portfolio ID, Product Code, Transaction Type, Transaction Quantity, Transaction Price, Transaction Time) table records each client transaction to track and manage client trading behavior.\n\nThrough the above data tables, the system can comprehensively manage client assets, risk preferences, investment portfolios, and transaction records, assisting financial advisors in developing appropriate wealth management plans for clients.\n", "answer": "CREATE TABLE Financial_Advisor (\n    Advisor_ID INTEGER PRIMARY KEY,\n    Contact_Number VARCHAR(255),\n    Hire_Date DATETIME,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Client (\n    Client_ID INTEGER PRIMARY KEY,\n    Contact_Number VARCHAR(255),\n    ID_Number VARCHAR(255),\n    Name VARCHAR(255),\n    Risk_Preference VARCHAR(255),\n    Total_Assets FLOAT\n);\n\nCREATE TABLE Financial_Product (\n    Product_Code VARCHAR(255) PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Product_Type VARCHAR(255),\n    Product_Value INTEGER\n);\n\nCREATE TABLE Client_Inquiry_Advisor (\n    Advisor_ID INTEGER NOT NULL,\n    Client_ID INTEGER NOT NULL,\n    Inquiry_Content VARCHAR(255),\n    Inquiry_Time DATETIME,\n    PRIMARY KEY (Advisor_ID, Client_ID, Inquiry_Time),\n    FOREIGN KEY (Advisor_ID) REFERENCES Financial_Advisor(Advisor_ID),\n    FOREIGN KEY (Client_ID) REFERENCES Client(Client_ID)\n);\n\nCREATE TABLE Client_Holds_Financial_Products (\n    Client_ID INTEGER NOT NULL,\n    Product_Code VARCHAR(255) NOT NULL,\n    Quantity_Held INTEGER,\n    PRIMARY KEY (Client_ID, Product_Code),\n    FOREIGN KEY (Client_ID) REFERENCES Client(Client_ID),\n    FOREIGN KEY (Product_Code) REFERENCES Financial_Product(Product_Code)\n);\n\nCREATE TABLE Client_Transactions_Products (\n    Client_ID INTEGER NOT NULL,\n    Product_Code VARCHAR(255) NOT NULL,\n    Transaction_Price FLOAT,\n    Transaction_Quantity INTEGER,\n    Transaction_Time DATETIME,\n    Transaction_Type VARCHAR(255),\n    PRIMARY KEY (Client_ID, Product_Code, Transaction_Time),\n    FOREIGN KEY (Client_ID) REFERENCES Client(Client_ID),\n    FOREIGN KEY (Product_Code) REFERENCES Financial_Product(Product_Code)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "dyq", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a850", "question": "The document management system of a university needs to manage multiple types of documents. Each document type has a unique identifier and name, as well as a version number.\nEach document type can have multiple status categories, such as \"Lifecycle Status\", \"Approval Status\", etc. Each status category has a corresponding version number and multiple statuses. Each status has a sequence number indicating its position in the process.", "answer": "CREATE TABLE Document_Type (\n    Document_Type_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Version_Number VARCHAR(255)\n);\n\nCREATE TABLE Status_Category (\n    Name VARCHAR(255),\n    Status_Category_ID INTEGER PRIMARY KEY,\n    Version_Number VARCHAR(255)\n);\n\nCREATE TABLE Status (\n    Name VARCHAR(255),\n    Sequence_Number VARCHAR(255),\n    Status_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Status_Category_Document_Type (\n    Document_Type_ID INTEGER NOT NULL,\n    Status_Category_ID INTEGER NOT NULL,\n    PRIMARY KEY (Status_Category_ID, Document_Type_ID),\n    FOREIGN KEY (Document_Type_ID) REFERENCES Document_Type(Document_Type_ID),\n    FOREIGN KEY (Status_Category_ID) REFERENCES Status_Category(Status_Category_ID)\n);\n\nCREATE TABLE Status_Status_Category (\n    Status_Category_ID INTEGER NOT NULL,\n    Status_ID INTEGER NOT NULL,\n    PRIMARY KEY (Status_ID, Status_Category_ID),\n    FOREIGN KEY (Status_Category_ID) REFERENCES Status_Category(Status_Category_ID),\n    FOREIGN KEY (Status_ID) REFERENCES Status(Status_ID)\n);", "remarks": "第二轮完善了需求描述；同时认为状态类别与文档类型、状态类别与状态都是多对多联系，故修改了模式1与模式2，增加了模式3与模式4", "assign_to": "dyq", "assign_to_round2": "cyx", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a855", "question": "The employee management system of a company requires the following:\nThe system shall record the basic information of employees, including name, position, phone number, salary level, supervisor, and department.       \nDefine different salary levels and their corresponding salary ranges.\nMeanwhile, the system shall manage department information, such as department number, name, and location, and assign employees to the corresponding departments.", "answer": "CREATE TABLE Salary_Level (\n    Maximum_Salary FLOAT,\n    Minimum_Salary FLOAT,\n    Salary_Level_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Location VARCHAR(255),\n    Department_Name VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255),\n    Salary_Level_ID INTEGER NOT NULL,\n    Supervisor_ID INTEGER NOT NULL,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Salary_Level_ID) REFERENCES Salary_Level(Salary_Level_ID),\n    FOREIGN KEY (Supervisor_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "第二轮完善了需求描述", "assign_to": "dyq", "assign_to_round2": "cyx", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a85a", "question": "Business Requirements Description:\nA weather forecasting system is used to store and manage weather forecast data for different cities. The system should record basic city information, including city name, longitude, latitude, country, population, and timezone. The system should also store daily weather forecast data for each city, including date, sunrise and sunset times, temperature at different times of the day, “feels like” temperature, atmospheric pressure, humidity, wind speed, wind direction, cloud cover, and precipitation probability. Additionally, the weather type should include a main description, detailed description, and icon.", "answer": "CREATE TABLE City (\n    city_ID INTEGER PRIMARY KEY,\n    city_name VARCHAR(255),\n    country VARCHAR(255),\n    latitude FLOAT,\n    longitude FLOAT,\n    population INTEGER,\n    timezone VARCHAR(255)\n);\n\nCREATE TABLE Weather_Description (\n    detailed_description VARCHAR(255),\n    icon BLOB,\n    main_description VARCHAR(255),\n    weather_type_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Weather_Forecast (\n    afternoon_temperature FLOAT,\n    atmospheric_pressure FLOAT,\n    city_ID INTEGER NOT NULL,\n    cloud_cover VARCHAR(255),\n    date DATETIME,\n    feels_like_temperature FLOAT,\n    forecast_ID INTEGER PRIMARY KEY,\n    humidity FLOAT,\n    morning_temperature FLOAT,\n    noon_temperature FLOAT,\n    precipitation_probability FLOAT,\n    sunrise_time DATETIME,\n    sunset_time DATETIME,\n    weather_type_ID INTEGER NOT NULL,\n    wind_direction VARCHAR(255),\n    wind_speed FLOAT,\n    FOREIGN KEY (city_ID) REFERENCES City(city_ID),\n    FOREIGN KEY (weather_type_ID) REFERENCES Weather_Description(weather_type_ID)\n);", "remarks": "第二轮完善了需求描述", "assign_to": "gcc", "assign_to_round2": "cyx", "domain": ["水利、环境和公共设施管理业", "生态保护和环境治理业"]}
{"id": "67552f0a13602ec03b41a874", "question": "This database is a database used to manage and record the central material supply and billing system, mainly used for material procurement and expense management of scientific research institutions or laboratories.\n\nMain functions that the database can achieve\n\n1. Central material supply project management:\nRecord detailed information of each material supply project, including project number, material code, description, quantity, unit, cost, charge amount, etc.\nManage time information such as the creation date and closing date of the material supply project.\nRecord project number, bill and other information.\n\n2. Bill management:\nGenerate and record bill details for each material supply project, including material quantity, unit, cost, charge amount, etc.\nRecord the creation and modification time of the bill.\nManage the verification errors of the bill and their handling.", "answer": "CREATE TABLE Material_Table (\n    Material_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Unit_Price FLOAT\n);\n\nCREATE TABLE Project_Table (\n    Close_Date DATETIME,\n    Creation_Date DATETIME,\n    Project_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Bill_Table (\n    Bill_ID INTEGER PRIMARY KEY,\n    Creation_Time DATETIME,\n    Modification_Time DATETIME,\n    Project_ID INTEGER NOT NULL,\n    Total_Sale_Amount FLOAT,\n    Unit VARCHAR(255),\n    FOREIGN KEY (Project_ID) REFERENCES Project_Table(Project_ID)\n);\n\nCREATE TABLE Bill_Details_Table (\n    Bill_ID INTEGER NOT NULL,\n    Material_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Selling_Price FLOAT,\n    PRIMARY KEY (Bill_ID, Material_ID),\n    FOREIGN KEY (Bill_ID) REFERENCES Bill_Table(Bill_ID),\n    FOREIGN KEY (Material_ID) REFERENCES Material_Table(Material_ID)\n);", "remarks": "重构了整体结构，删除了需求描述中不正确的部分，修改了表的中英文描述", "assign_to": "szh", "assign_to_round2": "zp", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a877", "question": "Business Requirements Description:\nThis database can be used for an online seat reservation system, such as for cinemas, theaters, or conference halls. The system can record and manage seat information for different areas, including seat locations (X-coordinate, Y-coordinate, row, column), type, price, creation time, update time, etc. The system can mark the validity of seats using a flag field, such as whether a seat has been reserved or purchased. The system supports multiple seat layout templates, including template name and description, which are suitable for different occasions or time periods. Users have a unique ID, name, contact number, and email address. Users can query available seats based on seat location, type, price, etc. Users can select seats online for reservation or purchase, and the system will update the seat status accordingly.", "answer": "CREATE TABLE Seat_Template (\n    description VARCHAR(255),\n    template_ID INTEGER PRIMARY KEY,\n    template_name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    contact_number VARCHAR(255),\n    email VARCHAR(255),\n    name VARCHAR(255),\n    user_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Seat (\n    column INTEGER,\n    creation_time DATETIME,\n    flag BOOL,\n    location_X INTEGER,\n    location_Y INTEGER,\n    price FLOAT,\n    reservedPurchasedUserID INTEGER NOT NULL,\n    row INTEGER,\n    seat_ID INTEGER PRIMARY KEY,\n    type VARCHAR(255),\n    update_time DATETIME,\n    FOREIGN KEY (reservedPurchasedUserID) REFERENCES User(user_ID)\n);\n\nCREATE TABLE Seat_Template_Layout (\n    occasion VARCHAR(255),\n    seat_ID INTEGER NOT NULL,\n    template_ID INTEGER NOT NULL,\n    time_period VARCHAR(255),\n    PRIMARY KEY (seat_ID, template_ID),\n    FOREIGN KEY (seat_ID) REFERENCES Seat(seat_ID),\n    FOREIGN KEY (template_ID) REFERENCES Seat_Template(template_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "dyq", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a87e", "question": "The requirement analysis for a medical record management system is as follows: record basic information of doctors, including name, gender, telephone number, date of birth, age, department affiliation, and level. Record various medicines’ name, function, unit price, and inventory. Record basic information of patients, including name, gender, date of birth, age, phone, address, and emergency contact number; also, patient medication records need to be recorded, including Patient ID, Medicine ID, dosage, frequency of medication, precautions, and prescription time; in addition, consultation records including consultation time, diagnosis results, and treatment recommendations need to be recorded.", "answer": "CREATE TABLE Patient (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Date_of_Birth DATETIME,\n    Emergency_Contact_Number VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Patient_ID INTEGER PRIMARY KEY,\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Doctor (\n    Age INTEGER,\n    Date_of_Birth DATETIME,\n    Department_Affiliation VARCHAR(255),\n    Doctor_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Level INTEGER,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Medicine (\n    Medicine_Function VARCHAR(255),\n    Medicine_ID INTEGER PRIMARY KEY,\n    Medicine_Inventory INTEGER,\n    Medicine_Name VARCHAR(255),\n    Medicine_Unit_Price FLOAT\n);\n\nCREATE TABLE Consultation_Record (\n    Consultation_Time DATETIME,\n    Diagnosis_Results VARCHAR(255),\n    Doctor_ID INTEGER NOT NULL,\n    Patient_ID INTEGER NOT NULL,\n    Treatment_Recommendations VARCHAR(255),\n    PRIMARY KEY (Patient_ID, Doctor_ID, Consultation_Time),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);\n\nCREATE TABLE Patient_Medication_Record (\n    Dosage FLOAT,\n    Frequency_of_Medication VARCHAR(255),\n    Medicine_ID INTEGER NOT NULL,\n    Patient_ID INTEGER NOT NULL,\n    Precautions VARCHAR(255),\n    Prescription_Time DATETIME,\n    PRIMARY KEY (Patient_ID, Medicine_ID, Prescription_Time),\n    FOREIGN KEY (Medicine_ID) REFERENCES Medicine(Medicine_ID),\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);", "remarks": "CS 2025/1/7，第二轮完善了需求描述", "assign_to": "cs", "assign_to_round2": "cyx", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0a13602ec03b41a87f", "question": "Business Requirements Description:\nThis database is for an Agile Development Management System used to manage stories (requirements), tasks, sprints (iterations), and acceptance criteria within a project. The primary features include:\n1.Manage Stories (Requirements): Create and edit stories, including story descriptions, status, story points, and titles. Assign stories to specific projects and sprints.\n2.Manage Tasks: For each story, create and assign tasks, including task titles, descriptions, and status.\n3.Manage Sprints (Iterations): Create and manage sprints within a project. Each sprint belongs to a project and includes a name, start time, end time, and status. Assign stories to specific sprints.\n4.Manage Acceptance Criteria: For each story, create acceptance criteria, including criteria ID, description, and status. Track and manage the acceptance criteria for stories.\n5.Message Event Management: Record message events related to specific topics, including event ID, subject, message reference, version, creation time, and update time. This is used for messaging and event recording within the project.\nThrough these features, the system helps teams better manage and track project progress, ensuring each story and task is completed on time and meets the acceptance criteria.", "answer": "CREATE TABLE Project (\n    creation_time DATETIME,\n    project_ID INTEGER PRIMARY KEY,\n    project_description VARCHAR(255),\n    project_name VARCHAR(255),\n    update_time DATETIME\n);\n\nCREATE TABLE Acceptance_Criteria_Table (\n    acceptance_criteria_ID INTEGER PRIMARY KEY,\n    description VARCHAR(255),\n    status VARCHAR(255)\n);\n\nCREATE TABLE Sprint (\n    end_time DATETIME,\n    project_ID INTEGER NOT NULL,\n    sprint_ID INTEGER PRIMARY KEY,\n    sprint_name VARCHAR(255),\n    start_time DATETIME,\n    status VARCHAR(255),\n    FOREIGN KEY (project_ID) REFERENCES Project(project_ID)\n);\n\nCREATE TABLE Message_Event (\n    creation_time DATETIME,\n    message_event_ID INTEGER PRIMARY KEY,\n    message_reference VARCHAR(255),\n    project_ID INTEGER NOT NULL,\n    subject VARCHAR(255),\n    update_time DATETIME,\n    version VARCHAR(255),\n    FOREIGN KEY (project_ID) REFERENCES Project(project_ID)\n);\n\nCREATE TABLE Story (\n    description VARCHAR(255),\n    project_ID INTEGER NOT NULL,\n    sprint_ID INTEGER NOT NULL,\n    status VARCHAR(255),\n    story_ID INTEGER PRIMARY KEY,\n    story_points VARCHAR(255),\n    title VARCHAR(255),\n    FOREIGN KEY (project_ID) REFERENCES Project(project_ID),\n    FOREIGN KEY (sprint_ID) REFERENCES Sprint(sprint_ID)\n);\n\nCREATE TABLE Task (\n    description VARCHAR(255),\n    status VARCHAR(255),\n    story_ID INTEGER NOT NULL,\n    task_ID INTEGER PRIMARY KEY,\n    title VARCHAR(255),\n    FOREIGN KEY (story_ID) REFERENCES Story(story_ID)\n);", "remarks": "删除了验收标准实体中的冗余主键，删除了所有关系的冗余属性，修改了schema的表名，删除了实体中多余的一对多关系属性(详见示例)", "assign_to": "gcc", "assign_to_round2": "zp", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a883", "question": "The database business requirement description for a role-based access control system is as follows: The system is designed to manage the association between roles and permissions. Each role has Attributes such as name, description, creation time, and update time. Each permission also has information such as name, description, creation time, and update time. The system records the relationship between roles and permissions, including Role ID, Permission ID, creation time, and update time. The association between roles and permissions ensures the consistency and completeness of the system data.\n", "answer": "CREATE TABLE Role (\n    Creation_Time DATETIME,\n    Role_Description VARCHAR(255),\n    Role_ID INTEGER PRIMARY KEY,\n    Role_Name VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Permission (\n    Creation_Time DATETIME,\n    Permission_Description VARCHAR(255),\n    Permission_ID INTEGER PRIMARY KEY,\n    Permission_Name VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Role_Permission_Assignment (\n    Creation_Time DATETIME,\n    Permission_ID INTEGER NOT NULL,\n    Role_ID INTEGER NOT NULL,\n    Update_Time DATETIME,\n    PRIMARY KEY (Role_ID, Permission_ID),\n    FOREIGN KEY (Permission_ID) REFERENCES Permission(Permission_ID),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);", "remarks": "删除了需求描述中不正确的部分，修改了schema的表名", "assign_to": "szc", "assign_to_round2": "zp", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a886", "question": "The system is a metadata repository for task scheduling, specifically suited for the Quartz scheduling framework. Quartz is an open-source job scheduling framework widely used in Java applications, responsible for managing and scheduling timed tasks. The system supports task definition, trigger management, Cron scheduling, simple triggers, task instance management, and other functions. \n\nThe core entities in the system include tasks, schedulers, triggers, and locks. The task entity mainly consists of task ID, task name, task description, class name, persistence flag, and concurrent execution flag. The task ID is the unique identifier, and all other properties depend on the task ID. The scheduler entity contains scheduler ID, scheduler name, scheduler status, scheduler configuration, and scheduler logs, with the scheduler ID being the unique identifier, and other Attributes describing the configuration and status of the scheduler. The trigger entity includes trigger ID and trigger name, recording basic information for all triggers in the system. Additionally, triggers are divided into sub-entities by type, such as simple triggers, Cron triggers, complex triggers, and Blob triggers, each type having different Attributes.\n\nSimple triggers include trigger ID, trigger name, trigger type, repeat count, repeat interval, and triggered count; Cron triggers contain trigger ID, trigger name, trigger type, Cron expression, and timezone; complex triggers include trigger ID, trigger name, trigger type, and Attributes like string, integer, long integer, decimal, and boolean; Blob triggers possess trigger ID, trigger name, trigger type, and binary Attributes. The lock entity is used to control concurrency in the task scheduling process, with Attributes including lock ID, lock name, lock status, and lock description.\n\nThe relationships within the system are also crucial. The task-to-trigger relationship table records the association between each task and its triggers, containing task ID, trigger ID, next execution time, last execution time, priority, trigger status, start time, end time, calendar name, and fault instruction. Each task can use multiple triggers, and each trigger may also be associated with multiple tasks. The scheduler-to-task relationship table describes which schedulers schedule which tasks, linking scheduler ID, task ID, and trigger ID. The scheduler-to-lock relationship table records the relationship between schedulers and locks, ensuring lock management in a multi-instance environment, Attributes include scheduler ID, lock ID, acquisition time, and release time. \n\nThese entities and relationships constitute the basic framework of the task scheduling system, ensuring task scheduling, execution, and concurrency control, adapting to complex scheduling requirements and multi-instance environments.\n", "answer": "CREATE TABLE Task (\n    Class_Name VARCHAR(255),\n    Concurrent_Execution_Flag BOOL,\n    Persistence_Flag BOOL,\n    Task_Description VARCHAR(255),\n    Task_ID INTEGER PRIMARY KEY,\n    Task_Name VARCHAR(255)\n);\n\nCREATE TABLE Trigger_Summary (\n    Trigger_ID INTEGER PRIMARY KEY,\n    Trigger_Name VARCHAR(255)\n);\n\nCREATE TABLE Scheduler (\n    Scheduler_Configuration VARCHAR(255),\n    Scheduler_ID INTEGER PRIMARY KEY,\n    Scheduler_Log VARCHAR(255),\n    Scheduler_Name VARCHAR(255),\n    Scheduler_Status VARCHAR(255)\n);\n\nCREATE TABLE Simple_Trigger (\n    Count_Of_Triggers INTEGER,\n    Repeat_Count INTEGER,\n    Repeat_Interval INTEGER,\n    Trigger_ID INTEGER PRIMARY KEY,\n    Trigger_Name VARCHAR(255),\n    Trigger_Type VARCHAR(255)\n);\n\nCREATE TABLE Cron_Trigger (\n    Cron_Expression VARCHAR(255),\n    Timezone VARCHAR(255),\n    Trigger_ID INTEGER PRIMARY KEY,\n    Trigger_Name VARCHAR(255),\n    Trigger_Type VARCHAR(255)\n);\n\nCREATE TABLE Complex_Trigger (\n    Boolean_Attributes BOOL,\n    Decimal_Attributes FLOAT,\n    Integer_Attributes INTEGER,\n    Long_Integer_Attributes VARCHAR(255),\n    String_Attributes VARCHAR(255),\n    Trigger_ID INTEGER PRIMARY KEY,\n    Trigger_Name VARCHAR(255),\n    Trigger_Type VARCHAR(255)\n);\n\nCREATE TABLE Blob_Trigger (\n    Binary_Attributes BLOB,\n    Trigger_ID INTEGER PRIMARY KEY,\n    Trigger_Name VARCHAR(255),\n    Trigger_Type VARCHAR(255)\n);\n\nCREATE TABLE Lock (\n    Lock_Description VARCHAR(255),\n    Lock_ID INTEGER PRIMARY KEY,\n    Lock_Name VARCHAR(255),\n    Lock_Status VARCHAR(255)\n);\n\nCREATE TABLE Task_Uses_Trigger (\n    Calendar_Name VARCHAR(255),\n    End_Time DATETIME,\n    Fault_Instruction VARCHAR(255),\n    Last_Execution_Time DATETIME,\n    Next_Execution_Time DATETIME,\n    Priority INTEGER,\n    Start_Time DATETIME,\n    Task_ID INTEGER NOT NULL,\n    Trigger_ID INTEGER NOT NULL,\n    Trigger_Status VARCHAR(255),\n    PRIMARY KEY (Task_ID, Trigger_ID),\n    FOREIGN KEY (Task_ID) REFERENCES Task(Task_ID),\n    FOREIGN KEY (Trigger_ID) REFERENCES Trigger_Summary(Trigger_ID)\n);\n\nCREATE TABLE Scheduler_Schedules_Task (\n    Scheduler_ID INTEGER NOT NULL,\n    Task_ID INTEGER NOT NULL,\n    Trigger_ID INTEGER NOT NULL,\n    PRIMARY KEY (Scheduler_ID, Task_ID, Trigger_ID),\n    FOREIGN KEY (Scheduler_ID) REFERENCES Scheduler(Scheduler_ID),\n    FOREIGN KEY (Task_ID) REFERENCES Task(Task_ID),\n    FOREIGN KEY (Trigger_ID) REFERENCES Trigger_Summary(Trigger_ID)\n);\n\nCREATE TABLE Scheduler_Acquires_Lock (\n    Acquisition_Time DATETIME,\n    Lock_ID INTEGER NOT NULL,\n    Release_Time DATETIME,\n    Scheduler_ID INTEGER NOT NULL,\n    PRIMARY KEY (Scheduler_ID, Lock_ID),\n    FOREIGN KEY (Lock_ID) REFERENCES Lock(Lock_ID),\n    FOREIGN KEY (Scheduler_ID) REFERENCES Scheduler(Scheduler_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a88c", "question": "The requirements analysis for the company's internal management system is as follows:  \n\nCompany Management:  \nStore company information, including Company ID, Creation Date, Update Date, Company Website, and Company Name. The Company Name is unique. Operations include adding, modifying, and deleting company information, such as the company name and website.  \n\nUser Management:  \nStore user information, including User ID, Creation Date, Update Date, Is Admin, Real Name, Password Type, Password Salt, Username, Email, Password, Display Name Usage, Is Developer, and Last Login Time. The Username and Email are unique. Operations include registering new users, modifying user information, setting admin and developer roles, and recording the last login time. A company can have multiple users.  \n\nAPI Key Management:  \nStore API key information, including Key ID, Creation Date, Update Date, Private Key, Application Reason, Key Name, and URI. The Key Name is unique and is associated with the user table. A user can only have one API key. Users can apply for an API key and provide a reason for the application.  \n\nEmployee Management:  \nStore employee information, including Employee ID, Creation Date, Update Date, Employee Name, Position, and Salary. This is associated with the company table, and a company can have multiple employees. Operations include managing employee information such as name, position, and salary, as well as assigning employees to different companies.  \n\nSite Management:  \nStore site information, including Site ID, Creation Date, Update Date, Database Name, Is Deprecated, Site Name, Hostname, and Site Abbreviation. The Database Name and Site Abbreviation are unique and are associated with the user table. A user can only use one site. Operations include managing site information such as site name, hostname, and site abbreviation, as well as marking sites as deprecated.  \n\nDevice Management:  \nStore device information, including Device ID, Creation Date, Update Date, Device Name, and Associated Employee ID. This is associated with the employee table, and an employee can manage multiple devices.", "answer": "CREATE TABLE Companies_Table (\n    Company_ID INTEGER PRIMARY KEY,\n    Company_Name VARCHAR(255),\n    Company_Website VARCHAR(255),\n    Creation_Date DATETIME,\n    Update_Date DATETIME\n);\n\nCREATE TABLE API_Keys_Table (\n    Application_Reason VARCHAR(255),\n    Creation_Date DATETIME,\n    Key_ID INTEGER PRIMARY KEY,\n    Key_Name VARCHAR(255),\n    Private_Key VARCHAR(255),\n    URI VARCHAR(255),\n    Update_Date DATETIME\n);\n\nCREATE TABLE Employees_Table (\n    Company_ID INTEGER,\n    Creation_Date DATETIME,\n    Employee_ID INTEGER PRIMARY KEY,\n    Employee_Name VARCHAR(255),\n    Position VARCHAR(255),\n    Salary VARCHAR(255),\n    Update_Date DATETIME\n);\n\nCREATE TABLE Sites_Table (\n    Creation_Date DATETIME,\n    Database_Name VARCHAR(255),\n    Hostname VARCHAR(255),\n    Is_Deprecated BOOL,\n    Site_Abbreviation VARCHAR(255),\n    Site_ID INTEGER PRIMARY KEY,\n    Site_Name VARCHAR(255),\n    Update_Date DATETIME\n);\n\nCREATE TABLE Devices_Table (\n    Associated_Employee_ID INTEGER,\n    Creation_Date DATETIME,\n    Device_ID INTEGER PRIMARY KEY,\n    Device_Name VARCHAR(255),\n    Update_Date DATETIME\n);\n\nCREATE TABLE Users_Table (\n    Company_ID INTEGER,\n    Creation_Date DATETIME,\n    Display_Name_Usage VARCHAR(255),\n    Email VARCHAR(255),\n    Is_Admin BOOL,\n    Is_Developer BOOL,\n    Last_Login_Time DATETIME,\n    Password VARCHAR(255),\n    Password_Salt VARCHAR(255),\n    Password_Type VARCHAR(255),\n    Real_Name VARCHAR(255),\n    Site_ID INTEGER NOT NULL,\n    Update_Date DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255),\n    FOREIGN KEY (Site_ID) REFERENCES Sites_Table(Site_ID)\n);", "remarks": "修改了需求描述中冗余部分，删除了不正确的关系api权限，修改了实体和schema表名的中英文，用户与站点的关系应为多对一", "assign_to": "cyx", "assign_to_round2": "zp", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a89e", "question": "Below is a database business requirement description for a session management system: The system is designed to manage user session information, including session creation, access, expiration, and association with user information. The session table includes fields such as Session ID, Creation Time, Last Access Time, Maximum Inactivity Interval, Expiration Time, Principal Name, Attributes Value, and User ID. The user table contains Attributes including User ID, Username, Password, Email, Phone Number, Creation Time, and Last Access Time. Through the \"Session and User\" relationship table, the system ensures that each session is associated with one user, and a user can have multiple sessions.\n", "answer": "CREATE TABLE User (\n    Creation_Time DATETIME,\n    Email VARCHAR(255),\n    Last_Access_Time DATETIME,\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Session (\n    Attributes_Value VARCHAR(255),\n    Creation_Time DATETIME,\n    Expiration_Time DATETIME,\n    Last_Access_Time DATETIME,\n    Maximum_Inactivity_Interval VARCHAR(255),\n    Principal_Name VARCHAR(255),\n    Session_ID INTEGER PRIMARY KEY,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8a4", "question": "A company's workflow management system is as follows:\nThe system contains multiple organizations, and each organization can initiate multiple processes.\nProcess information includes Process ID, Parent Process ID (can be null), Organization ID, Process Type, Log Information, Resource ID, Status, Start Time, and End Time.\nEach process may generate multiple events. Event information includes Event ID, Process ID, Event Type, Log Information, Status, and Timestamp.     \nThe system needs to record detailed information for each process and its related events to track the execution of workflows.", "answer": "CREATE TABLE Organization (\n    Organization_ID INTEGER PRIMARY KEY,\n    Organization_Name VARCHAR(255)\n);\n\nCREATE TABLE Process (\n    End_Time DATETIME,\n    Log_Information VARCHAR(255),\n    Organization_ID INTEGER NOT NULL,\n    Parent_Process_ID INTEGER NOT NULL,\n    Process_ID INTEGER PRIMARY KEY,\n    Process_Type VARCHAR(255),\n    Resource_ID INTEGER,\n    Start_Time DATETIME,\n    Status VARCHAR(255),\n    FOREIGN KEY (Organization_ID) REFERENCES Organization(Organization_ID),\n    FOREIGN KEY (Parent_Process_ID) REFERENCES Process(Process_ID)\n);\n\nCREATE TABLE Event (\n    Event_ID INTEGER PRIMARY KEY,\n    Event_Type VARCHAR(255),\n    Log_Information VARCHAR(255),\n    Process_ID INTEGER NOT NULL,\n    Status VARCHAR(255),\n    Timestamp DATETIME,\n    FOREIGN KEY (Process_ID) REFERENCES Process(Process_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8a5", "question": "The permission allocation for an image library management system is as follows: The system contains multiple albums, and album information includes an album ID, which cannot be null and is a Foreign key referencing the album ID in the album table. Permissions can be assigned to roles, and the role ID can be null and is a Foreign key referencing the role ID in the role table. Each permission record includes a permission ID, album ID, role ID, view permission, and edit permission. The permission ID is the Primary key and auto-incremented, while the view permission and edit permission are of boolean type and cannot be null. Through this table, the system can flexibly control the view and edit permissions of different roles for albums.", "answer": "CREATE TABLE Album (\n    Album_ID INTEGER PRIMARY KEY,\n    Album_Name VARCHAR(255),\n    Photo_Count INTEGER\n);\n\nCREATE TABLE Role (\n    Role_ID INTEGER PRIMARY KEY,\n    Role_Name VARCHAR(255)\n);\n\nCREATE TABLE Permission (\n    Album_ID INTEGER NOT NULL,\n    Edit_Permission BOOL,\n    Role_ID INTEGER NOT NULL,\n    View_Permission BOOL,\n    PRIMARY KEY (Album_ID, Role_ID),\n    FOREIGN KEY (Album_ID) REFERENCES Album(Album_ID),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);", "remarks": "SZC 1//25 : 删除了schema3的权限ID。", "assign_to": "lzm", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8ac", "question": "Below is the database business requirements analysis for the Mexican tortilla production and sales system: The system manages the production and sales of Mexican tortillas, as well as user permission management, involving multiple entities and relationships. First are the ingredients (Ingredient ID, Ingredient Name, Ingredient Type); the system records all detailed information about the ingredients. Next are the Mexican tortilla design records (Mexican Tortilla ID, Mexican Tortilla Name, Creation Time); the system manages the basic design and creation information of the Mexican tortillas.\nFurthermore, the system has users, recording all user information on the platform, including Username, Password, and Account Activation Status. Permissions are used to manage user permission information, defining the available permissions within the system and their descriptions.\n", "answer": "CREATE TABLE Ingredient (\n    Ingredient_ID INTEGER PRIMARY KEY,\n    Ingredient_Name VARCHAR(255),\n    Ingredient_Type VARCHAR(255)\n);\n\nCREATE TABLE Mexican_Tortilla_Design (\n    Creation_Time DATETIME,\n    Mexican_Tortilla_ID INTEGER PRIMARY KEY,\n    Mexican_Tortilla_Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    User_Activation_Status VARCHAR(255),\n    User_Password VARCHAR(255),\n    Username VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Permission (\n    Permission_Description VARCHAR(255),\n    Permission_Name VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Mexican_Tortilla_Ingredient (\n    Ingredient_ID INTEGER NOT NULL,\n    Mexican_Tortilla_ID INTEGER NOT NULL,\n    PRIMARY KEY (Mexican_Tortilla_ID, Ingredient_ID),\n    FOREIGN KEY (Ingredient_ID) REFERENCES Ingredient(Ingredient_ID),\n    FOREIGN KEY (Mexican_Tortilla_ID) REFERENCES Mexican_Tortilla_Design(Mexican_Tortilla_ID)\n);\n\nCREATE TABLE Order (\n    Credit_Card_Expiry_Date DATETIME,\n    Credit_Card_Number INTEGER,\n    Credit_Card_Security_Code VARCHAR(255),\n    Mexican_Tortilla_ID INTEGER NOT NULL,\n    Order_Creation_Time DATETIME,\n    Recipient VARCHAR(255) NOT NULL,\n    Recipient_City VARCHAR(255),\n    Recipient_Postal_Code INTEGER,\n    Recipient_State/Province VARCHAR(255),\n    Recipient_Street_Address VARCHAR(255),\n    PRIMARY KEY (Mexican_Tortilla_ID, Order_Creation_Time, Recipient),\n    FOREIGN KEY (Mexican_Tortilla_ID) REFERENCES Mexican_Tortilla_Design(Mexican_Tortilla_ID),\n    FOREIGN KEY (Recipient) REFERENCES User(Username)\n);\n\nCREATE TABLE User_Permission (\n    Grant_Time DATETIME,\n    Permission_Name VARCHAR(255) NOT NULL,\n    Username VARCHAR(255) NOT NULL,\n    Validity_Period VARCHAR(255),\n    PRIMARY KEY (Username, Permission_Name),\n    FOREIGN KEY (Permission_Name) REFERENCES Permission(Permission_Name),\n    FOREIGN KEY (Username) REFERENCES User(Username)\n);", "remarks": "删除了需求描述中不合理的地方，修改了schema的表名", "assign_to": "szc", "assign_to_round2": "zp", "domain": ["制造业", "食品制造业"]}
{"id": "67552f0a13602ec03b41a8ad", "question": "Business Requirements Description:\nThis database is for an HR (Human Resources) Management System used within an organization. The system can:\n1.Manage Department Information: Add, delete, and modify department details, including department ID, name, and description.\n2.Manage Role Information: Add, delete, and modify roles within departments, including role name and salary. Each department can have multiple roles, and each role can exist in multiple departments.\n3.Manage Employee Information: Add, delete, and modify employee details. The system can query an employee list with detailed information, including name, role, actual salary, and department.\n4.Salary Management: Manage and modify employee salary information, including salary amount and leave status.", "answer": "CREATE TABLE Department (\n    department_ID INTEGER PRIMARY KEY,\n    department_description VARCHAR(255),\n    department_name VARCHAR(255),\n    superior_department_ID INTEGER NOT NULL,\n    FOREIGN KEY (superior_department_ID) REFERENCES Department(department_ID)\n);\n\nCREATE TABLE Role (\n    role_ID INTEGER PRIMARY KEY,\n    role_name VARCHAR(255),\n    salary FLOAT\n);\n\nCREATE TABLE Employee (\n    actual_salary FLOAT,\n    department_ID INTEGER NOT NULL,\n    employee_ID INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    role_ID INTEGER NOT NULL,\n    FOREIGN KEY (department_ID) REFERENCES Department(department_ID),\n    FOREIGN KEY (role_ID) REFERENCES Role(role_ID)\n);\n\nCREATE TABLE Department_and_Role (\n    department_ID INTEGER NOT NULL,\n    department_name VARCHAR(255),\n    role_ID INTEGER NOT NULL,\n    role_name VARCHAR(255),\n    PRIMARY KEY (department_ID, role_ID),\n    FOREIGN KEY (department_ID) REFERENCES Department(department_ID),\n    FOREIGN KEY (role_ID) REFERENCES Role(role_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szc", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a8af", "question": "Library management system aims to enhance library management efficiency, optimize resource allocation, and improve user experience. As an important venue for knowledge dissemination and cultural exchange, library management involves various aspects such as personnel information, book information, and borrowing information. With the increasing volume of library collections and diverse borrowing demands, traditional manual management methods are inadequate to meet modern management requirements, necessitating a comprehensive, computerized management platform.\n\nThe library management system will efficiently manage and maintain the following content:\n\nPersonnel management: store personnel information within the library, including professors and students' personal data, facilitating the management of borrowing records and contact information.  \nBook management: manage the library's book information, ensure effective registration of books, update publication information, and manage book copies.  \nBorrowing management: record borrower and borrowing information, manage the start time, end time, and return status of each borrowing event, support borrowing history queries.  \nReturn management: record the return date and copy information of books, timely update books' borrowable status, prevent borrowing conflicts and overdue situations.  \nQuery and statistics functions: provide powerful query and statistics functions, help administrators quickly query borrowing situations, promptly identify overdue unreturned books, optimize the flow and borrowing management of book resources.  \nThe design goal of the system is to optimize book borrowing and returning management processes through database support, provide real-time query and statistical report functions, and enhance the operating efficiency of the library.", "answer": "CREATE TABLE Borrower (\n    Borrower_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Gender BOOL,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Category VARCHAR(255),\n    Price FLOAT,\n    Publication_Year INTEGER,\n    Publisher VARCHAR(255),\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Book_Borrowing (\n    Book_ID INTEGER NOT NULL,\n    Borrow_Duration INTEGER,\n    Borrow_Quantity INTEGER,\n    Borrow_Time DATETIME,\n    Borrower_ID INTEGER NOT NULL,\n    Expected_Return_Time DATETIME,\n    PRIMARY KEY (Borrower_ID, Book_ID, Borrow_Time),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Borrower_ID) REFERENCES Borrower(Borrower_ID)\n);\n\nCREATE TABLE Book_Return (\n    Book_ID INTEGER NOT NULL,\n    Borrow_Duration INTEGER,\n    Borrower_ID INTEGER NOT NULL,\n    Is_Overdue_Return BOOL,\n    Overdue_Penalty_Amount FLOAT,\n    Return_Quantity INTEGER,\n    Return_Time DATETIME,\n    PRIMARY KEY (Borrower_ID, Book_ID, Return_Time),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Borrower_ID) REFERENCES Borrower(Borrower_ID)\n);", "remarks": "CS 2025/1/7", "assign_to": "cs", "assign_to_round2": "szc", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a8b1", "question": "This is an online document knowledge base system for managing and displaying various e-books and their document content. The system supports a multi-level classification structure, facilitating content categorization and flexible adjustment of category display order. For document management, documents can belong to specific e-books and support a multi-level directory structure. For e-book management, e-books can belong to different levels of categories for easy user access, each e-book can contain multiple documents, and track total reads and likes, while providing cover images and detailed descriptions. For data statistics, the system records daily reading and like statistics for e-books, analyzing trends in content popularity. For user management, the system supports users to register personal accounts and log in, ensuring each user has a unique identity.", "answer": "CREATE TABLE Category (\n    Category_ID INTEGER PRIMARY KEY,\n    Category_name VARCHAR(255),\n    Display_order VARCHAR(255),\n    Parent_category_ID INTEGER NOT NULL,\n    FOREIGN KEY (Parent_category_ID) REFERENCES Category(Category_ID)\n);\n\nCREATE TABLE User (\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE E-book (\n    Book_title VARCHAR(255),\n    Category_ID INTEGER NOT NULL,\n    Cover_URL VARCHAR(255),\n    Detailed_description VARCHAR(255),\n    E-book_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Category_ID) REFERENCES Category(Category_ID)\n);\n\nCREATE TABLE Document (\n    Document_ID INTEGER PRIMARY KEY,\n    Document_content VARCHAR(255),\n    E-book_ID INTEGER NOT NULL,\n    FOREIGN KEY (E-book_ID) REFERENCES E-book(E-book_ID)\n);\n\nCREATE TABLE Statistics (\n    Date DATETIME,\n    E-book_ID INTEGER NOT NULL,\n    Like_count INTEGER,\n    Read_count INTEGER,\n    Statistics_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (E-book_ID) REFERENCES E-book(E-book_ID)\n);", "remarks": "分类的层级关系用的是自引用，不确定relation和schema的写法是否正确；第二轮在文档对应模式中加入外键电子书编号", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8b2", "question": "Business Requirements Description:\nThis system is designed to manage and monitor the description information of various services. Each service has a unique service ID, a base URL (base_url), and a health check URL (health_url). The system tracks the service’s status, creation time, and update time. Each service can have multiple description entries, each with a description ID (sd_id), service ID, description set ID (set_id), description content, creation time, and update time. The system supports service registration, management of description information, and monitoring of service status.", "answer": "CREATE TABLE Service (\n    base_url VARCHAR(255),\n    creation_time DATETIME,\n    health_url VARCHAR(255),\n    service_ID INTEGER PRIMARY KEY,\n    status VARCHAR(255),\n    update_time DATETIME\n);\n\nCREATE TABLE Service_Description (\n    creation_time DATETIME,\n    description VARCHAR(255),\n    sd_id INTEGER,\n    service_ID INTEGER NOT NULL,\n    set_id INTEGER,\n    update_time DATETIME,\n    PRIMARY KEY (set_id, sd_id),\n    FOREIGN KEY (service_ID) REFERENCES Service(service_ID)\n);", "remarks": "完善了业务需求描述", "assign_to": "gcc", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8b7", "question": "This is a permission management system for managing and controlling user roles and menu permissions in an application. The system supports adding, deleting, and modifying user information, including username, password, first name, and last name. For role management, the system can add, delete, and modify role information, including role name and unique identifier, and supports assigning roles to users. For menu management, the system allows adding, deleting, and modifying application menu items, including menu ID, parent menu ID, label, and relative URL, while supporting the construction of menu tree structures for multi-level menus. For permission management, the system supports assigning menu permissions to roles, controlling which menu items roles can access, and dynamically generating accessible menus based on user roles. Through access control functionality, the system controls user access to different features in the application based on user permissions.\n", "answer": "CREATE TABLE Role (\n    Role_ID INTEGER PRIMARY KEY,\n    Role_name VARCHAR(255)\n);\n\nCREATE TABLE Menu (\n    Label VARCHAR(255),\n    Menu_ID INTEGER PRIMARY KEY,\n    Parent_menu_ID INTEGER NOT NULL,\n    Relative_URL VARCHAR(255),\n    FOREIGN KEY (Parent_menu_ID) REFERENCES Menu(Menu_ID)\n);\n\nCREATE TABLE User (\n    First_name VARCHAR(255),\n    Last_name VARCHAR(255),\n    Password VARCHAR(255),\n    Role_ID INTEGER NOT NULL,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);", "remarks": "第二轮完善了需求分析", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8bc", "question": "The business requirements for the product management system of an e-commerce platform are described as follows: the platform contains various products. Product information includes Product ID, Product Name, Product Slogan, Product Description, Product Category, and Default Price. Each product can include multiple styles, where each style is associated with only one product. Style information includes Style ID, Associated Product ID, Style Name, Sale Price, Original Price, and whether it is the Default Style. Each product also has multiple features, where each feature is associated with only one product. Feature information includes Feature ID, Associated Product ID, Feature Name, and Feature Value. Each style contains multiple SKUs, where each SKU is associated with only one style. SKU information includes SKU ID, Associated Style ID, Size, and Stock Quantity. Each style also includes multiple photos. Photo information includes Photo ID, Associated Style ID, Photo URL, and Thumbnail URL. Through these tables, the system comprehensively manages product details, styles, features, inventory, and display images, ensuring the efficient operation of product display and sales processes on the platform.", "answer": "CREATE TABLE Product (\n    Default_Price FLOAT,\n    Product_Category VARCHAR(255),\n    Product_Description VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Product_Slogan VARCHAR(255)\n);\n\nCREATE TABLE Style (\n    Associated_Product_ID INTEGER NOT NULL,\n    Is_Default_Style VARCHAR(255),\n    Original_Price FLOAT,\n    Sale_Price FLOAT,\n    Style_ID INTEGER PRIMARY KEY,\n    Style_Name VARCHAR(255),\n    FOREIGN KEY (Associated_Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Feature (\n    Associated_Product_ID INTEGER NOT NULL,\n    Feature_ID INTEGER PRIMARY KEY,\n    Feature_Name VARCHAR(255),\n    Feature_Value VARCHAR(255),\n    FOREIGN KEY (Associated_Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE SKU (\n    Associated_Style_ID INTEGER NOT NULL,\n    SKU_ID INTEGER PRIMARY KEY,\n    Size FLOAT,\n    Stock_Quantity INTEGER,\n    FOREIGN KEY (Associated_Style_ID) REFERENCES Style(Style_ID)\n);\n\nCREATE TABLE Photo (\n    Associated_Style_ID INTEGER NOT NULL,\n    Photo_ID INTEGER PRIMARY KEY,\n    Photo_URL VARCHAR(255),\n    Thumbnail_URL VARCHAR(255),\n    FOREIGN KEY (Associated_Style_ID) REFERENCES Style(Style_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a8be", "question": "With the popularity of football worldwide, an increasing number of football enthusiasts and related organizations (such as football clubs and event organizers) are seeking dedicated social platforms to communicate, interact, participate in activities, track matches, and join memberships. A dedicated football social platform or membership management system can provide users with a centralized and comprehensive way to manage their social activities, match records, player/team profiles, and event interactions.\n\nSuch systems are not only suitable for the majority of football fans but can also serve football clubs, sponsors, and event organizers, assisting them in interacting with members, conducting marketing activities, managing event information, and providing personalized services. The main features include:\n\nUser registration and personal information management: including user basic information, social information (such as friends relationships), personal interests, etc.\nMembership management: allowing fans or users to become members and enjoy specific services, discounts, and activities.\nTeam management: users can create teams, join teams, and manage team information, etc.\nMatch management: including match schedules, match timelines, match results, etc.", "answer": "CREATE TABLE General_User_Information (\n    Account VARCHAR(255),\n    Age INTEGER,\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Member_Information (\n    Member_ID INTEGER PRIMARY KEY,\n    Member_Level INTEGER,\n    Status VARCHAR(255),\n    Validity_End DATETIME,\n    Validity_Start DATETIME\n);\n\nCREATE TABLE Team_Information (\n    Team_Creation_Time DATETIME,\n    Team_ID INTEGER PRIMARY KEY,\n    Team_Leader_ID INTEGER NOT NULL,\n    Team_Name VARCHAR(255),\n    Total_Team_Members INTEGER,\n    FOREIGN KEY (Team_Leader_ID) REFERENCES General_User_Information(User_ID)\n);\n\nCREATE TABLE Football_Player_Information (\n    Affiliated_Team_ID INTEGER NOT NULL,\n    Football_Player_ID INTEGER NOT NULL,\n    PRIMARY KEY (Football_Player_ID, Affiliated_Team_ID),\n    FOREIGN KEY (Affiliated_Team_ID) REFERENCES Team_Information(Team_ID),\n    FOREIGN KEY (Football_Player_ID) REFERENCES General_User_Information(User_ID)\n);\n\nCREATE TABLE Match_Information (\n    Away_Team_ID INTEGER NOT NULL,\n    Home_Team_ID INTEGER NOT NULL,\n    Match_ID INTEGER PRIMARY KEY,\n    Match_Location VARCHAR(255),\n    Match_Result VARCHAR(255),\n    Match_Time DATETIME,\n    FOREIGN KEY (Away_Team_ID) REFERENCES Team_Information(Team_ID),\n    FOREIGN KEY (Home_Team_ID) REFERENCES Team_Information(Team_ID)\n);", "remarks": "CS 2025/1/7 情况写的有点多\nZP：删除了冗余的实体，修改了足球队员入队关系的约束，修改了对应的schema", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["文化、体育和娱乐业", "体育"]}
{"id": "67552f0a13602ec03b41a8c3", "question": "This is a sales management system for recording salespeople's performance and customer information. For sales record management, the system records detailed information of each sale, including sales amount, sales date, transaction quantity, and number of visits, and links sales records to specific salespeople. For salesperson management, the system stores basic information about salespeople, including unique identifier and name. For customer management, the system stores basic information about customers, including unique identifier and name. Through these functions, the system can help enterprises better manage their sales teams and customer relationships, improving sales efficiency and customer satisfaction.", "answer": "CREATE TABLE Salesperson (\n    Name VARCHAR(255),\n    Salesperson_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Sales_record (\n    Customer_ID INTEGER NOT NULL,\n    Sales_amount FLOAT,\n    Sales_date DATETIME,\n    Salesperson_ID INTEGER NOT NULL,\n    Transaction_quantity INTEGER,\n    Visit_count INTEGER,\n    PRIMARY KEY (Salesperson_ID, Customer_ID, Sales_date),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Salesperson_ID) REFERENCES Salesperson(Salesperson_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szc", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a8c8", "question": "The character management system for a game is as follows: The game contains multiple characters, and character information includes Character ID, Class ID, Character Name, Star Level, and Rarity ID. The Character ID is the Primary key and cannot be null. The Class ID cannot be null and is a Foreign key referencing the Class ID field in the Class Table. The Character Name is a string with a maximum length of 100 and cannot be null. The Star Level is a small integer and cannot be null. The Rarity ID is a small integer and can be null. Through this information, the system manages the basic Attributes of characters in the game and their associated class categories, ensuring the integrity and consistency of character data.", "answer": "CREATE TABLE Class (\n    Class_ID INTEGER PRIMARY KEY,\n    Class_Name VARCHAR(255)\n);\n\nCREATE TABLE Character (\n    Character_ID INTEGER PRIMARY KEY,\n    Character_Name VARCHAR(255),\n    Class_ID INTEGER NOT NULL,\n    Rarity_ID INTEGER,\n    Star_Level VARCHAR(255),\n    FOREIGN KEY (Class_ID) REFERENCES Class(Class_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szc", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a8c9", "question": "Database Business Requirements for Task Management System: This system manages the relationship between users and tasks, including the creation, assignment, and associated files of tasks.  \nUser (User ID, User Name, Full Name, Password, Date of Birth, Avatar File ID, Avatar File Name) records the information of users in the system.  \nTask (Task ID, Task Name, Task Status, Task Priority, Creator User ID, Creation Date, Assignee User ID, Completion Date, Task Remarks) records the detailed information of tasks.  \nTask File (Task File ID, File Name, Task ID) records the information of files associated with tasks.  \nThis system should effectively function in multiple aspects of task management such as task creation, task assignment, and task file association, while maintaining data consistency and integrity.\n", "answer": "CREATE TABLE User (\n    Avatar_File_ID INTEGER,\n    Avatar_File_Name VARCHAR(255),\n    Date_of_Birth DATETIME,\n    Full_Name VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Task (\n    Assignee_User_ID INTEGER NOT NULL,\n    Completion_Date DATETIME,\n    Creation_Date DATETIME,\n    Creator_User_ID INTEGER NOT NULL,\n    Task_ID INTEGER PRIMARY KEY,\n    Task_Name VARCHAR(255),\n    Task_Priority INTEGER,\n    Task_Remarks VARCHAR(255),\n    Task_Status VARCHAR(255),\n    FOREIGN KEY (Assignee_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Creator_User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Task_File (\n    File_Name VARCHAR(255),\n    Task_File_ID INTEGER PRIMARY KEY,\n    Task_ID INTEGER NOT NULL,\n    FOREIGN KEY (Task_ID) REFERENCES Task(Task_ID)\n);", "remarks": "修改了实体中的冗余的关系属性，修改了schema的表名", "assign_to": "szc", "assign_to_round2": "zp", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8d7", "question": "E-commerce Management System Business Requirement Description: The e-commerce platform manages customer information and order information. Each customer has a unique phone number, last name, first name, resource ID, and address. Each resource has a unique resource ID, resource name, and resource type. The customer address includes address ID, country, city, postal code, district, and street address. Customers can place multiple orders, each containing an order ID, amount, currency, resource ID, start time, type, and customer ID. An order includes only one resource ID. The system needs to record detailed information of each customer and their address and manage the customer's order information.", "answer": "CREATE TABLE Address (\n    Address_ID INTEGER PRIMARY KEY,\n    City VARCHAR(255),\n    Country VARCHAR(255),\n    District VARCHAR(255),\n    Postal_Code VARCHAR(255),\n    Street_Address VARCHAR(255)\n);\n\nCREATE TABLE Resource (\n    Resource_ID INTEGER PRIMARY KEY,\n    Resource_Name VARCHAR(255),\n    Resource_Type VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Address_ID INTEGER NOT NULL,\n    Customer_ID INTEGER PRIMARY KEY,\n    First_Name VARCHAR(255),\n    Last_Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Resource_ID INTEGER NOT NULL,\n    FOREIGN KEY (Address_ID) REFERENCES Address(Address_ID),\n    FOREIGN KEY (Resource_ID) REFERENCES Resource(Resource_ID)\n);\n\nCREATE TABLE Order (\n    Amount FLOAT,\n    Currency VARCHAR(255),\n    Customer_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Resource_ID INTEGER NOT NULL,\n    Start_Time DATETIME,\n    Type VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Resource_ID) REFERENCES Resource(Resource_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a8d9", "question": "This is an online survey system. For administrator management, the system maintains administrator information including name, phone number, account, and password. Administrators can register, log in to the system, create, edit, delete surveys, and view survey statistics. For survey management, the system supports creating surveys, setting survey title, description, access restrictions, start and end times, access rules (public or password-protected), survey status (created, in progress, ended), survey logo URL and background image URL, anonymity settings, etc. Surveys can be associated with multiple questions. For question management, the system supports creating different types of questions (single choice, multiple choice, text, text area), setting question title, description, required status, validation type, display order, display style, evaluation status, evaluation score, etc. Questions can be associated with multiple options. For option management, the system supports creating options for questions, setting option content, display order, correct answer status, etc. Options can be single or multiple choice type. For answer recording, the system records users' answers to single or multiple choice questions, including option ID, answer type, submission time, respondent information, and also records users' answers to text questions, including question ID, answer content, submission time, and respondent information.", "answer": "CREATE TABLE Administrator (\n    Account VARCHAR(255),\n    Administrator_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_number VARCHAR(255)\n);\n\nCREATE TABLE Survey (\n    Access_restriction VARCHAR(255),\n    Access_rule VARCHAR(255),\n    Anonymous VARCHAR(255),\n    Background_image_URL VARCHAR(255),\n    Description VARCHAR(255),\n    End_time DATETIME,\n    Start_time DATETIME,\n    Survey_ID INTEGER PRIMARY KEY,\n    Survey_logo_URL VARCHAR(255),\n    Survey_status VARCHAR(255),\n    Survey_title VARCHAR(255)\n);\n\nCREATE TABLE Question (\n    Description VARCHAR(255),\n    Display_order INTEGER,\n    Display_style VARCHAR(255),\n    Evaluation_score FLOAT,\n    For_evaluation VARCHAR(255),\n    Question_ID INTEGER PRIMARY KEY,\n    Question_title VARCHAR(255),\n    Question_type VARCHAR(255),\n    Required VARCHAR(255),\n    Survey_ID INTEGER NOT NULL,\n    Validation_type VARCHAR(255),\n    FOREIGN KEY (Survey_ID) REFERENCES Survey(Survey_ID)\n);\n\nCREATE TABLE Option (\n    Display_order INTEGER,\n    Is_correct_answer BOOL,\n    Option_ID INTEGER PRIMARY KEY,\n    Option_content VARCHAR(255),\n    Question_ID INTEGER NOT NULL,\n    FOREIGN KEY (Question_ID) REFERENCES Question(Question_ID)\n);\n\nCREATE TABLE Text_answer_record (\n    Answer_ID INTEGER PRIMARY KEY,\n    Answer_content VARCHAR(255),\n    Question_ID INTEGER NOT NULL,\n    Respondent_information VARCHAR(255),\n    Submission_time DATETIME,\n    FOREIGN KEY (Question_ID) REFERENCES Question(Question_ID)\n);\n\nCREATE TABLE Choice_answer_record (\n    Answer_ID INTEGER PRIMARY KEY,\n    Answer_type VARCHAR(255),\n    Option_ID INTEGER NOT NULL,\n    Respondent_information VARCHAR(255),\n    Submission_time DATETIME,\n    FOREIGN KEY (Option_ID) REFERENCES Option(Option_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8dc", "question": "Business Requirements Description:\nThis database is for a virtual investment or gaming system where users can engage in virtual stock trading or similar investment activities, and their operations and earnings are recorded. The main features of the system are:\n1.User Management: User registration and login functionality, recording usernames and virtual currency balances.\n2.Log Recording: Tracks user activities or statistics on a daily basis. Each log entry includes user ID, date, and record value. This allows tracking user activities and changes.\n3.Portfolio Management: Users can hold multiple stocks or investment assets. Each stock has a unique stock code, stock price, issue date, and company name. The system records the stock code, quantity, and earnings for each stock held by each user.\n4.Hall of Fame: Initially, the system tracked user investment earnings to display the best-performing users. Now the earnings value is included directly in the portfolio management.\nThis system can be used for virtual stock trading platforms, investment simulation games, or other similar applications, helping users learn and practice investment strategies.\n", "answer": "CREATE TABLE User (\n    user_ID INTEGER PRIMARY KEY,\n    username VARCHAR(255),\n    virtual_currency_balance FLOAT\n);\n\nCREATE TABLE Stock (\n    company_name VARCHAR(255),\n    issue_date DATETIME,\n    stock_code VARCHAR(255) PRIMARY KEY,\n    stock_price FLOAT\n);\n\nCREATE TABLE Log (\n    date DATETIME,\n    log_ID INTEGER PRIMARY KEY,\n    record_value FLOAT,\n    user_ID INTEGER NOT NULL,\n    FOREIGN KEY (user_ID) REFERENCES User(user_ID)\n);\n\nCREATE TABLE User_Investment_Stock (\n    earnings_value FLOAT,\n    quantity_held INTEGER,\n    stock_code VARCHAR(255) NOT NULL,\n    user_ID INTEGER NOT NULL,\n    PRIMARY KEY (user_ID, stock_code),\n    FOREIGN KEY (stock_code) REFERENCES Stock(stock_code),\n    FOREIGN KEY (user_ID) REFERENCES User(user_ID)\n);", "remarks": "dyq,修改需求描述，去除名人堂，将收益值放入用户投资股票表中", "assign_to": "gcc", "assign_to_round2": "dyq", "domain": ["金融业", "资本市场服务"]}
{"id": "67552f0a13602ec03b41a8e7", "question": "In the management process of multiplayer competition events (such as card games, board games, or other competitive games), the system needs to record and track players' participation information, match progress, game results, and ranking data. The core purpose of such a system is to provide a platform to organize and manage competitions, ensuring fairness and impartiality, and to offer comprehensive data analysis and reporting functionalities, assisting players and event organizers in understanding match progress and results.\n\nMain functional requirements:  \nUser (player) management:  \nRecord basic information for each participating player, including username, contact information, and account status.  \n\nMatch management:  \nRecord basic information for all matches, including match type, start time, end time, and participating players.  \n\nMatch result recording:  \nRecord match results, possibly including each player's score, win-loss status, and ranking.  \n\nBattle record management:  \nRecord details of each specific battle within a match, involving both sides of the battle, start time, end time, and win-loss status.", "answer": "CREATE TABLE Player (\n    Contact_Information VARCHAR(255),\n    Gender VARCHAR(255),\n    Nickname VARCHAR(255),\n    Player_ID INTEGER PRIMARY KEY NOT NULL,\n    Registration_Time DATETIME,\n    FOREIGN KEY (Player_ID) REFERENCES Player(Player_ID)\n);\n\nCREATE TABLE Match_Information (\n    End_Time DATETIME,\n    Match_ID INTEGER PRIMARY KEY NOT NULL,\n    Name VARCHAR(255),\n    Start_Time DATETIME,\n    Total_Participants INTEGER,\n    Type VARCHAR(255),\n    FOREIGN KEY (Match_ID) REFERENCES Match_Information(Match_ID)\n);\n\nCREATE TABLE Match_Result (\n    Match_ID INTEGER,\n    Player_ID INTEGER,\n    Ranking INTEGER,\n    Total_Score INTEGER,\n    PRIMARY KEY (Player_ID, Match_ID)\n);\n\nCREATE TABLE Battle (\n    Battle_Duration FLOAT,\n    Match_End_Time DATETIME,\n    Match_ID INTEGER NOT NULL,\n    Match_Start_Time DATETIME,\n    Player_1_ID INTEGER NOT NULL,\n    Player_2_ID INTEGER NOT NULL,\n    Result BOOL,\n    PRIMARY KEY (Match_ID, Player_1_ID, Player_2_ID, Match_Start_Time),\n    FOREIGN KEY (Match_ID) REFERENCES Match_Information(Match_ID),\n    FOREIGN KEY (Player_1_ID) REFERENCES Player(Player_ID),\n    FOREIGN KEY (Player_2_ID) REFERENCES Player(Player_ID)\n);", "remarks": "CS 2025./1/7  会不会冗余. szc 1/25 ： 删除冗余的schema。", "assign_to": "cs", "assign_to_round2": "szc", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a8e8", "question": "The data management system of a music platform is as follows: The platform contains multiple albums, with album information including Album ID, Album Name, and Release Date. The platform also manages multiple artists, with artist information including Artist ID and Artist Name. Each song's information includes Song ID, Song Name, Video Duration, Popularity, Video ID, and Album ID. The platform includes multiple playlists, with playlist information including Playlist ID, Playlist Name, Play Count, and Creator User ID, where Creator User ID is a Foreign key referencing the User ID field in the user table. User information includes User ID. Through these tables, the system comprehensively manages the platform's albums, artists, songs, playlists, and user information, ensuring data integrity and consistency.", "answer": "CREATE TABLE Artist (\n    Artist_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Album (\n    Album_ID INTEGER PRIMARY KEY,\n    Album_Name VARCHAR(255),\n    Artist_ID INTEGER NOT NULL,\n    Release_Date DATETIME,\n    FOREIGN KEY (Artist_ID) REFERENCES Artist(Artist_ID)\n);\n\nCREATE TABLE Playlist (\n    Creator_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Play_Count INTEGER,\n    Playlist_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Creator_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Song (\n    Album_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Popularity INTEGER,\n    Song_ID INTEGER PRIMARY KEY,\n    Video_Duration VARCHAR(255),\n    Video_ID INTEGER,\n    FOREIGN KEY (Album_ID) REFERENCES Album(Album_ID)\n);\n\nCREATE TABLE Playlist_Creation (\n    Creation_Time DATETIME,\n    Playlist_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Playlist_ID, User_ID, Creation_Time),\n    FOREIGN KEY (Playlist_ID) REFERENCES Playlist(Playlist_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Songs_In_Album (\n    Album_ID INTEGER NOT NULL,\n    Song_ID INTEGER NOT NULL,\n    PRIMARY KEY (Album_ID, Song_ID),\n    FOREIGN KEY (Album_ID) REFERENCES Album(Album_ID),\n    FOREIGN KEY (Song_ID) REFERENCES Song(Song_ID)\n);", "remarks": "CS 2025/1/27 round2 edit", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a8ea", "question": "Description of Social Network System Requirements: For user registration and login, users can register and log in to the system using username and password. The system supports different types of users, such as regular users and administrators. For personal information management, users can fill in and manage basic personal information, including name, phone, address, email, birthday, gender, relationship status, interests, etc., and can edit detailed information such as personal profile, motto, hometown, and current location. For user connection management, users can establish connections with other users, and the system records the connection time. Users can send and receive connection requests, and the system records the request sending time. For user homepage management, users can create personal homepages, including title, introduction, and creation time. Other users can join user's homepage and the joining time is recorded. For homepage feed management, users can post updates on their own homepage, including text content, and the posting time is recorded. Other users can also post updates on user's homepage, creating interaction. For the functionality of users joining multiple homepages, users can join multiple different homepages, and the joining time is recorded. The system supports associations between users and multiple homepages.\n", "answer": "CREATE TABLE User (\n    Address VARCHAR(255),\n    Birthday DATETIME,\n    Current_location VARCHAR(255),\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Hometown VARCHAR(255),\n    Interests VARCHAR(255),\n    Motto VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Personal_profile VARCHAR(255),\n    Phone VARCHAR(255),\n    Relationship_status VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_type VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE User_homepage (\n    Creation_time DATETIME,\n    Homepage_ID INTEGER PRIMARY KEY,\n    Introduction VARCHAR(255),\n    Title VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_connection_request_record (\n    Receiver_user_ID INTEGER NOT NULL,\n    Record_ID INTEGER PRIMARY KEY,\n    Send_time DATETIME,\n    Sender_user_ID INTEGER NOT NULL,\n    FOREIGN KEY (Receiver_user_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Sender_user_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_connection_establishment_record (\n    Connection_time DATETIME,\n    Receiver_ID INTEGER NOT NULL,\n    Record_ID INTEGER PRIMARY KEY,\n    Sender_ID INTEGER NOT NULL,\n    FOREIGN KEY (Receiver_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Sender_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Feed (\n    Feed_ID INTEGER PRIMARY KEY,\n    Feed_content VARCHAR(255),\n    Homepage_ID INTEGER NOT NULL,\n    Post_time DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Homepage_ID) REFERENCES User_homepage(Homepage_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_homepage_join (\n    Homepage_ID INTEGER NOT NULL,\n    Join_time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Join_time, Homepage_ID, User_ID),\n    FOREIGN KEY (Homepage_ID) REFERENCES User_homepage(Homepage_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "2025/1/26", "assign_to": "hzb", "assign_to_round2": "szh2", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a8eb", "question": "A social media platform's user system is designed as follows:\nThe platform has users. User information includes User ID, First Name, Last Name, Email Address, Avatar Path, Password, and Date of Birth.\nUsers can post posts. Post information includes Post ID, Poster User ID, Post Title, and Post Content.\nUsers can also comment on posts. Comment information includes Commenter User ID, Commented Post ID, and Comment Content.", "answer": "CREATE TABLE User (\n    Avatar_Path VARCHAR(255),\n    Date_of_Birth DATETIME,\n    Email_Address VARCHAR(255),\n    First_Name VARCHAR(255),\n    Last_Name VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Post (\n    Post_Content VARCHAR(255),\n    Post_ID INTEGER PRIMARY KEY,\n    Post_Title VARCHAR(255),\n    Poster_User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Poster_User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Comment (\n    Comment_Content VARCHAR(255),\n    Comment_ID INTEGER PRIMARY KEY,\n    Commented_Post_ID INTEGER NOT NULL,\n    Commenter_User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Commented_Post_ID) REFERENCES Post(Post_ID),\n    FOREIGN KEY (Commenter_User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8ee", "question": "The permission management of an object storage system is as follows: The system contains multiple buckets, and the access permissions for each bucket are managed through the OSS_ACCESS table. This table records the unique identifier ID of the permission and associates it with the specific bucket BUCKET_ID, where the bucket ID is a Foreign key referencing the ID field in the OSS_BUCKET table. Each permission record includes the type TYPE, access account ACCESS_KEY, access password SECRET_KEY, status STATUS (which can be active or inactive), creation time CREATE_TIME, description DESCRIPTION, creator USER_ID, and tenant TENANT_ID. Through this information, the system can flexibly control access permissions for different users or tenants to the buckets, ensuring data security and manageability.", "answer": "CREATE TABLE Bucket (\n    Bucket_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Permission_Access (\n    Access_Account FLOAT,\n    Access_Password VARCHAR(255),\n    Bucket_ID INTEGER NOT NULL,\n    Creation_Time DATETIME,\n    Creator VARCHAR(255),\n    Description VARCHAR(255),\n    Permission_ID INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    Tenant VARCHAR(255),\n    Type VARCHAR(255),\n    FOREIGN KEY (Bucket_ID) REFERENCES Bucket(Bucket_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8f0", "question": "The data management system of an e-commerce platform is as follows: The platform includes multiple product categories, with category information consisting of category ID, category name, category alias, cover image path, creation time, and update time. User information includes user ID, username, email, password, creation time, and update time. Order information is stored in the order table, including order ID, user ID, delivery address, postal code, order status, total order price, creation time, and update time, where the user ID is a Foreign key referencing the user ID field in the user table. The relationship between orders and products is recorded in the order product table, including order product ID, order ID, product ID, and product quantity, where the order ID is a Foreign key referencing the order ID field in the order table, and the product ID is a Foreign key referencing the product ID field in the product table. Product information includes product ID, product name, product description, product price, category ID, product status, cover image path, creation time, and update time.", "answer": "CREATE TABLE Category (\n    Category_Alias VARCHAR(255),\n    Category_ID INTEGER PRIMARY KEY,\n    Category_Name VARCHAR(255),\n    Cover_Image_Path VARCHAR(255),\n    Creation_Time DATETIME,\n    Update_Time DATETIME\n);\n\nCREATE TABLE User (\n    Creation_Time DATETIME,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Update_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Product (\n    Category_ID INTEGER NOT NULL,\n    Cover_Image_Path VARCHAR(255),\n    Creation_Time DATETIME,\n    Product_Description VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Product_Price FLOAT,\n    Product_Status VARCHAR(255),\n    Update_Time DATETIME,\n    FOREIGN KEY (Category_ID) REFERENCES Category(Category_ID)\n);\n\nCREATE TABLE Order (\n    Creation_Time DATETIME,\n    Delivery_Address DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Postal_Code VARCHAR(255),\n    Total_Order_Price FLOAT,\n    Update_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Order_Contains_Product (\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Product_Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "CS 2025/1/27 round2 edit", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a8f1", "question": "An online learning platform's exam system is designed as follows:\nThe platform has multiple exams. Exam information includes Exam ID, Name, Time, etc.\nEach exam contains multiple practice questions. Practice question information includes Question ID, Exam ID it belongs to, Question Content, Score, etc.\nWhen a student takes an exam, the student submits answers. The submission record contains Submission ID, Exam ID, Student ID, Submission Status.    \nA student has information such as Student ID, Name, etc.\nEach submission has answers to multiple practice questions. The answer record contains Practice Question ID it belongs to, Submission ID it belongs to, Answer Content.", "answer": "CREATE TABLE Exam (\n    Exam_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Time DATETIME\n);\n\nCREATE TABLE Student (\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Practice_Question (\n    Exam_ID_it_belongs_to INTEGER NOT NULL,\n    Question_Content VARCHAR(255),\n    Question_ID INTEGER PRIMARY KEY,\n    Score FLOAT,\n    FOREIGN KEY (Exam_ID_it_belongs_to) REFERENCES Exam(Exam_ID)\n);\n\nCREATE TABLE Submission_Record (\n    Exam_ID INTEGER NOT NULL,\n    Student_ID INTEGER NOT NULL,\n    Submission_ID INTEGER PRIMARY KEY,\n    Submission_Status VARCHAR(255),\n    FOREIGN KEY (Exam_ID) REFERENCES Exam(Exam_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Answer_Record (\n    Answer_Content VARCHAR(255),\n    Answer_Record_ID INTEGER PRIMARY KEY,\n    Practice_Question_ID_it_belongs_to INTEGER NOT NULL,\n    Submission_ID_it_belongs_to INTEGER NOT NULL,\n    FOREIGN KEY (Practice_Question_ID_it_belongs_to) REFERENCES Practice_Question(Question_ID),\n    FOREIGN KEY (Submission_ID_it_belongs_to) REFERENCES Submission_Record(Submission_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a8f5", "question": "Academic administration system business requirement description: The school has multiple colleges, each with a college name, college location, total number of staff, and total number of students. Each college consists of multiple students and teachers. Each student has a Student ID, name, gender, date of birth, age, telephone, registration time, and associated college ID. Each teacher has a Teacher ID, gender, name, age, contact information, title, and associated college ID. The school offers multiple courses, each with a Course ID, name, credit number, teaching Teacher ID, course summary, class hours, and classroom. Students can enroll in multiple courses, and each enrollment requires recording the Student ID, Course ID, enrollment time, and course grade.", "answer": "CREATE TABLE College (\n    College_ID INTEGER PRIMARY KEY,\n    College_Location VARCHAR(255),\n    College_Name VARCHAR(255),\n    Total_Number_of_Staff INTEGER,\n    Total_Number_of_Students INTEGER\n);\n\nCREATE TABLE Student (\n    Age INTEGER,\n    Associated_College_ID INTEGER NOT NULL,\n    Date_of_Birth DATETIME,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Registration_Time DATETIME,\n    Student_ID INTEGER PRIMARY KEY,\n    Telephone INTEGER,\n    FOREIGN KEY (Associated_College_ID) REFERENCES College(College_ID)\n);\n\nCREATE TABLE Teacher (\n    Age INTEGER,\n    Associated_College_ID INTEGER NOT NULL,\n    Contact_Information VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Teacher_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255),\n    FOREIGN KEY (Associated_College_ID) REFERENCES College(College_ID)\n);\n\nCREATE TABLE Course (\n    Class_Hours FLOAT,\n    Classroom INTEGER,\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Summary VARCHAR(255),\n    Credit_Number FLOAT,\n    Name VARCHAR(255),\n    Teaching_Teacher_ID INTEGER NOT NULL,\n    FOREIGN KEY (Teaching_Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Course_Enrollment_and_Grade (\n    Course_Grade INTEGER,\n    Course_ID INTEGER NOT NULL,\n    Enrollment_Time DATETIME,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID, Enrollment_Time),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "CS 2025/1/7 关系表感觉可以再多一些", "assign_to": "cs", "assign_to_round2": "szh2", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a8f6", "question": "\"The API performance management system is used to track and analyze the usage of various APIs across multiple projects. The system is required to record each project's ID, name, and related avatar information. Each project may contain multiple APIs, with each API bound to a project, and the system must record each API's unique identifier, name, and access path. To monitor the performance of the APIs, the system must collect statistics on each API's call frequency, average response time, and 90％ response time. Additionally, the system must record each API's creation and update times to track their development history. Users can view and analyze the performance data of APIs through the system to optimize the response efficiency of the APIs.\"", "answer": "CREATE TABLE project (\n    Avatar_URL VARCHAR(255),\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Name VARCHAR(255)\n);\n\nCREATE TABLE API (\n    Access_Path VARCHAR(255),\n    Belonging_Project INTEGER NOT NULL,\n    Identifier INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    FOREIGN KEY (Belonging_Project) REFERENCES project(Project_ID)\n);\n\nCREATE TABLE API_Response_Record (\n    API_Identifier INTEGER NOT NULL,\n    Call_Time DATETIME,\n    Response_Time DATETIME,\n    PRIMARY KEY (API_Identifier, Call_Time),\n    FOREIGN KEY (API_Identifier) REFERENCES API(Identifier)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8f8", "question": "Business Requirements Description:\nThis database is used for managing and storing multi-language resources, such as an internationalization (i18n) and localization (l10n) management platform. The main features of the system are:\n1.Multi-Language Resource Management: Storing and managing multi-language resource files for different applications. It tracks each resource file’s ID, path, base name, language and region information, as well as its version.\n2.Application Management: Managing different applications, including application ID and name.\n3.Language and Region Information Management: Managing detailed information about languages and regions, including ISO codes and names. It supports multiple languages and regions to ensure the accuracy and completeness of resource files.\n4.Resource Key-Value Pair Management: Managing keys and values within resource files. A resource key includes key ID, key name, and key version. A resource value includes value ID, value content, and version. A resource file can correspond to multiple resource keys, and each resource key can have multiple resource values.\n5.Country Information Management: Managing country information, including country names and ISO codes, to further categorize and manage region-specific resource files.\nThis system is designed to manage multi-language resource files, handle the relationships between applications, languages, and regions, manage resource keys and values, and facilitate version control. It is mainly used to support the development and maintenance of multi-language applications.", "answer": "CREATE TABLE Language (\n    ISO_code VARCHAR(255),\n    language_ID INTEGER PRIMARY KEY,\n    language_name VARCHAR(255)\n);\n\nCREATE TABLE Country (\n    ISO_code VARCHAR(255),\n    country_ID INTEGER PRIMARY KEY,\n    country_name VARCHAR(255)\n);\n\nCREATE TABLE Application (\n    application_ID INTEGER PRIMARY KEY,\n    application_name VARCHAR(255)\n);\n\nCREATE TABLE Region (\n    ISO_code VARCHAR(255),\n    country_ID INTEGER NOT NULL,\n    region_ID INTEGER PRIMARY KEY,\n    region_name VARCHAR(255),\n    FOREIGN KEY (country_ID) REFERENCES Country(country_ID)\n);\n\nCREATE TABLE Resource_File (\n    application_ID INTEGER NOT NULL,\n    base_name VARCHAR(255),\n    path VARCHAR(255),\n    resource_file_ID INTEGER PRIMARY KEY,\n    version VARCHAR(255),\n    FOREIGN KEY (application_ID) REFERENCES Application(application_ID)\n);\n\nCREATE TABLE Application_and_Language (\n    application_ID INTEGER NOT NULL,\n    language_ID INTEGER NOT NULL,\n    PRIMARY KEY (application_ID, language_ID),\n    FOREIGN KEY (application_ID) REFERENCES Application(application_ID),\n    FOREIGN KEY (language_ID) REFERENCES Language(language_ID)\n);\n\nCREATE TABLE Language_and_Region (\n    language_ID INTEGER NOT NULL,\n    region_ID INTEGER NOT NULL,\n    PRIMARY KEY (language_ID, region_ID),\n    FOREIGN KEY (language_ID) REFERENCES Language(language_ID),\n    FOREIGN KEY (region_ID) REFERENCES Region(region_ID)\n);\n\nCREATE TABLE Resource_Key (\n    key_ID INTEGER PRIMARY KEY,\n    key_name VARCHAR(255),\n    resource_file_ID INTEGER NOT NULL,\n    version VARCHAR(255),\n    FOREIGN KEY (resource_file_ID) REFERENCES Resource_File(resource_file_ID)\n);\n\nCREATE TABLE Resource_Value (\n    key_ID INTEGER NOT NULL,\n    value_ID INTEGER PRIMARY KEY,\n    value_content VARCHAR(255),\n    version VARCHAR(255),\n    FOREIGN KEY (key_ID) REFERENCES Resource_Key(key_ID)\n);", "remarks": "结合描述，schema_7 语言地区模式里存在部分函数依赖，模式已修改", "assign_to": "gcc", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8fa", "question": "The code review system allows users to post comments on different applications. Comments can be published by registered users or anonymous users. Each comment must record the following information: publication time, information of the commenter (if it is a registered user, the User ID is recorded; if it is an anonymous user, the contact URL is recorded), and the content of the comment. The system shall ensure that each comment supports storing the content in different formats (such as HTML and Markdown).", "answer": "CREATE TABLE Anonymous_Comment (\n    Comment_Content VARCHAR(255),\n    Comment_ID INTEGER PRIMARY KEY,\n    Contact_URL VARCHAR(255),\n    Publication_Time DATETIME,\n    Storage_Format VARCHAR(255)\n);\n\nCREATE TABLE User_Information (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Normal_Comment (\n    Comment_Content VARCHAR(255),\n    Comment_ID INTEGER PRIMARY KEY,\n    Publication_Time DATETIME,\n    Storage_Format VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User_Information(User_ID)\n);", "remarks": "dyq，匿名评论直接存储联系网址，无需单独的匿名信息表。", "assign_to": "zp", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8fb", "question": "The management of CORS station networks in a geographic information system is as follows: The system contains multiple CORS stations and networks. Each network’s information includes Network ID, Network Name, and Network Description. The relationship between CORS stations and CORS networks is recorded in the CORS Station Network Relationship Table, which includes Relationship ID, CORS Station ID, CORS Network ID, Effective Start Time, and Effective End Time. The CORS Station ID is a Foreign key referencing the Station ID field in the CORS Station Table, and the CORS Network ID is a Foreign key referencing the Network ID field in the CORS Network Table. Through these tables, the system can flexibly manage the relationships between CORS stations and networks, record the effective time range of each relationship, and ensure data accuracy and timeliness.", "answer": "CREATE TABLE CORS_Station (\n    CORS_Station_Description VARCHAR(255),\n    CORS_Station_ID INTEGER PRIMARY KEY,\n    CORS_Station_Name VARCHAR(255)\n);\n\nCREATE TABLE CORS_Network (\n    CORS_Network_Description VARCHAR(255),\n    CORS_Network_ID INTEGER PRIMARY KEY,\n    CORS_Network_Name VARCHAR(255)\n);\n\nCREATE TABLE Station_Network_Relationship (\n    CORS_Network_ID INTEGER NOT NULL,\n    CORS_Station_ID INTEGER NOT NULL,\n    Effective_End_Time DATETIME,\n    Effective_Start_Time DATETIME,\n    PRIMARY KEY (CORS_Station_ID, CORS_Network_ID, Effective_Start_Time, Effective_End_Time),\n    FOREIGN KEY (CORS_Network_ID) REFERENCES CORS_Network(CORS_Network_ID),\n    FOREIGN KEY (CORS_Station_ID) REFERENCES CORS_Station(CORS_Station_ID)\n);", "remarks": "cs 1/17 round2 edit", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a8ff", "question": "Personnel Management: The system records basic information for personnel, including name and address (street and city). Each employee is identified by a unique ID. Each personnel may have multiple phone numbers; the system records this information and supports multiple records.\n\nVehicle Management: The system records detailed information for vehicles, including Vehicle Identification Number (VIN), manufacturer, model, year, and driver information. Each vehicle is identified by a unique VIN, and the system supports assigning personnel as drivers for vehicles. Drivers are linked to the Personnel table by a Foreign key to the ID and are updated through cascading updates.\n\nInsurance Management: The system records insurance information for each vehicle, detailing each vehicle's purchased insurance and the specifics of the insurance (Insurance Type ID, Insurance Company Name, Insurance Cost, Insurance Content), along with the specific time of purchase and the validity period of the insurance for the vehicle.\n\nPhone Management: The system allows recording multiple phone numbers for each personnel. Each phone number is associated with personnel via ID and uniquely identified by a composite Primary key of ID and Number. Each phone number's information includes: ID (Foreign key) and Number (phone number).\n", "answer": "CREATE TABLE Personnel (\n    City VARCHAR(255),\n    Name VARCHAR(255),\n    Personnel_ID INTEGER PRIMARY KEY,\n    Street VARCHAR(255)\n);\n\nCREATE TABLE Insurance_Type (\n    Insurance_Company_Name VARCHAR(255),\n    Insurance_Content VARCHAR(255),\n    Insurance_Cost FLOAT,\n    Insurance_Type_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Vehicle (\n    Driver_ID INTEGER NOT NULL,\n    Manufacturer VARCHAR(255),\n    Model VARCHAR(255),\n    Vin VARCHAR(255) PRIMARY KEY,\n    Year INTEGER,\n    FOREIGN KEY (Driver_ID) REFERENCES Personnel(Personnel_ID)\n);\n\nCREATE TABLE User_Phone_Table (\n    Phone_Number INTEGER,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Phone_Number),\n    FOREIGN KEY (User_ID) REFERENCES Personnel(Personnel_ID)\n);\n\nCREATE TABLE Vehicle_Purchase_Insurance (\n    Insurance_Type_ID INTEGER NOT NULL,\n    Purchase_Time DATETIME,\n    Validity_Time DATETIME,\n    Vin VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Vin, Insurance_Type_ID, Purchase_Time),\n    FOREIGN KEY (Insurance_Type_ID) REFERENCES Insurance_Type(Insurance_Type_ID),\n    FOREIGN KEY (Vin) REFERENCES Vehicle(Vin)\n);", "remarks": "第二轮完善了需求分析，修正了schema中外键设置时格式不对的地方", "assign_to": "szc", "assign_to_round2": "cyx", "domain": ["交通运输、仓储和邮政业", "道路运输业"]}
{"id": "67552f0a13602ec03b41a900", "question": "Business Requirements Description:\nThis system is designed for managing and monitoring web services in various applications. Key requirements include:\nEach user has a unique username, email, and role. User roles are associated with specific permissions. Users can be assigned different roles and permissions that are linked to particular applications.\nEach application has a unique ID, code, name, and type.\nEach web service has a unique ID, name, description, and creation date. It records error information, including error codes, descriptions, timestamps, and return status.\nMonitors the invocation of web services, recording details like invocation time, return status, delay time, and other performance metrics.\nTracks statistics such as success rate and call count over a specific time period.\nTracks which users are authorized to access which applications.\nLinks error data with monitoring data to enable detailed analysis and reporting.", "answer": "CREATE TABLE User (\n    email VARCHAR(255),\n    user_ID INTEGER PRIMARY KEY,\n    username VARCHAR(255)\n);\n\nCREATE TABLE Application (\n    application_ID INTEGER PRIMARY KEY,\n    code VARCHAR(255),\n    name VARCHAR(255),\n    type VARCHAR(255)\n);\n\nCREATE TABLE Web_Service (\n    application_ID INTEGER NOT NULL,\n    creation_date DATETIME,\n    description VARCHAR(255),\n    name VARCHAR(255),\n    service_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (application_ID) REFERENCES Application(application_ID)\n);\n\nCREATE TABLE Permissions (\n    application_ID INTEGER NOT NULL,\n    permission_ID INTEGER PRIMARY KEY,\n    role VARCHAR(255),\n    user_ID INTEGER NOT NULL,\n    FOREIGN KEY (application_ID) REFERENCES Application(application_ID),\n    FOREIGN KEY (user_ID) REFERENCES User(user_ID)\n);\n\nCREATE TABLE Error_Information (\n    error_ID INTEGER PRIMARY KEY,\n    error_code VARCHAR(255),\n    error_description VARCHAR(255),\n    occurrence_time DATETIME,\n    return_status VARCHAR(255),\n    service_ID INTEGER NOT NULL,\n    FOREIGN KEY (service_ID) REFERENCES Web_Service(service_ID)\n);\n\nCREATE TABLE Service_Monitoring (\n    call_time DATETIME,\n    delay_time DATETIME,\n    monitoring_ID INTEGER PRIMARY KEY,\n    return_status VARCHAR(255),\n    service_ID INTEGER NOT NULL,\n    FOREIGN KEY (service_ID) REFERENCES Web_Service(service_ID)\n);\n\nCREATE TABLE Statistics (\n    call_count INTEGER,\n    service_ID INTEGER NOT NULL,\n    statistic_ID INTEGER PRIMARY KEY,\n    success_rate FLOAT,\n    time_period DATETIME,\n    FOREIGN KEY (service_ID) REFERENCES Web_Service(service_ID)\n);\n\nCREATE TABLE Error_and_Monitoring_Association (\n    error_ID INTEGER NOT NULL,\n    monitoring_ID INTEGER NOT NULL,\n    FOREIGN KEY (error_ID) REFERENCES Error_Information(error_ID),\n    FOREIGN KEY (monitoring_ID) REFERENCES Service_Monitoring(monitoring_ID)\n);", "remarks": "因为每个用户可以被分配不同的角色和权限，而模式6已经体现这种联系，故所以删除用户模式中的角色属性", "assign_to": "gcc", "assign_to_round2": "cyx", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a902", "question": "An education management system is required to manage information on courses, professors, students, and subjects. Each course has a code, total credits, name, and a professor as the course coordinator. Professors may be responsible for different courses and their names and email information are recorded. Subjects need to record the number of credits, subject names, possible equivalent subjects, and manage prerequisite relationships to ensure students have completed relevant prerequisites before enrolling in a subject. The system must also store each course's subjects arranged in different semesters.\n\nFor students, the system needs to record their student ID, name, email, courses taken, date of birth, credits completed, and average grade.", "answer": "CREATE TABLE Subject (\n    Credits FLOAT,\n    Subject_Code VARCHAR(255) PRIMARY KEY,\n    Subject_Name VARCHAR(255)\n);\n\nCREATE TABLE Professor (\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Professor_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Student (\n    Average_Grade INTEGER,\n    Credits_Completed FLOAT,\n    Date_of_Birth DATETIME,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Subject_Equivalence (\n    Equivalent_Subject_Code VARCHAR(255) NOT NULL,\n    Subject_Code VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Subject_Code, Equivalent_Subject_Code),\n    FOREIGN KEY (Equivalent_Subject_Code) REFERENCES Subject(Subject_Code),\n    FOREIGN KEY (Subject_Code) REFERENCES Subject(Subject_Code)\n);\n\nCREATE TABLE Subject_Prerequisites (\n    Prerequisite_Subject VARCHAR(255) NOT NULL,\n    Related_Subject VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Prerequisite_Subject, Related_Subject),\n    FOREIGN KEY (Prerequisite_Subject) REFERENCES Subject(Subject_Code),\n    FOREIGN KEY (Related_Subject) REFERENCES Subject(Subject_Code)\n);\n\nCREATE TABLE Course (\n    Course_Code VARCHAR(255) PRIMARY KEY,\n    Name VARCHAR(255),\n    Responsible_Professor INTEGER NOT NULL,\n    Total_Credits FLOAT,\n    FOREIGN KEY (Responsible_Professor) REFERENCES Professor(Professor_ID)\n);\n\nCREATE TABLE Course_Assignment (\n    Course_Code VARCHAR(255) NOT NULL,\n    Semester INTEGER,\n    Subject_Code VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Course_Code, Subject_Code, Semester),\n    FOREIGN KEY (Course_Code) REFERENCES Course(Course_Code),\n    FOREIGN KEY (Subject_Code) REFERENCES Subject(Subject_Code)\n);\n\nCREATE TABLE Student_Course_Enrollment (\n    Course_Code VARCHAR(255) NOT NULL,\n    Course_Grade INTEGER,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_Code),\n    FOREIGN KEY (Course_Code) REFERENCES Course(Course_Code),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "第二轮完善了需求描述", "assign_to": "zp", "assign_to_round2": "cyx", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a910", "question": "The financial management system shall record and manage various expense information. Each expense record shall contain basic fields such as description, amount, month, due date, payment date, and expense status. The system shall also support multi-dimensional associations, such as binding expenses to application centers, accounting accounts, and company accounts. Some expenses may involve external suppliers, which shall also be managed and associated in the system. Users shall be able to query or analyze expense information based on this, such as querying paid or unpaid expenses within a certain period, or viewing expense records of specific suppliers, and generate corresponding financial reports based on actual requirements.", "answer": "CREATE TABLE Account (\n    Account VARCHAR(255) PRIMARY KEY,\n    Affiliated_Unit VARCHAR(255),\n    User VARCHAR(255)\n);\n\nCREATE TABLE Expense (\n    Amount INTEGER,\n    Associated_Account VARCHAR(255) NOT NULL,\n    Creation_Time DATETIME,\n    Description VARCHAR(255),\n    Due_Time DATETIME,\n    Payment_Time DATETIME,\n    Record_ID INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    FOREIGN KEY (Associated_Account) REFERENCES Account(Account)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "dyq", "domain": ["金融业", "资本市场服务"]}
{"id": "67552f0a13602ec03b41a91c", "question": "The database design for a file management system is as follows: The system contains multiple files, and the file information includes File ID, File Name, File Type, File Storage Location, File Status, File Record Count, File Size, File Creation Time, File Last Update Time, File Description, File Version Number, and File Collection ID, where the File Collection ID is a Foreign key associated with the File Collection ID field in the File Collection Table. The file collection information includes File Collection ID and File Collection Description. File replica information is stored in the File Replica Table, including Replica ID, File ID, Replica Storage Location, Replica Node Name, Replica Device Name, Replica Last Update Time, Replica Status, Replica Version Number, and Replica Index, where the File ID is a Foreign key associated with the File ID field in the File Table. Through these tables, the system comprehensively manages file, file collection, file parameters, and file replica information, ensuring efficient storage and access to file data.", "answer": "CREATE TABLE File_Collection (\n    File_Collection_Description VARCHAR(255),\n    File_Collection_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE File (\n    File_Collection_ID INTEGER NOT NULL,\n    File_Creation_Time DATETIME,\n    File_Description VARCHAR(255),\n    File_ID INTEGER PRIMARY KEY,\n    File_Last_Update_Time DATETIME,\n    File_Name VARCHAR(255),\n    File_Record_Count INTEGER,\n    File_Size FLOAT,\n    File_Status VARCHAR(255),\n    File_Storage_Location VARCHAR(255),\n    File_Type VARCHAR(255),\n    File_Version_Number FLOAT,\n    FOREIGN KEY (File_Collection_ID) REFERENCES File_Collection(File_Collection_ID)\n);\n\nCREATE TABLE Replica (\n    File_ID INTEGER NOT NULL,\n    Replica_Device_Name VARCHAR(255),\n    Replica_ID INTEGER PRIMARY KEY,\n    Replica_Index INTEGER,\n    Replica_Last_Update_Time DATETIME,\n    Replica_Node_Name VARCHAR(255),\n    Replica_Status VARCHAR(255),\n    Replica_Storage_Location VARCHAR(255),\n    Replica_Version_Number FLOAT,\n    FOREIGN KEY (File_ID) REFERENCES File(File_ID)\n);", "remarks": "模式2中缺少属性，第二轮进行了补充", "assign_to": "lzm", "assign_to_round2": "cyx", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a91d", "question": "The design of a technology conference management system is as follows:\nThe conference has participants, whose information includes Participant ID, Name, Company, and Email.\nThe conference offers various types of tickets, with ticket information including Ticket ID, Name, Description, Price, and whether it includes workshops, with each participant limited to purchasing one ticket.\nParticipants can use discount codes to purchase tickets, with discount code information including Code, Name, Type, and Amount.\nAfter purchasing tickets, participant ticket records are generated, containing Participant ID, Ticket ID, Discount Code ID, and Net Price.\nThe conference schedules multiple meetings, with meeting information including Name, Description, Date, Start Time, End Time, and Room.\nFurthermore, the conference also offers workshops, with workshop information including Name, Description, Requirements, Location, Date, Start Time, End Time, and Capacity.\nEach meeting or workshop can have multiple speakers, with speaker information including Name, Company, and Description.", "answer": "CREATE TABLE Ticket_Type (\n    Description VARCHAR(255),\n    Includes_Workshop VARCHAR(255),\n    Name VARCHAR(255),\n    Price FLOAT,\n    Ticket_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Discount_Code (\n    Amount FLOAT,\n    Discount_Code_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Meeting (\n    Date DATETIME,\n    Description VARCHAR(255),\n    End_Time DATETIME,\n    Meeting_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Room VARCHAR(255),\n    Start_Time DATETIME\n);\n\nCREATE TABLE Workshop (\n    Capacity INTEGER,\n    Date DATETIME,\n    Description VARCHAR(255),\n    End_Time DATETIME,\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Requirements VARCHAR(255),\n    Start_Time DATETIME,\n    Workshop_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Speaker (\n    Bio VARCHAR(255),\n    Company VARCHAR(255),\n    Name VARCHAR(255),\n    Speaker_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Participant (\n    Company VARCHAR(255),\n    Discount_Code_ID INTEGER NOT NULL,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Participant_ID INTEGER PRIMARY KEY,\n    Ticket_ID INTEGER NOT NULL,\n    FOREIGN KEY (Discount_Code_ID) REFERENCES Discount_Code(Discount_Code_ID),\n    FOREIGN KEY (Ticket_ID) REFERENCES Ticket_Type(Ticket_ID)\n);\n\nCREATE TABLE Meeting_Speaker (\n    Meeting_ID INTEGER NOT NULL,\n    Speaker_ID INTEGER NOT NULL,\n    PRIMARY KEY (Meeting_ID, Speaker_ID),\n    FOREIGN KEY (Meeting_ID) REFERENCES Meeting(Meeting_ID),\n    FOREIGN KEY (Speaker_ID) REFERENCES Speaker(Speaker_ID)\n);\n\nCREATE TABLE Workshop_Speaker (\n    Speaker_ID INTEGER NOT NULL,\n    Workshop_ID INTEGER NOT NULL,\n    PRIMARY KEY (Workshop_ID, Speaker_ID),\n    FOREIGN KEY (Speaker_ID) REFERENCES Speaker(Speaker_ID),\n    FOREIGN KEY (Workshop_ID) REFERENCES Workshop(Workshop_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["文化、体育和娱乐业", "广播、电视、电影和录音制作业"]}
{"id": "67552f0a13602ec03b41a923", "question": "Retail Management System\n\n1. Supplier Management\nRecord the basic information of suppliers, including supplier ID name, address, and phone number.\nYou can query and manage supplier information.\n\n2. Customer Management\nRecord the basic information of customers, including customer ID, first name, last name, phone number, address, email, etc.\nYou can query and manage customer information.\n\n3. Product Management\nRecord the detailed information of products, including name, description, purchase price, selling price, inventory quantity, and minimum inventory quantity.\nBy associating supplier information with supplier ID, you can track the supplier of the product.\nYou can query and manage product information, including inventory management.\n\n4. Invoice Management\nRecord the detailed information of each invoice, including invoice ID, date, tax amount, total value, and customer information.\nBy associating customer information with customer ID number, you can track the customer of the invoice.\nYou can generate and manage invoices.\n\n5. Invoice Product Association Management\nRecord the products and quantities contained in each invoice.\nAssociating invoice and product information with invoice ID and product ID.\nYou can query the products and quantities contained in each invoice, as well as the detailed information of the products.", "answer": "CREATE TABLE Supplier (\n    Supplier_Address VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_Name VARCHAR(255),\n    Supplier_Phone VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    First_Name VARCHAR(255),\n    Last_Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Description VARCHAR(255),\n    Minimum_Stock_Quantity INTEGER,\n    Name VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Purchase_Price FLOAT,\n    Selling_Price FLOAT,\n    Stock_Quantity INTEGER,\n    Supplier_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Invoice (\n    Customer_ID INTEGER NOT NULL,\n    Date DATETIME,\n    Invoice_ID INTEGER PRIMARY KEY,\n    Tax_Amount FLOAT,\n    Total_Value INTEGER,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Invoice_Product (\n    Invoice_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Product_Quantity INTEGER,\n    PRIMARY KEY (Invoice_ID, Product_ID),\n    FOREIGN KEY (Invoice_ID) REFERENCES Invoice(Invoice_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "第一轮标注的模式竟然是西班牙语，只修改了模式。", "assign_to": "szh", "assign_to_round2": "szh2", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a928", "question": "Here is the required database business requirement description for a horse racing betting system: The system includes race management, recording each race's identifier, name, start time, end time, and results. The horse management section records the name of each racehorse. The system also records the bettor's phone and other identity information for easy contact. The betting management section records the amount of each bet and its corresponding race. Race result records are used to track each racehorse's number and ranking in the race, supporting subsequent statistics and analysis. The betting result management helps compare the bettor's selected horse's expected ranking with the actual outcome, thus determining whether the bet is won.\n", "answer": "CREATE TABLE Race (\n    End_Time DATETIME,\n    Race_ID INTEGER PRIMARY KEY,\n    Race_Name VARCHAR(255),\n    Race_Result VARCHAR(255),\n    Start_Time DATETIME\n);\n\nCREATE TABLE Horse (\n    Horse_ID INTEGER PRIMARY KEY,\n    Horse_Name VARCHAR(255)\n);\n\nCREATE TABLE Bettor (\n    Bettor_ID INTEGER PRIMARY KEY,\n    Identity_Information VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Horse_Participation (\n    Horse_ID INTEGER NOT NULL,\n    Horse_Ranking INTEGER,\n    Race_ID INTEGER NOT NULL,\n    Race_Time DATETIME,\n    PRIMARY KEY (Horse_ID, Race_ID, Race_Time),\n    FOREIGN KEY (Horse_ID) REFERENCES Horse(Horse_ID),\n    FOREIGN KEY (Race_ID) REFERENCES Race(Race_ID)\n);\n\nCREATE TABLE Bettor_Betting_Race (\n    Actual_Result VARCHAR(255),\n    Betting_Amount FLOAT,\n    Betting_Time DATETIME,\n    Bettor_ID INTEGER NOT NULL,\n    Expected_Ranking INTEGER,\n    Horse_ID INTEGER NOT NULL,\n    Race_ID INTEGER NOT NULL,\n    Winning_Status VARCHAR(255),\n    PRIMARY KEY (Bettor_ID, Race_ID, Betting_Time),\n    FOREIGN KEY (Bettor_ID) REFERENCES Bettor(Bettor_ID),\n    FOREIGN KEY (Horse_ID) REFERENCES Horse(Horse_ID),\n    FOREIGN KEY (Race_ID) REFERENCES Race(Race_ID)\n);", "remarks": "第二轮完善了需求分析；将模式4中的投注内容具体化成了赛马编号和预期排名，增加了实际结果这一属性", "assign_to": "szc", "assign_to_round2": "cyx", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a92a", "question": "Business Requirements Description:\nThis system is designed for managing work items, with the following core functionalities:\nStores the Attributes for each work item, including Attributes name, Attributes value, and link status.\nRecords the work item’s ID, name, description, creation date, update date, and other relevant information.\nTracks the link status of work items, which can be used to record the current status or related information about the work item.\n", "answer": "CREATE TABLE Work_Item (\n    creation_Date DATETIME,\n    description VARCHAR(255),\n    update_Date DATETIME,\n    workItem_ID INTEGER PRIMARY KEY,\n    workItem_Name VARCHAR(255)\n);\n\nCREATE TABLE Work_Item_Attributes (\n    Attributes_ID INTEGER,\n    Attributes_Name VARCHAR(255),\n    Attributes_Value FLOAT,\n    link_Status VARCHAR(255),\n    workItem_ID INTEGER NOT NULL,\n    PRIMARY KEY (Attributes_ID, workItem_ID),\n    FOREIGN KEY (workItem_ID) REFERENCES Work_Item(workItem_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "dyq", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a938", "question": "The business requirements description for the log management system: The system is designed to record and manage operational logs, supporting the creation, modification, and deletion of logs. The system must capture detailed information for each log, including log level, content, category, and lifecycle (creation, modification, and deletion timestamps). Each log operation must be associated with an operator, who possesses an ID, account, password, contact information, permissions, and user role. By recording the relationship between logs and operators, the system can track the operational history of each log, including operation time, operation type, and execution content. Additionally, the system supports categorized management of logs to ensure the traceability and integrity of log data.", "answer": "CREATE TABLE Log (\n    Log_Category VARCHAR(255),\n    Log_Content VARCHAR(255),\n    Log_Creation_Time DATETIME,\n    Log_Deletion_Time DATETIME,\n    Log_ID INTEGER PRIMARY KEY,\n    Log_Last_Modified_Time DATETIME,\n    Log_Level VARCHAR(255)\n);\n\nCREATE TABLE Operator (\n    Account VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Password VARCHAR(255)\n);\n\nCREATE TABLE Operation_Log (\n    Execution_Content VARCHAR(255),\n    Log_ID INTEGER NOT NULL,\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Log_ID, User_ID, Operation_Time),\n    FOREIGN KEY (Log_ID) REFERENCES Log(Log_ID),\n    FOREIGN KEY (User_ID) REFERENCES Operator(ID)\n);", "remarks": "CS 2025/1/15", "assign_to": "cs", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a939", "question": "This is a restaurant recommendation system for managing restaurant information and recommending nearby restaurants. For basic restaurant information management, the system maintains restaurant basic information, including restaurant ID, name, address, phone number, business hours, and average cost per person. It records restaurant geographical location information including latitude and longitude coordinates, manages restaurant feature tags such as \"Sichuan cuisine\", \"hot pot\", \"family gathering\", etc., and tracks restaurant ratings and number of reviews. For dish management, the system records information about dishes offered by each restaurant, including dish ID, name, price, description, etc. It adds category tags to dishes such as \"signature dish\", \"best-seller\", \"new arrival\", etc., supports uploading dish images, and records dish satisfaction rate and monthly sales. For user review management, the system supports users to rate and review restaurants, recording review content, rating, dining time, and other information. It supports uploading actual dining photos, and allows restaurants to reply to reviews, including reply time and content.", "answer": "CREATE TABLE Restaurant (\n    Address VARCHAR(255),\n    Average_cost FLOAT,\n    Business_hours INTEGER,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Restaurant_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE User_review (\n    Actual_photos BLOB,\n    Dining_time DATETIME,\n    Rating FLOAT,\n    Review_ID INTEGER PRIMARY KEY,\n    Review_content VARCHAR(255)\n);\n\nCREATE TABLE Dish (\n    Category VARCHAR(255),\n    Description VARCHAR(255),\n    Dish_ID INTEGER PRIMARY KEY,\n    Dish_image_URL VARCHAR(255),\n    Monthly_sales FLOAT,\n    Name VARCHAR(255),\n    Price FLOAT,\n    Restaurant_ID INTEGER NOT NULL,\n    Satisfaction_rate FLOAT,\n    FOREIGN KEY (Restaurant_ID) REFERENCES Restaurant(Restaurant_ID)\n);\n\nCREATE TABLE Review_reply (\n    Reply_ID INTEGER PRIMARY KEY,\n    Reply_content VARCHAR(255),\n    Reply_time DATETIME,\n    Review_ID_being_replied_to INTEGER NOT NULL,\n    FOREIGN KEY (Review_ID_being_replied_to) REFERENCES User_review(Review_ID)\n);", "remarks": "SZC 1/25 : 评价回复表中增加外键，对应相应的评价编号。", "assign_to": "hzb", "assign_to_round2": "szc", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a93a", "question": "The data management system of a social platform is as follows: the platform contains multiple users. User information includes User Name, Name, Email, Personal Bio, Relationship Status, Phone Number, Creation Time, and Last Edit Time, where User Name is the Primary key and cannot be null. Post information includes Post ID, Post Content, Post Title, User Name, Creation Time, and Last Edit Time. Comment information includes Comment ID, Post ID, User Name, Comment Content, Creation Time, and Last Edit Time, where Comment ID is the Primary key and auto-incremented, Post ID is a Foreign key referencing the Post ID field in the post table, and User Name is a Foreign key referencing the User Name field in the user table. These tables ensure efficient management of platform data and seamless user interactions.", "answer": "CREATE TABLE User (\n    Creation_Time DATETIME,\n    Email VARCHAR(255),\n    Last_Edit_Time DATETIME,\n    Name VARCHAR(255),\n    Personal_Bio VARCHAR(255),\n    Phone_Number INTEGER,\n    Relationship_Status VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Post (\n    Creation_Time DATETIME,\n    Last_Edit_Time DATETIME,\n    Post_Content VARCHAR(255),\n    Post_ID INTEGER PRIMARY KEY,\n    Post_Title VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Comment (\n    Comment_Content VARCHAR(255),\n    Creation_Time DATETIME,\n    Last_Edit_Time DATETIME,\n    Post_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Post_ID, Last_Edit_Time),\n    FOREIGN KEY (Post_ID) REFERENCES Post(Post_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a93e", "question": "This is a library management system. For book management, the system maintains basic book information, including ISBN, title, author, publisher, publication date, price, number of copies available, number of copies in circulation, library location, and shelf number. For reader management, the system maintains reader information including reader ID, library card number, name, gender, age, phone, email, address, reader type, maximum borrowing limit, and loan period. For book borrowing management, the system records borrowing details including reader ID, ISBN, borrowing time, due date, actual return date, and borrowing status. For book reservation management, the system supports readers to reserve books, recording reader ID, ISBN, reservation time, reservation expiration time, and reservation status.", "answer": "CREATE TABLE Book (\n    Author VARCHAR(255),\n    Available_copies INTEGER,\n    Circulating_copies INTEGER,\n    ISBN VARCHAR(255) PRIMARY KEY,\n    Library_location VARCHAR(255),\n    Price FLOAT,\n    Publication_date DATETIME,\n    Publisher VARCHAR(255),\n    Shelf_number INTEGER,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Reader (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Library_card_number VARCHAR(255),\n    Loan_period VARCHAR(255),\n    Maximum_borrowing_limit INTEGER,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Reader_ID INTEGER PRIMARY KEY,\n    Reader_type VARCHAR(255)\n);\n\nCREATE TABLE Reader_book_borrowing (\n    Actual_return_date DATETIME,\n    Borrowing_status VARCHAR(255),\n    Borrowing_time DATETIME,\n    Due_date DATETIME,\n    ISBN VARCHAR(255) NOT NULL,\n    Reader_ID INTEGER NOT NULL,\n    PRIMARY KEY (Reader_ID, ISBN, Borrowing_time),\n    FOREIGN KEY (ISBN) REFERENCES Book(ISBN),\n    FOREIGN KEY (Reader_ID) REFERENCES Reader(Reader_ID)\n);\n\nCREATE TABLE Reader_book_reservation (\n    ISBN VARCHAR(255) NOT NULL,\n    Reader_ID INTEGER NOT NULL,\n    Reservation_expiration_time DATETIME,\n    Reservation_status VARCHAR(255),\n    Reservation_time DATETIME,\n    PRIMARY KEY (Reader_ID, ISBN, Reservation_time),\n    FOREIGN KEY (ISBN) REFERENCES Book(ISBN),\n    FOREIGN KEY (Reader_ID) REFERENCES Reader(Reader_ID)\n);", "remarks": "dyq，图书表的主键由图书编号改为 ISBN，删除无用属性（费雷）。", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a940", "question": "The permission management system is designed as follows:\nThe system contains multiple companies, each with a unique Company ID and Name.\nEach company has multiple users. User information includes User ID, Company ID, Username, Phone Number, and Job Title.\nThe system defines multiple Login Response Types, each with a unique Type ID and Name.\nEach login attempt generates a Login Response Record, which records the User, Login Time, Response Type ID, and Response Label.", "answer": "CREATE TABLE Company (\n    Company_ID INTEGER PRIMARY KEY,\n    Company_Name VARCHAR(255)\n);\n\nCREATE TABLE Login_Response_Type (\n    Type_ID INTEGER PRIMARY KEY,\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Company_ID INTEGER NOT NULL,\n    Job_Title VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255),\n    FOREIGN KEY (Company_ID) REFERENCES Company(Company_ID)\n);\n\nCREATE TABLE Login_Response_Record (\n    Login_Time DATETIME,\n    Response_Label VARCHAR(255),\n    Response_Type_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Login_Time),\n    FOREIGN KEY (Response_Type_ID) REFERENCES Login_Response_Type(Type_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a941", "question": "Customer Order Management System Business Requirements Description for an E-commerce Platform: The platform hosts multiple customers, each with a unique Customer ID, including name, email, password, and detailed address information. The platform sells a variety of products, each product has a unique Product ID, including name, price, stock quantity, description, and image path. Customers can place orders; each order has a unique ID, records the order time and status, and includes multiple order items, each order item records the purchased Product ID and quantity.", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Detailed_Address VARCHAR(255),\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Description VARCHAR(255),\n    Image_Path VARCHAR(255),\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Stock_Quantity INTEGER\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Time DATETIME,\n    Status VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order_Item (\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a948", "question": "Database name: School\n\nThis database is a school management system used to record student, teacher and subject information, as well as manage and record students' test scores and subject scores.\n\nMain functions\n\n1. Student management:\nRecord students' personal information, including name, age, address and phone number.\nManage the relationship between students and subjects, and record students' scores in various subjects.\nRecord the exams students take and their scores.\n\n2. Subject management:\nRecord the name and number of class hours of each subject.\nManage the relationship between subjects and students and teachers.\n\n3. Exam management:\nRecord the date of the exam and the corresponding subject.\nManage students' exam scores.\n\n4. Teacher management:\nRecord teachers' personal information, including name, address and phone number.\nManage the subjects taught by teachers.\nRecord the guidance relationship between teachers and students.\n\n5. Grade management:\nRecord students' subject scores and test scores.\nProvide grade query and statistical functions, such as querying all grades of a student, the average grade of all students in a subject, etc.\n\n6. Relationship management:\nManage the relationship between students and subjects, students and teachers, and teachers and subjects.\nFor example, you can query which teachers teach which students in which subjects.", "answer": "CREATE TABLE Student (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Teacher (\n    Address VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Teacher_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Subject (\n    Name VARCHAR(255),\n    Number_of_Hours INTEGER,\n    Subject_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Teacher_and_Student_Guidance (\n    Student_ID INTEGER NOT NULL,\n    Teacher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Teacher_ID, Student_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),\n    FOREIGN KEY (Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Exam (\n    Corresponding_Subject_ID INTEGER NOT NULL,\n    Date DATETIME,\n    Exam_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Corresponding_Subject_ID) REFERENCES Subject(Subject_ID)\n);\n\nCREATE TABLE Student_and_Subject (\n    Student_ID INTEGER NOT NULL,\n    Subject_Grade FLOAT,\n    Subject_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Subject_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),\n    FOREIGN KEY (Subject_ID) REFERENCES Subject(Subject_ID)\n);\n\nCREATE TABLE Teacher_and_Subject (\n    Subject_ID INTEGER NOT NULL,\n    Teacher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Teacher_ID, Subject_ID),\n    FOREIGN KEY (Subject_ID) REFERENCES Subject(Subject_ID),\n    FOREIGN KEY (Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Student_and_Exam (\n    Exam_Grade FLOAT,\n    Exam_ID INTEGER NOT NULL,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Exam_ID),\n    FOREIGN KEY (Exam_ID) REFERENCES Exam(Exam_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "szc", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a949", "question": "The database is a content management system (CMS), specifically designed to support content workflows, such as the DotNetNuke (DNN) platform. The main functions of the system include recording content review and publication processes, maintaining detailed logs of each operation during content creation, review, and publication, such as operation type, operation time, operating user, and related comments. By recording state changes in the workflow, the system enables content version management and tracking. Additionally, the operation audit function provides detailed logging, facilitating administrator auditing and tracking of content change history. The system also supports user permission management, controlling the permissions of different users in the content workflow by recording operating users, ensuring compliance in content management. The workflow management function allows configuration and management of multiple workflow types, supporting different content item workflow states and types. Finally, through the content state monitoring function, administrators can effectively monitor the current and historical states of content, ensuring content quality and compliance.\n", "answer": "CREATE TABLE Content (\n    Content_Description VARCHAR(255),\n    Content_ID INTEGER PRIMARY KEY,\n    Content_Type VARCHAR(255),\n    Creation_Time DATETIME,\n    Title VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE User (\n    Email VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Operation_Log (\n    Content_ID INTEGER NOT NULL,\n    Log_ID INTEGER PRIMARY KEY,\n    Operation_Comment VARCHAR(255),\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    Operation_User VARCHAR(255),\n    FOREIGN KEY (Content_ID) REFERENCES Content(Content_ID)\n);\n\nCREATE TABLE User_Content_Modification (\n    Content_ID INTEGER NOT NULL,\n    Modification_Time DATETIME,\n    Modified_Content VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Content_ID, Modification_Time),\n    FOREIGN KEY (Content_ID) REFERENCES Content(Content_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a94d", "question": "The business requirements of a user management system are described as follows: The system contains multiple user accounts. Account information includes Account ID, User ID, Third-party Service Provider Type, Third-party Service Provider ID, Third-party Service Provider Account ID, Refresh Token, Access Token, Access Token Expiration Time, Account Creation Time, and Account Update Time. The User ID is a Foreign key referencing the User ID field in the User table. User session information is stored in the Session table, including Session ID, User ID, Session Expiration Time, Session Token, Access Token, Session Creation Time, and Session Update Time. The User ID is a Foreign key referencing the User ID field in the User table. Basic user information is stored in the User table, including User ID, Username, User Email, Email Verification Time, User Avatar URL, User Creation Time, and User Update Time. User verification request information is stored in the Verification Request table, including Verification Request ID, User ID, Verification Request Identifier, Verification Token, Verification Request Expiration Time, Verification Request Creation Time, and Verification Request Update Time. Through these tables, the system comprehensively manages user accounts, sessions, basic information, and verification requests, ensuring the security of user identities and the integrity of data.", "answer": "CREATE TABLE User (\n    Email_Verification_Time DATETIME,\n    User_Avatar_URL BLOB,\n    User_Creation_Time DATETIME,\n    User_Email VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Update_Time DATETIME,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE User_Account (\n    Access_Token VARCHAR(255),\n    Access_Token_Expiration_Time DATETIME,\n    Account_Creation_Time DATETIME,\n    Account_ID INTEGER PRIMARY KEY,\n    Account_Update_Time DATETIME,\n    Refresh_Token VARCHAR(255),\n    Third-party_Service_Provider_Account_ID INTEGER,\n    Third-party_Service_Provider_ID INTEGER,\n    Third-party_Service_Provider_Type VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Session (\n    Access_Token VARCHAR(255),\n    Session_Creation_Time DATETIME,\n    Session_Expiration_Time DATETIME,\n    Session_ID INTEGER PRIMARY KEY,\n    Session_Token VARCHAR(255),\n    Session_Update_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Verification (\n    User_ID INTEGER NOT NULL,\n    Verification_Request_Creation_Time DATETIME,\n    Verification_Request_Expiration_Time DATETIME,\n    Verification_Request_ID INTEGER PRIMARY KEY,\n    Verification_Request_Identifier VARCHAR(255),\n    Verification_Request_Update_Time DATETIME,\n    Verification_Token VARCHAR(255),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["科学研究和技术服务业", "研究和试验发展"]}
{"id": "67552f0a13602ec03b41a950", "question": "This database table is used for a sports league management system. The specific functions are as follows:\n\n1. League management: league information can be added, modified and deleted, including league name, region, parent league and person in charge.\n\n2. Regional association: leagues can be associated with specific regions. When a region is deleted, all leagues under the region will be automatically deleted.\n\n3. League hierarchy: leagues can have hierarchical relationships. For example, top leagues (such as the Bundesliga) can have lower leagues (such as regional leagues).\n\n4. User management: leagues can specify a person in charge, who can be a user in the system.\n\n5. Data tracking: record the creation time and creator of league information, as well as the last modification time and modifier, to facilitate tracking of data change history.\n\n6. Concurrency control: detect concurrency issues through version numbers to ensure data consistency when multiple users modify the same league information at the same time.\n\nThis system can be used to manage and maintain information of various sports leagues, support the hierarchical relationship and regional division of leagues, and provide user management and data change history tracking functions.", "answer": "CREATE TABLE user (\n    date_of_birth DATETIME,\n    gender VARCHAR(255),\n    last_login_time DATETIME,\n    name VARCHAR(255),\n    registration_time DATETIME,\n    user_ID INTEGER PRIMARY KEY,\n    username VARCHAR(255)\n);\n\nCREATE TABLE region (\n    region_ID INTEGER PRIMARY KEY,\n    region_name VARCHAR(255)\n);\n\nCREATE TABLE league (\n    league_ID INTEGER PRIMARY KEY,\n    league_name VARCHAR(255),\n    responsible_person_ID INTEGER NOT NULL,\n    FOREIGN KEY (responsible_person_ID) REFERENCES user(user_ID)\n);\n\nCREATE TABLE league_region_association (\n    league_ID INTEGER NOT NULL,\n    region_ID INTEGER NOT NULL,\n    PRIMARY KEY (league_ID, region_ID),\n    FOREIGN KEY (league_ID) REFERENCES league(league_ID),\n    FOREIGN KEY (region_ID) REFERENCES region(region_ID)\n);\n\nCREATE TABLE league_hierarchy (\n    lower_league_ID INTEGER NOT NULL,\n    upper_league_ID INTEGER NOT NULL,\n    PRIMARY KEY (upper_league_ID, lower_league_ID),\n    FOREIGN KEY (lower_league_ID) REFERENCES league(league_ID),\n    FOREIGN KEY (upper_league_ID) REFERENCES league(league_ID)\n);\n\nCREATE TABLE league_creator (\n    creator_ID INTEGER NOT NULL,\n    league_ID INTEGER NOT NULL,\n    PRIMARY KEY (league_ID, creator_ID),\n    FOREIGN KEY (creator_ID) REFERENCES user(user_ID),\n    FOREIGN KEY (league_ID) REFERENCES league(league_ID)\n);\n\nCREATE TABLE league_modifier (\n    league_ID INTEGER NOT NULL,\n    modifier_ID INTEGER NOT NULL,\n    PRIMARY KEY (league_ID, modifier_ID),\n    FOREIGN KEY (league_ID) REFERENCES league(league_ID),\n    FOREIGN KEY (modifier_ID) REFERENCES user(user_ID)\n);", "remarks": "功能描述不完善，描述和schema都有大篇幅修改", "assign_to": "szh", "assign_to_round2": "hzb", "domain": ["文化、体育和娱乐业", "体育"]}
{"id": "67552f0a13602ec03b41a953", "question": "This is a government department resource management system, mainly used for managing and tracking resource allocation, reception and donation transactions between government departments. For user management, the system requires users to provide basic information such as username, password and email for registration and login. Each user is assigned a specific role, such as administrator or regular user, with different roles having different operation permissions. The system records all user operations with time and operator for accountability tracking. For organizational structure, the system has multiple supervisory departments, each with a unique name and responsibility description. Under each supervisory department are several work units, which also have unique names and responsibility descriptions, and clearly belong to a specific supervisory department's management. For resource management, the system records basic Attributes such as resource code and name. When a resource transaction occurs, the system records detailed information including the work unit involved, resource code, receiver's user ID, storage location, budget year, and resource acquisition value. To ensure transaction compliance, the system also manages a series of approval documents, recording document names and contents.\n", "answer": "CREATE TABLE Role (\n    Operation_permissions VARCHAR(255),\n    Role_ID INTEGER PRIMARY KEY,\n    Role_name VARCHAR(255)\n);\n\nCREATE TABLE Supervisory_department (\n    Department_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Responsibility_description VARCHAR(255)\n);\n\nCREATE TABLE Resource (\n    Name VARCHAR(255),\n    Resource_code VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Approval_document (\n    Document_ID INTEGER PRIMARY KEY,\n    Document_content VARCHAR(255),\n    Document_name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Role_ID INTEGER NOT NULL,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);\n\nCREATE TABLE Work_unit (\n    Name VARCHAR(255),\n    Responsibility_description VARCHAR(255),\n    Supervisory_department_ID INTEGER NOT NULL,\n    Work_unit_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Supervisory_department_ID) REFERENCES Supervisory_department(Department_ID)\n);\n\nCREATE TABLE Operation (\n    Operating_user_ID INTEGER NOT NULL,\n    Operation_ID INTEGER PRIMARY KEY,\n    Operation_content VARCHAR(255),\n    Operation_time DATETIME,\n    FOREIGN KEY (Operating_user_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Resource_transaction_record (\n    Budget_year INTEGER,\n    Receiver_user_ID INTEGER NOT NULL,\n    Record_ID INTEGER PRIMARY KEY,\n    Resource_acquisition_value FLOAT,\n    Resource_code VARCHAR(255) NOT NULL,\n    Storage_location VARCHAR(255),\n    Work_unit_ID INTEGER NOT NULL,\n    FOREIGN KEY (Receiver_user_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Resource_code) REFERENCES Resource(Resource_code),\n    FOREIGN KEY (Work_unit_ID) REFERENCES Work_unit(Work_unit_ID)\n);", "remarks": "第二轮认为没有问题", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["公共管理、社会保障和社会组织", "国家机构"]}
{"id": "67552f0a13602ec03b41a954", "question": "The wireless network monitoring and device management system primarily functions to manage device information, record network traffic data, track device failures and maintenance status, and monitor user connections to devices. The system is also capable of tracking maintenance operations performed by staff on the devices. The database includes the following functions:\n\nDevice Management: record basic information of all network devices. Fields include Device ID, Name, Type, IP Address, Installation Location, Installation Time, and Device Status. \n \nUser Management: store user account information. Fields include User ID, User Account, and User Password. \n \nNetwork traffic Management: record network traffic data of each device at specific time points. Fields include Device ID, Timestamp, Upload Traffic, Download Traffic, Total Traffic, and Traffic Status.  \n\nDevice failure record Management: record device failure information. Fields include Device ID, Failure Occurrence Time, Failure Type, Failure Description, Handling Status, and Remarks.  \n\nStaff Management: record information about staff members. Fields include Staff ID, Name, and Contact Information.  \n\nUser connection device Management: record the connection status between users and devices. Fields include User ID, Device ID, Connection Time, Disconnection Time, Bandwidth Used, and User IP.  \n\nDevice maintenance record Management: Used to document device maintenance information. Fields include Device ID, Staff ID, Maintenance Time, Maintenance Content, Maintenance Result, and Remarks.  \n\nThe design of thus system is primarily for device management, network traffic monitoring, failure diagnosis and handling, tracking user connection status, and maintaining device maintenance records.", "answer": "CREATE TABLE Device (\n    Device_Status VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    IP_Address VARCHAR(255),\n    Installation_Location VARCHAR(255),\n    Installation_Time DATETIME,\n    Name VARCHAR(255),\n    Type VARCHAR(255)\n);\n\nCREATE TABLE User (\n    ID INTEGER PRIMARY KEY,\n    User_Account INTEGER,\n    User_Password VARCHAR(255)\n);\n\nCREATE TABLE Staff (\n    Contact_Information VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Network_Traffic (\n    Device_ID INTEGER NOT NULL,\n    Download_Traffic FLOAT,\n    Timestamp INTEGER,\n    Total_Traffic FLOAT,\n    Traffic_Status VARCHAR(255),\n    Upload_Traffic FLOAT,\n    PRIMARY KEY (Device_ID, Timestamp),\n    FOREIGN KEY (Device_ID) REFERENCES Device(ID)\n);\n\nCREATE TABLE Device_Failure_Record (\n    Device_ID INTEGER NOT NULL,\n    Failure_Description VARCHAR(255),\n    Failure_Occurrence_Time DATETIME,\n    Failure_Type VARCHAR(255),\n    Handling_Status VARCHAR(255),\n    Remarks VARCHAR(255),\n    PRIMARY KEY (Device_ID, Failure_Occurrence_Time),\n    FOREIGN KEY (Device_ID) REFERENCES Device(ID)\n);\n\nCREATE TABLE User_Connection_Device (\n    Connection_Time DATETIME,\n    Device_ID INTEGER NOT NULL,\n    Disconnection_Time DATETIME,\n    Used_Bandwidth FLOAT,\n    User_ID INTEGER NOT NULL,\n    User_IP VARCHAR(255),\n    PRIMARY KEY (User_ID, Device_ID, Connection_Time),\n    FOREIGN KEY (Device_ID) REFERENCES Device(ID),\n    FOREIGN KEY (User_ID) REFERENCES User(ID)\n);\n\nCREATE TABLE Device_Maintenance_Record (\n    Device_ID INTEGER NOT NULL,\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Result VARCHAR(255),\n    Maintenance_Time DATETIME,\n    Remarks VARCHAR(255),\n    Staff_ID INTEGER NOT NULL,\n    PRIMARY KEY (Device_ID, Staff_ID, Maintenance_Time),\n    FOREIGN KEY (Device_ID) REFERENCES Device(ID),\n    FOREIGN KEY (Staff_ID) REFERENCES Staff(ID)\n);", "remarks": "CS 2025/1/15", "assign_to": "cs", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "电信、广播电视和卫星传输服务"]}
{"id": "67552f0a13602ec03b41a961", "question": "A blog management system manages blog posts and their related comments. Each post has a unique identifier, title, summary, author, body content, and creation time.\nUsers can create, edit, and delete posts, with user information including User ID, name, and email address.\nThe comment feature allows users to post comments below articles, with comment information including User ID, comment content, and creation time.   \nRecord user activities on posts, including the type of operation (create, edit, and delete posts) and timestamp.", "answer": "CREATE TABLE User (\n    Email_Address VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Article (\n    Article_ID INTEGER PRIMARY KEY,\n    Author_ID INTEGER NOT NULL,\n    Body_Content VARCHAR(255),\n    Creation_Time DATETIME,\n    Summary VARCHAR(255),\n    Title VARCHAR(255),\n    FOREIGN KEY (Author_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Comment (\n    Article_ID INTEGER NOT NULL,\n    Comment_Content VARCHAR(255),\n    Creation_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Article_ID, Creation_Time),\n    FOREIGN KEY (Article_ID) REFERENCES Article(Article_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Operation_Record (\n    Article_ID INTEGER NOT NULL,\n    Operation_Type VARCHAR(255),\n    Timestamp DATETIME,\n    PRIMARY KEY (Article_ID, Timestamp),\n    FOREIGN KEY (Article_ID) REFERENCES Article(Article_ID)\n);\n\nCREATE TABLE User_Manage_Article (\n    Article_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Article_ID),\n    FOREIGN KEY (Article_ID) REFERENCES Article(Article_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS ROUND2 EDIT 1/27", "assign_to": "dyq", "assign_to_round2": "cs", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a962", "question": "Requirement Description:\nA financial management system for managing invoices. The main functions include managing invoice information, such as creating, updating, and querying invoices. Invoice information includes Invoice ID, Invoice Date, Due Date, Total Amount, Status, Notes, Payment Date, Payment Amount, MIME Type of the Electronic Version, and Content of the Electronic Version. It also associates with customer information to track which customer each invoice belongs to. Additionally, it associates with terms information to manage different payment terms for invoices.\nManaging customer information, where each customer has a unique Customer ID, Customer Name, Customer Address, Contact Person, and Contact Information.\nManaging terms information, including Term ID, Term Description, Payment Days, and Interest Rate.", "answer": "CREATE TABLE Customer (\n    Contact_Information VARCHAR(255),\n    Contact_Person VARCHAR(255),\n    Customer_Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255)\n);\n\nCREATE TABLE Invoice (\n    Customer_ID INTEGER NOT NULL,\n    Due_Date DATETIME,\n    Electronic_Version_Content VARCHAR(255),\n    Electronic_Version_MIME_Type VARCHAR(255),\n    Invoice_Date DATETIME,\n    Invoice_ID INTEGER PRIMARY KEY,\n    Notes VARCHAR(255),\n    Payment_Amount FLOAT,\n    Payment_Date DATETIME,\n    Status VARCHAR(255),\n    Total_Amount FLOAT,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Terms (\n    Interest_Rate FLOAT,\n    Invoice_ID INTEGER NOT NULL,\n    Payment_Days INTEGER,\n    Term_Description VARCHAR(255),\n    Term_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Invoice_ID) REFERENCES Invoice(Invoice_ID)\n);\n\nCREATE TABLE Invoice_and_Customer (\n    Customer_ID INTEGER NOT NULL,\n    Due_Date DATETIME,\n    Electronic_Version_Content VARCHAR(255),\n    Electronic_Version_MIME_Type VARCHAR(255),\n    Invoice_Date DATETIME,\n    Invoice_ID INTEGER NOT NULL,\n    Notes VARCHAR(255),\n    Payment_Amount FLOAT,\n    Payment_Date DATETIME,\n    Status VARCHAR(255),\n    Total_Amount FLOAT,\n    PRIMARY KEY (Invoice_ID, Customer_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Invoice_ID) REFERENCES Invoice(Invoice_ID)\n);\n\nCREATE TABLE Invoice_and_Terms (\n    Interest_Rate FLOAT,\n    Invoice_ID INTEGER NOT NULL,\n    Payment_Days INTEGER,\n    Term_Description VARCHAR(255),\n    Term_ID INTEGER NOT NULL,\n    PRIMARY KEY (Term_ID, Invoice_ID),\n    FOREIGN KEY (Invoice_ID) REFERENCES Invoice(Invoice_ID),\n    FOREIGN KEY (Term_ID) REFERENCES Terms(Term_ID)\n);", "remarks": "CS 1/27 round2 edit", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a963", "question": "The reservation system of an airline company is as follows: The company has multiple customers, and customer information includes Customer ID, Name, Phone, and Email. The company also has multiple airline partners, and airline information includes Airline ID, Name, Phone, and Address. Each airline offers multiple flights, and flight information includes Flight Number, Departure Location, Destination, Departure Time, Arrival Time, and Airline ID. Customers can reserve flights, and reservation information includes Customer ID, Flight Number, Reservation Time, and Number of Tickets. A customer can reserve multiple flights and can also reserve the same flight multiple times. Upon completion of a reservation, the system generates a unique Reservation ID and records detailed reservation information.", "answer": "CREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Airline (\n    Address VARCHAR(255),\n    Airline_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Flight (\n    Airline_ID INTEGER NOT NULL,\n    Arrival_Time DATETIME,\n    Departure_Location VARCHAR(255),\n    Departure_Time DATETIME,\n    Destination VARCHAR(255),\n    Flight_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Airline_ID) REFERENCES Airline(Airline_ID)\n);\n\nCREATE TABLE Flight_Reservation (\n    Customer_ID INTEGER NOT NULL,\n    Flight_ID INTEGER NOT NULL,\n    Number_of_Tickets INTEGER,\n    Reservation_Time DATETIME,\n    PRIMARY KEY (Customer_ID, Flight_ID, Reservation_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Flight_ID) REFERENCES Flight(Flight_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "hzb", "domain": ["交通运输、仓储和邮政业", "航空运输业"]}
{"id": "67552f0a13602ec03b41a964", "question": "The news subscription service system operates as follows: The system allows users to subscribe to news via email. News information includes News ID and News Name. Subscription information includes Subscription Status, Creation Time, Modification Time, and the IP Address at the time of subscription. Users can update their subscription status or cancel their subscription at any time based on their needs.", "answer": "CREATE TABLE User (\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE News (\n    News_ID INTEGER PRIMARY KEY,\n    News_Name VARCHAR(255)\n);\n\nCREATE TABLE Subscription (\n    Creation_Time DATETIME,\n    Modification_Time DATETIME,\n    News_ID INTEGER NOT NULL,\n    Subscription_IP VARCHAR(255),\n    Subscription_Status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, News_ID, Creation_Time),\n    FOREIGN KEY (News_ID) REFERENCES News(News_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "cs 2025/1/27 round2 edit", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["居民服务、修理和其他服务业", "其他服务业"]}
{"id": "67552f0a13602ec03b41a965", "question": "This is a photo sharing application system. For user management, the system supports users to register and log in using username and password. Users can modify their personal information and avatar, including name, gender, age, occupation, interests, personal profile, etc. For post management, users can publish photo posts with title, description and images, and can view and manage their own posts. For comment management, the system supports users to post and view comments under posts, recording comment time and content, and users can manage their own comments.", "answer": "CREATE TABLE User (\n    Age INTEGER,\n    Gender VARCHAR(255),\n    Interests VARCHAR(255),\n    Name VARCHAR(255),\n    Occupation VARCHAR(255),\n    Password VARCHAR(255),\n    Personal_profile VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Post (\n    Description VARCHAR(255),\n    Image_URL VARCHAR(255),\n    Post_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_post_comment (\n    Comment_content VARCHAR(255),\n    Comment_time DATETIME,\n    Post_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Post_ID, Comment_time),\n    FOREIGN KEY (Post_ID) REFERENCES Post(Post_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a966", "question": "The teaching management system of a university is as follows: The university has multiple departments, with department information including Department ID and Department Name. Each department has several students, with student information including Student ID, Name, Address, Enrollment Year, Date of Birth, and Department ID. The university also has several professors, with professor information including Professor ID, Name, Office Number, Office Start Time, and Office Duration. The university offers multiple courses, with course information including Course ID, Course Name, Semester, Year, Teaching Professor, Class Day, and Course Duration. Students can register for courses, with registration information including Registration Time, Course ID, and Student ID. The system records student registration information and grade information for management and query purposes.", "answer": "CREATE TABLE Student (\n    Address VARCHAR(255),\n    Date_of_Birth DATETIME,\n    Department_ID INTEGER,\n    Enrollment_Year INTEGER,\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Professor (\n    Name VARCHAR(255),\n    Office_Duration FLOAT,\n    Office_Number INTEGER,\n    Office_Start_Time DATETIME,\n    Professor_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Course (\n    Class_Day VARCHAR(255),\n    Course_Duration FLOAT,\n    Course_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Semester INTEGER,\n    Teaching_Professor_ID INTEGER NOT NULL,\n    Year INTEGER,\n    FOREIGN KEY (Teaching_Professor_ID) REFERENCES Professor(Professor_ID)\n);\n\nCREATE TABLE Course_Registration (\n    Course_ID INTEGER NOT NULL,\n    Grade INTEGER,\n    Registration_Time DATETIME,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID, Registration_Time),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "第二轮增加了学生模式的系部编号属性，同时按照需求增加了系部这一模式", "assign_to": "lzm", "assign_to_round2": "cyx", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a96d", "question": "The task management module of a genome analysis system is structured as follows: The system includes a task table, task parameter table, task-related organism table, and task-excluded organism table. The task table records detailed information for each task, including Task ID, Task Title, Creation Date, Task Status, End Date, Status Reason, Query Statement, Database, Executable File, Algorithm, Options, and Task Owner. The task parameter table records parameter information for each task, including Parameter ID, Task ID, Parameter Name, and Parameter Value. The task-related organism table records organism information associated with each task, including Organism ID, Task ID, and Organism Name. The task-excluded organism table records organism information excluded for each task, including Organism ID, Task ID, and Organism Name. The system utilizes these tables to manage the creation, execution, and result recording of genome analysis tasks.", "answer": "CREATE TABLE Task (\n    Algorithm VARCHAR(255),\n    Creation_Date DATETIME,\n    Database VARCHAR(255),\n    End_Date DATETIME,\n    Executable_File VARCHAR(255),\n    Options VARCHAR(255),\n    Query_Statement VARCHAR(255),\n    Status_Reason VARCHAR(255),\n    Task_ID INTEGER PRIMARY KEY,\n    Task_Owner VARCHAR(255),\n    Task_Status VARCHAR(255),\n    Task_Title VARCHAR(255)\n);\n\nCREATE TABLE Parameter (\n    Parameter_ID INTEGER PRIMARY KEY,\n    Parameter_Name VARCHAR(255)\n);\n\nCREATE TABLE Organism (\n    Organism_ID INTEGER PRIMARY KEY,\n    Organism_Name VARCHAR(255)\n);\n\nCREATE TABLE Task_Parameter (\n    Parameter_ID INTEGER NOT NULL,\n    Parameter_Value VARCHAR(255),\n    Task_ID INTEGER NOT NULL,\n    PRIMARY KEY (Task_ID, Parameter_ID, Parameter_Value),\n    FOREIGN KEY (Parameter_ID) REFERENCES Parameter(Parameter_ID),\n    FOREIGN KEY (Task_ID) REFERENCES Task(Task_ID)\n);\n\nCREATE TABLE Task_Related_Organism (\n    Creation_Time DATETIME,\n    Organism_ID INTEGER NOT NULL,\n    Task_ID INTEGER NOT NULL,\n    PRIMARY KEY (Task_ID, Organism_ID, Creation_Time),\n    FOREIGN KEY (Organism_ID) REFERENCES Organism(Organism_ID),\n    FOREIGN KEY (Task_ID) REFERENCES Task(Task_ID)\n);\n\nCREATE TABLE Task_Excluded_Organism (\n    Creation_Time DATETIME,\n    Organism_ID INTEGER NOT NULL,\n    Task_ID INTEGER NOT NULL,\n    PRIMARY KEY (Task_ID, Organism_ID, Creation_Time),\n    FOREIGN KEY (Organism_ID) REFERENCES Organism(Organism_ID),\n    FOREIGN KEY (Task_ID) REFERENCES Task(Task_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "dyq", "domain": ["科学研究和技术服务业", "研究和试验发展"]}
{"id": "67552f0a13602ec03b41a973", "question": "The Bank Account and Transaction Management System is used to track and manage user accounts, transactions, and transaction statuses. The system can manage different currency types and record detailed information for each account, including account balance, frozen amount, and the currency used by the account. The system is able to record transactions between accounts, including the initiating account, receiving account, transaction amount, and transaction status. Each transaction has a status (such as success, failure, processing) and detailed error information is recorded when a transaction fails for subsequent analysis.\n\nThe system also includes transaction status management, supporting tracking and updating of transaction statuses to ensure transparency and traceability of the transaction process. The bank account information management function allows querying and updating of account balances and frozen amounts, ensuring the accuracy of account data. Through these functions, the system is able to support complex bank transaction processing flows, including transfer, deposit, withdrawal, and other operations, while supporting transaction status updates and failure reason recording.\n", "answer": "CREATE TABLE Currency_Type (\n    Currency_Code VARCHAR(255) PRIMARY KEY,\n    Currency_Name VARCHAR(255),\n    Symbol VARCHAR(255)\n);\n\nCREATE TABLE Bank_Account (\n    Account_Balance FLOAT,\n    Account_Number VARCHAR(255) PRIMARY KEY,\n    Currency_Code VARCHAR(255) NOT NULL,\n    Frozen_Amount FLOAT,\n    User_Information VARCHAR(255),\n    User_Number VARCHAR(255),\n    FOREIGN KEY (Currency_Code) REFERENCES Currency_Type(Currency_Code)\n);\n\nCREATE TABLE Account_Transfer (\n    Error_Information VARCHAR(255),\n    Initiating_Account_Number VARCHAR(255) NOT NULL,\n    Initiation_Time DATETIME,\n    Receiving_Account_Number VARCHAR(255) NOT NULL,\n    Transaction_Amount FLOAT,\n    Transaction_Currency VARCHAR(255) NOT NULL,\n    Transaction_Status VARCHAR(255),\n    PRIMARY KEY (Initiating_Account_Number, Receiving_Account_Number, Initiation_Time),\n    FOREIGN KEY (Initiating_Account_Number) REFERENCES Bank_Account(Account_Number),\n    FOREIGN KEY (Receiving_Account_Number) REFERENCES Bank_Account(Account_Number),\n    FOREIGN KEY (Transaction_Currency) REFERENCES Currency_Type(Currency_Code)\n);", "remarks": "", "assign_to": "szc", "assign_to_round2": "cs", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a976", "question": "The blockchain transaction record and management system is designed to manage and record transaction information on the Tezos blockchain. The system encompasses multiple users, each identified by a User ID, a Username, a Public Key, an Address, and a Creation Time. The system records block information from the blockchain, with each block identified by a Block ID, a Block Hash, a Creation Time, a Block Size, and a Previous Block ID. Transaction information between users is also recorded, with each transaction containing Sender ID, Receiver ID, Transaction Amount, Transaction Time, Block ID, Operation Type, and Operation Content. Every transaction requires the recording of the sender, receiver, amount, time, and associated block information. User ID is utilized to identify the sender and receiver of transactions, while Block ID associates transactions with their respective blocks. The system achieves comprehensive management of user identity, block information, and transaction records through User Table, Block Table, and Transaction Record Table, ensuring the integrity and traceability of blockchain data.", "answer": "CREATE TABLE User (\n    Address VARCHAR(255),\n    Creation_Time DATETIME,\n    ID INTEGER PRIMARY KEY,\n    Public_Key VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Block (\n    Block_Hash VARCHAR(255),\n    Block_ID INTEGER PRIMARY KEY,\n    Block_Size INTEGER,\n    Creation_Time DATETIME,\n    Previous_Block_ID INTEGER\n);\n\nCREATE TABLE Transaction_Record (\n    Block_ID INTEGER NOT NULL,\n    Operation_Content VARCHAR(255),\n    Operation_Type VARCHAR(255),\n    Receiver_ID INTEGER NOT NULL,\n    Sender_ID INTEGER NOT NULL,\n    Transaction_Amount INTEGER,\n    Transaction_Time DATETIME,\n    PRIMARY KEY (Sender_ID, Receiver_ID, Transaction_Time, Block_ID),\n    FOREIGN KEY (Block_ID) REFERENCES Block(Block_ID),\n    FOREIGN KEY (Receiver_ID) REFERENCES User(ID),\n    FOREIGN KEY (Sender_ID) REFERENCES User(ID)\n);", "remarks": "CS 2025/1/16    第二轮完善了业务需求描述", "assign_to": "cs", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a979", "question": "Business requirements description for an airline reservation system:\nThe system manages multiple customers, with customer information including name, contact information, and credit card number. The system cooperates with multiple airlines, each having an ID, name, and contact information. Each airline operates multiple flights, with flight information including flight number, destination, departure time, arrival time, and the associated airline. Customers can make flight reservations, with reservation information including reservation number, reservation date, reservation time, and number of tickets. Each reservation corresponds to a payment record, which includes payment record ID, payment amount, payment date, and payment method.", "answer": "CREATE TABLE Customer (\n    Contact_Information VARCHAR(255),\n    Credit_Card_Number INTEGER,\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Airline (\n    Airline_ID INTEGER PRIMARY KEY,\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Flight (\n    Airline_ID INTEGER NOT NULL,\n    Arrival_Time DATETIME,\n    Departure_Time DATETIME,\n    Destination VARCHAR(255),\n    Flight_ID INTEGER PRIMARY KEY,\n    Flight_Number INTEGER,\n    FOREIGN KEY (Airline_ID) REFERENCES Airline(Airline_ID)\n);\n\nCREATE TABLE Reservation (\n    Customer_ID INTEGER NOT NULL,\n    Flight_ID INTEGER NOT NULL,\n    Number_of_Tickets INTEGER,\n    Reservation_Date DATETIME,\n    Reservation_ID INTEGER PRIMARY KEY,\n    Reservation_Time DATETIME,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Flight_ID) REFERENCES Flight(Flight_ID)\n);\n\nCREATE TABLE Payment_Record (\n    Payment_Amount FLOAT,\n    Payment_Date DATETIME,\n    Payment_ID INTEGER PRIMARY KEY,\n    Payment_Method VARCHAR(255),\n    Reservation_ID INTEGER NOT NULL,\n    FOREIGN KEY (Reservation_ID) REFERENCES Reservation(Reservation_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["交通运输、仓储和邮政业", "航空运输业"]}
{"id": "67552f0a13602ec03b41a97c", "question": "The requirements analysis of a certain enterprise management system is as follows:\n1. Employee management: including employee information, job assignment, performance appraisal, salary number, creation time, update time, etc. An employee can participate in multiple projects.\n2. Supplier management: including supplier information, supplier relationship management, creation time, update time, etc. A supplier can supply multiple projects.\n3. Project management: including project information, project progress management, creation time, update time, etc. A project contains multiple employees and can have multiple suppliers.\n4. Attendance management: including employee number, employee clock-in, attendance record, creation time, update time, etc.\n5. Salary management: including salary payment, salary calculation, creation time, update time, etc.", "answer": "CREATE TABLE Supplier_Table (\n    Creation_Time DATETIME,\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_Information VARCHAR(255),\n    Supplier_Relationship_Management VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Project_Table (\n    Creation_Time DATETIME,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Information VARCHAR(255),\n    Project_Progress_Management VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE Salary_Table (\n    Creation_Time DATETIME,\n    Salary_Calculation VARCHAR(255),\n    Salary_Distribution FLOAT,\n    Salary_ID INTEGER PRIMARY KEY,\n    Update_Time DATETIME\n);\n\nCREATE TABLE Supplier_Supply_Project (\n    Project_ID INTEGER NOT NULL,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supplier_ID, Project_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project_Table(Project_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier_Table(Supplier_ID)\n);\n\nCREATE TABLE Employee_Table (\n    Creation_Time DATETIME,\n    Employee_ID INTEGER PRIMARY KEY,\n    Employee_Information VARCHAR(255),\n    Performance_Evaluation VARCHAR(255),\n    Position_Allocation VARCHAR(255),\n    Salary_ID INTEGER NOT NULL,\n    Update_Time DATETIME,\n    FOREIGN KEY (Salary_ID) REFERENCES Salary_Table(Salary_ID)\n);\n\nCREATE TABLE Attendance_Record_Table (\n    Attendance_ID INTEGER PRIMARY KEY,\n    Attendance_Record VARCHAR(255),\n    Creation_Time DATETIME,\n    Employee_ID INTEGER NOT NULL,\n    Employee_Punch_In DATETIME,\n    Update_Time DATETIME,\n    FOREIGN KEY (Employee_ID) REFERENCES Employee_Table(Employee_ID)\n);\n\nCREATE TABLE Employee_Project_Allocation (\n    Employee_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    PRIMARY KEY (Employee_ID, Project_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee_Table(Employee_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project_Table(Project_ID)\n);", "remarks": "第二轮有较大调整，增加了实体间的联系，避免独立实体的存在；增加了模式6", "assign_to": "szh", "assign_to_round2": "cyx", "domain": ["科学研究和技术服务业", "专业技术服务业"]}
{"id": "67552f0a13602ec03b41a982", "question": "The primary function of a school's academic management system is to manage Student, Teacher, Course information, as well as Student course selection status and grade records. The system includes the following functions:\n\nStudent Management: Record basic information about students, including Student Name, Gender, Age, and Phone.\n\nTeacher Management: Record basic information about teachers, including Teacher Name, Gender, Title, and Phone.\n\nCourse Management: ecord basic information about courses, including Course Credits, Class Hours, Teaching Teacher, Class Location, and Number of Students Enrolled.\n\nStudent Course Selection Management : \nRecord the course selection status of students, including Selection Time and Grades. Each student can select multiple courses, and each course can have multiple students enrolled.", "answer": "CREATE TABLE Student (\n    Age INTEGER,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Teacher (\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Teacher_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Course (\n    Class_Hours FLOAT,\n    Class_Location VARCHAR(255),\n    Course_ID INTEGER PRIMARY KEY,\n    Credits FLOAT,\n    Number_of_Students_Enrolled INTEGER,\n    Teaching_Teacher_ID INTEGER NOT NULL,\n    FOREIGN KEY (Teaching_Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Student_Course_Selection (\n    Course_ID INTEGER NOT NULL,\n    Grades INTEGER,\n    Selection_Time DATETIME,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID, Selection_Time),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "CS 2025/1/16", "assign_to": "cs", "assign_to_round2": "szc", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a98a", "question": "The main functions of a courier tracking system include:\n1. Consumer management: including consumer ID, address information, phone number, etc.\n2. Courier company management: including company name, arrival time, charging price, etc.\n3. Courier tracking: including courier number, recipient ID, recipient name, recipient phone number, etc.\n4. Administrator management: including administrator ID, name, login password, courier user name, etc.\n5. Query function: consumers can query courier information through the system.\n6. Partnership management: the partnership between courier companies and administrators.", "answer": "CREATE TABLE Consumer (\n    Address_Information VARCHAR(255),\n    Consumer_ID INTEGER PRIMARY KEY,\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Courier_Company (\n    Arrival_Time DATETIME,\n    Charging_Price FLOAT,\n    Company_Name VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Courier_Tracking (\n    Courier_Tracking_Number VARCHAR(255) PRIMARY KEY,\n    Recipient_ID INTEGER,\n    Recipient_Name VARCHAR(255),\n    Recipient_Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Administrator (\n    Administrator_ID INTEGER PRIMARY KEY,\n    Courier_Username VARCHAR(255),\n    Login_Password VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Cooperation (\n    Administrator_ID INTEGER NOT NULL,\n    Company_Name VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Company_Name, Administrator_ID),\n    FOREIGN KEY (Administrator_ID) REFERENCES Administrator(Administrator_ID),\n    FOREIGN KEY (Company_Name) REFERENCES Courier_Company(Company_Name)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "cs", "domain": ["交通运输、仓储和邮政业", "邮政业"]}
{"id": "67552f0a13602ec03b41a98d", "question": "The system is a student information and communication management system. In terms of student management, the system supports the entry, query, modification, and deletion of student information, including the student's name, gender, Student ID, major, password, and enrollment time. In terms of post management, the system supports the publishing, querying, modification, and deletion of posts. Each post contains information such as the topic, content, author, and publication date. In terms of interactive functionality, the system also supports students commenting on posts. Each comment includes the comment content, comment time, commenter, and the post being commented on, facilitating communication and discussion among students.\n", "answer": "CREATE TABLE Student (\n    Admission_Date DATETIME,\n    Gender BOOL,\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Post (\n    Author INTEGER NOT NULL,\n    Content VARCHAR(255),\n    Post_ID INTEGER PRIMARY KEY,\n    Publication_Date DATETIME,\n    Topic VARCHAR(255),\n    FOREIGN KEY (Author) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Comment (\n    Comment_Content VARCHAR(255),\n    Comment_Time DATETIME,\n    Commented_Post INTEGER NOT NULL,\n    Commenter INTEGER NOT NULL,\n    PRIMARY KEY (Commenter, Commented_Post),\n    FOREIGN KEY (Commented_Post) REFERENCES Post(Post_ID),\n    FOREIGN KEY (Commenter) REFERENCES Student(Student_ID)\n);", "remarks": "补充了需求描述和标注（评论功能），扩充2个schema为3个", "assign_to": "szc", "assign_to_round2": "hzb", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a99a", "question": "The above picture depicts a hospital management system. The main functions of the system may include:\n\n1. Patient information management: including name, gender, age, contact information, etc.\n2. Diagnosis and treatment management: record the patient's diagnosis and treatment information.\n3. Ward management: manage ward information.\n4. Registration category management: manage different types of registration information.\n5. Drug management: manage drug information.\n6. Drug list management: record the patient's medication information.", "answer": "CREATE TABLE patient (\n    age INTEGER,\n    contact_information VARCHAR(255),\n    gender BOOL,\n    name VARCHAR(255),\n    patient_ID INTEGER PRIMARY KEY,\n    patient's_treatment_information VARCHAR(255),\n    registration_category_ID INTEGER,\n    ward_ID INTEGER\n);\n\nCREATE TABLE ward (\n    ward_ID INTEGER PRIMARY KEY,\n    ward_information VARCHAR(255)\n);\n\nCREATE TABLE registration_category (\n    registration_category_ID INTEGER PRIMARY KEY,\n    registration_information VARCHAR(255)\n);\n\nCREATE TABLE drug (\n    drug_ID INTEGER PRIMARY KEY,\n    drug_information VARCHAR(255)\n);\n\nCREATE TABLE prescription (\n    drug_ID INTEGER NOT NULL,\n    patient_ID INTEGER NOT NULL,\n    PRIMARY KEY (drug_ID, patient_ID),\n    FOREIGN KEY (drug_ID) REFERENCES drug(drug_ID),\n    FOREIGN KEY (patient_ID) REFERENCES patient(patient_ID)\n);", "remarks": "SZC 1/25:精简了多个schema，增加了某些schema的属性。", "assign_to": "szh", "assign_to_round2": "szc", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0a13602ec03b41a99f", "question": "The database design for an online food ordering system is as follows: The system includes a user table, an administrator table, a menu table, and an order table. The user table records basic user information, including user ID, username, password, phone number, address, registration time, and last login time. The administrator table records administrator information, including administrator ID, administrator name, password, login IP, and last login time. The menu table records dish information provided by the restaurant, including menu ID, dish name, price, image, and description. The order table records user order information, including user ID, menu ID, order status, creation time, order amount, remarks, and order modification time. The system manages user, administrator, menu, and order information through these tables to enable the food ordering functionality.", "answer": "CREATE TABLE User (\n    Address VARCHAR(255),\n    Last_Login_Time DATETIME,\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Administrator (\n    Administrator_ID INTEGER PRIMARY KEY,\n    Administrator_Name VARCHAR(255),\n    Last_Login_Time DATETIME,\n    Login_IP VARCHAR(255),\n    Password VARCHAR(255)\n);\n\nCREATE TABLE Menu (\n    Description VARCHAR(255),\n    Dish_Name VARCHAR(255),\n    Image BLOB,\n    Menu_ID INTEGER PRIMARY KEY,\n    Price FLOAT\n);\n\nCREATE TABLE Order (\n    Creation_Time DATETIME,\n    Menu_ID INTEGER NOT NULL,\n    Order_Amount FLOAT,\n    Order_Modification_Time DATETIME,\n    Order_Status VARCHAR(255),\n    Remarks VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Menu_ID, Creation_Time),\n    FOREIGN KEY (Menu_ID) REFERENCES Menu(Menu_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "第二轮认为没有问题", "assign_to": "lzm", "assign_to_round2": "cyx", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a9a2", "question": "This is a student meal card management system for universities, mainly used for managing students' consumption behavior on campus, including scenarios such as dining in cafeterias and shopping in supermarkets, while also handling daily meal card management tasks. For student information management, the system maintains students' basic information, including student ID, name, department, etc., and records students' contact information for easy communication. For meal card recharge and consumption, students can recharge their meal cards at designated locations, and the system updates and displays card balances in real-time, while supporting card payments at locations such as cafeterias and supermarkets. For consumption record management, the system records detailed information for each transaction, including time, amount, location, etc., supports querying historical consumption records, and performs consumption data statistics and analysis.", "answer": "CREATE TABLE Student (\n    Contact_information VARCHAR(255),\n    Department VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Meal_card (\n    Balance FLOAT,\n    Card_ID INTEGER PRIMARY KEY,\n    Student_ID INTEGER NOT NULL,\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Consumption_record (\n    Amount INTEGER,\n    Card_ID INTEGER NOT NULL,\n    Location VARCHAR(255),\n    Record_ID INTEGER PRIMARY KEY,\n    Time DATETIME,\n    FOREIGN KEY (Card_ID) REFERENCES Meal_card(Card_ID)\n);", "remarks": "第二轮认为没有问题", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9aa", "question": "The main functions of a certain tourism information management system include:\n1. User management: including the management of user names, passwords, avatars, nicknames and other information. Users can write guides.\n2. Guide management: including the management of guide titles, categories, tags, content and other information.\n3. Hotel management: including the management of hotel names, introductions, pictures, locations and other information.\n4. Hotel management: including the management of hotel names, introductions, pictures, locations and other information.\n5. Attraction management: including the management of attraction names, introductions, pictures, addresses, opening hours, tips, days and other information.\n6. Route management: including the management of route names, content, tags, introductions and other information.", "answer": "CREATE TABLE User_Table (\n    Nickname VARCHAR(255),\n    Password VARCHAR(255),\n    Profile_Picture BLOB,\n    Username VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Guide_Table (\n    Category VARCHAR(255),\n    Content VARCHAR(255),\n    Guide_Title VARCHAR(255) PRIMARY KEY,\n    Tags VARCHAR(255)\n);\n\nCREATE TABLE Restaurant_Table (\n    Image BLOB,\n    Introduction VARCHAR(255),\n    Location VARCHAR(255),\n    Restaurant_Name VARCHAR(255) PRIMARY KEY\n);\n\nCREATE TABLE Hotel_Table (\n    Hotel_Name VARCHAR(255) PRIMARY KEY,\n    Image BLOB,\n    Introduction VARCHAR(255),\n    Location VARCHAR(255)\n);\n\nCREATE TABLE Scenic_Spot_Table (\n    Address VARCHAR(255),\n    Days INTEGER,\n    Image BLOB,\n    Introduction VARCHAR(255),\n    Opening_Hours VARCHAR(255),\n    Scenic_Spot_Name VARCHAR(255) PRIMARY KEY,\n    Tips VARCHAR(255)\n);\n\nCREATE TABLE Route (\n    Content VARCHAR(255),\n    Introduction VARCHAR(255),\n    Route_Name VARCHAR(255) PRIMARY KEY,\n    Tags VARCHAR(255)\n);\n\nCREATE TABLE Write_Guide_Table (\n    Guide_Title VARCHAR(255) NOT NULL,\n    Username VARCHAR(255) NOT NULL,\n    PRIMARY KEY (Username, Guide_Title),\n    FOREIGN KEY (Guide_Title) REFERENCES Guide_Table(Guide_Title),\n    FOREIGN KEY (Username) REFERENCES User_Table(Username)\n);", "remarks": "第二轮认为独立的实体太多且不好关联起来，不知道如何修改", "assign_to": "szh", "assign_to_round2": "cyx", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0a13602ec03b41a9af", "question": "Requirement Description:\n1.Menu Management: Manages restaurant menu information, including Dish ID, Dish Name, Dish Category, and Dish Price.\n2.Table Management: Manages restaurant table information, including Table ID and Seat Number.\n3.Customer Management: Manages customer information, including Customer ID, Customer Name, Gender, and Phone Number.\n4.Employee Management: Manages restaurant employee information, including Employee ID, Employee Name, Age, Gender, and Salary.\n5.Order Management: Manages customer order information, including Order ID, Table ID, and Dining Time.\n6.Service Management: Manages employee service information, including Service Employee ID and Order ID.", "answer": "CREATE TABLE Menu (\n    Dish_Category VARCHAR(255),\n    Dish_ID INTEGER PRIMARY KEY,\n    Dish_Name VARCHAR(255),\n    Dish_Price FLOAT\n);\n\nCREATE TABLE Table (\n    Seat_Number INTEGER,\n    Table_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255),\n    Gender VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Age INTEGER,\n    Employee_ID INTEGER PRIMARY KEY,\n    Employee_Name VARCHAR(255),\n    Gender VARCHAR(255),\n    Salary FLOAT\n);\n\nCREATE TABLE Order (\n    Dining_Time DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Service_Employee_ID INTEGER NOT NULL,\n    FOREIGN KEY (Service_Employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Dish_Table_Order (\n    Dish_ID INTEGER NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Table_ID INTEGER NOT NULL,\n    PRIMARY KEY (Dish_ID, Order_ID, Table_ID),\n    FOREIGN KEY (Dish_ID) REFERENCES Menu(Dish_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Table_ID) REFERENCES Table(Table_ID)\n);\n\nCREATE TABLE Customer_Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Order_Review BOOL,\n    PRIMARY KEY (Customer_ID, Order_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "第二轮认为没有问题", "assign_to": "gcc", "assign_to_round2": "cyx", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41a9b6", "question": "Business Requirement Description:\nThis is an online instant messaging service platform system. In terms of role management, the system supports the management of different user roles such as students, teachers, and colleges, each with its corresponding role name and permission settings. In user management, the system records each user’s basic information, including a unique User ID, Username, Password, College, Email, and Registration Time, while also assigning the appropriate role to each user. In book management, the system maintains book information, including Book ID, Book Name, Author, Publisher, Publication Date, and Book Category, and supports users borrowing multiple books. In notification management, the system supports users in publishing and managing notification information. Each notification includes Notification ID, Notification Title, Notification Content, Publisher ID, and Release Date. All users can serve as the publisher of notifications.", "answer": "CREATE TABLE Role (\n    Permission_Description VARCHAR(255),\n    Role_ID INTEGER PRIMARY KEY,\n    Role_Name VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_Category VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Book_Name VARCHAR(255),\n    Publication_Date DATETIME,\n    Publisher VARCHAR(255)\n);\n\nCREATE TABLE User (\n    College VARCHAR(255),\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    Role_ID INTEGER NOT NULL,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID)\n);\n\nCREATE TABLE Notification (\n    Notification_Content VARCHAR(255),\n    Notification_ID INTEGER PRIMARY KEY,\n    Notification_Title VARCHAR(255),\n    Publisher_ID INTEGER NOT NULL,\n    Release_Date DATETIME,\n    FOREIGN KEY (Publisher_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Establishes_Friend_Relationship (\n    Creation_Time DATETIME,\n    Friend_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Friend_ID),\n    FOREIGN KEY (Friend_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Borrows_Book (\n    Book_ID INTEGER NOT NULL,\n    Borrow_Time DATETIME,\n    Return_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Book_ID),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "调整了功能描述，去掉了学术交流", "assign_to": "gcc", "assign_to_round2": "hzb", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9bc", "question": "System Description\nDescribes a hospital management system.\n\nMain functions of the system\n1. Doctor management: including basic information of doctors (name, gender, title, date of birth, years of employment, work permit).\n2. Department management: including basic information of departments (department name, personnel, department number, department phone number, department address).\n3. Patient management: including basic information of patients (name, gender, age, contact information, diagnosis description, date of consultation).\n4. Diagnosis and treatment management: including diagnosis and treatment information (case number, diagnosis and treatment content).\n5. Ward management: including basic information of wards (ward number, number of beds, ward level).\n6. Registration category management: including basic information of registration categories (category number, category name).\n7. Drug management: including basic information of drugs (name, quantity, price, barcode).\n8. Drug list management: including basic information of drug lists (drug list number, drug information).", "answer": "CREATE TABLE Department (\n    Department_Address VARCHAR(255),\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Department_Phone INTEGER,\n    Staff VARCHAR(255)\n);\n\nCREATE TABLE Patient (\n    Age INTEGER,\n    Contact_Information INTEGER,\n    Diagnosis_Description VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Patient_ID INTEGER PRIMARY KEY,\n    Visit_Date DATETIME\n);\n\nCREATE TABLE Ward (\n    Number_of_Beds INTEGER,\n    Ward_Level VARCHAR(255),\n    Ward_Number INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Registration_Category (\n    Category_ID INTEGER PRIMARY KEY,\n    Category_Name VARCHAR(255)\n);\n\nCREATE TABLE Medicine (\n    Barcode VARCHAR(255),\n    Medicine_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Price FLOAT,\n    Quantity INTEGER\n);\n\nCREATE TABLE Prescription (\n    Medicine_Information VARCHAR(255),\n    Prescription_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Doctor (\n    Date_of_Birth DATETIME,\n    Doctor_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Title VARCHAR(255),\n    Work_Certificate VARCHAR(255),\n    Years_of_Employment INTEGER\n);\n\nCREATE TABLE Treatment (\n    Case_Number INTEGER PRIMARY KEY,\n    Patient_ID INTEGER NOT NULL,\n    Treatment_Content VARCHAR(255),\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);\n\nCREATE TABLE Prescription_Medicine (\n    Medicine_ID INTEGER NOT NULL,\n    Prescription_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Prescription_ID, Medicine_ID),\n    FOREIGN KEY (Medicine_ID) REFERENCES Medicine(Medicine_ID),\n    FOREIGN KEY (Prescription_ID) REFERENCES Prescription(Prescription_ID)\n);", "remarks": "dyq ,完善主键外键", "assign_to": "szh", "assign_to_round2": "dyq", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0a13602ec03b41a9bd", "question": "Business Requirement Description:\nThe following describes a Library Management System. The system’s main features might include:\n1.Student Management: Includes adding, modifying, deleting, and querying student information. Each student has a Student ID, Name, Student Number, Grade, Major, Contact Number, and Email.\n2.Administrator Management: Includes adding, modifying, deleting, and querying administrator information. The administrator details include Administrator ID, Name, Job Number, Contact Number, Email, and Position.\n3.Book Management: Includes adding, modifying, deleting, and querying book information. Book details include Book ID, Title, Author, Publisher, Publication Date, Category, Stock Quantity, and Borrowed Quantity.\n4.Book Borrowing Management: Includes adding, modifying, deleting, and querying student borrowing records. The records include Student ID, Borrowed Book ID, Borrow Date, Return Date, and Review Status.\n5.Book Returning Management: Includes adding, modifying, deleting, and querying student returning records. The records include Student ID, Borrowed Book ID, Return Date, and Review Status.\n6.Audit Management: Administrators review book borrowing and returning actions. The audit includes Administrator ID, Book ID, Borrowing Status, Audit Date, and Audit Result.", "answer": "CREATE TABLE Student (\n    Contact_Number VARCHAR(255),\n    Email VARCHAR(255),\n    Grade INTEGER,\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY,\n    Student_Number VARCHAR(255)\n);\n\nCREATE TABLE Administrator (\n    Administrator_ID INTEGER PRIMARY KEY,\n    Contact_Number VARCHAR(255),\n    Email VARCHAR(255),\n    Job_Number INTEGER,\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Borrowed_Quantity INTEGER,\n    Category VARCHAR(255),\n    Publication_Date DATETIME,\n    Publisher VARCHAR(255),\n    Stock_Quantity INTEGER,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Student_Borrow_Book (\n    Borrow_Date DATETIME,\n    Borrowed_Book_ID INTEGER NOT NULL,\n    Return_Date DATETIME,\n    Review_Status VARCHAR(255),\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Borrowed_Book_ID),\n    FOREIGN KEY (Borrowed_Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Student_Return_Book (\n    Book_ID INTEGER,\n    Return_Date DATETIME,\n    Returned_Book_ID INTEGER NOT NULL,\n    Review_Status VARCHAR(255),\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Returned_Book_ID),\n    FOREIGN KEY (Returned_Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Administrator_Audit (\n    Administrator_ID INTEGER NOT NULL,\n    Audit_Date DATETIME,\n    Audit_Result VARCHAR(255),\n    Book_ID INTEGER NOT NULL,\n    Borrowing_Status VARCHAR(255),\n    PRIMARY KEY (Administrator_ID, Book_ID),\n    FOREIGN KEY (Administrator_ID) REFERENCES Administrator(Administrator_ID),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "dyq", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0a13602ec03b41a9c0", "question": "Business Requirement Description:\nThe following describes a Product Sales Management System. The system’s main features might include:\n1.Employee Management: Includes managing employee usernames, passwords, positions, and contact information.\n2.Product Management: Includes managing product names, IDs, purchase prices, sales prices, and stock quantities.\n3.Supplier Management: Includes managing supplier names, IDs, and phone numbers. Suppliers can provide multiple products.\n4.Sales Management: Includes managing the sales records of product names, IDs, quantities, prices, and sales dates. Each employee can sell multiple products.\n5.Inventory Management: Includes managing product stock quantities and sales prices. Each product has a unique inventory record.", "answer": "CREATE TABLE Employee (\n    Contact_Number INTEGER,\n    Employee_ID INTEGER PRIMARY KEY,\n    Password VARCHAR(255),\n    Position VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Supplier (\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_Name VARCHAR(255),\n    Supplier_Number INTEGER,\n    Supplier_Phone INTEGER\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Product_Number INTEGER,\n    Purchase_Price FLOAT,\n    Sales_Price FLOAT,\n    Stock_Quantity INTEGER,\n    Supplier_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Employee_Sales (\n    Employee_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Sales_Date DATETIME,\n    Sales_Price FLOAT,\n    Sales_Quantity INTEGER,\n    PRIMARY KEY (Employee_ID, Product_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Inventory (\n    Inventory_ID INTEGER PRIMARY KEY,\n    Product_ID INTEGER NOT NULL,\n    Sales_Price FLOAT,\n    Stock_Quantity INTEGER,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szc", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a9cf", "question": "This is a store management system. For store information management, the system maintains basic store information, including store ID, store name, address, and phone number. For customer information management, the system records basic customer information, including customer ID, name, address, age, and gender. For consumption record management, the system records customer consumption at stores, including consumption amount and date.\n", "answer": "CREATE TABLE Store (\n    Address VARCHAR(255),\n    Phone VARCHAR(255),\n    Store_ID INTEGER PRIMARY KEY,\n    Store_name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Customer_ID INTEGER PRIMARY KEY,\n    Gender BOOL,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Consumption_record (\n    Consumption_amount FLOAT,\n    Consumption_date DATETIME,\n    Customer_ID INTEGER NOT NULL,\n    Store_ID INTEGER NOT NULL,\n    PRIMARY KEY (Customer_ID, Store_ID, Consumption_date),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Store_ID) REFERENCES Store(Store_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a9d4", "question": "The e-commerce system business requirement description: A certain e-commerce system needs to manage users, products, shopping carts, and orders, covering the basic processes of registration, shopping, and order placement. The system requires storing user ID, username, password, and email information during user registration. The system provides multiple products and needs to record the product ID, name, price, inventory quantity, and a simple description for users to browse and select. The shopping cart records the correspondence between users and selected products, including the product quantity. After confirming the purchase, the user can submit an order. The order shall include the creation time, order status (such as pending payment, paid, etc.), and specific product details (product ID, quantity, unit price, etc.) for the system to perform subsequent processing.", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Name VARCHAR(255),\n    Price FLOAT,\n    Product_ID INTEGER PRIMARY KEY,\n    Simple_Description VARCHAR(255),\n    Stock INTEGER\n);\n\nCREATE TABLE Cart (\n    Cart_ID INTEGER PRIMARY KEY,\n    Creation_Time DATETIME,\n    Owner_User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Owner_User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Order (\n    Order_Number VARCHAR(255) PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Ordering_User INTEGER NOT NULL,\n    FOREIGN KEY (Ordering_User) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Cart_Details (\n    Cart_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Cart_ID, Product_ID),\n    FOREIGN KEY (Cart_ID) REFERENCES Cart(Cart_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Order_Details (\n    Order_Number VARCHAR(255) NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Order_Number, Product_ID),\n    FOREIGN KEY (Order_Number) REFERENCES Order(Order_Number),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "szh2", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a9d8", "question": "The diagram depicts a vehicle management system. The main functions of the system may include:\n\n1. User management: including adding, modifying, deleting and querying user information.\n2. Vehicle information management: including adding, modifying, deleting and querying vehicle information.\n3. Vehicle maintenance management: including adding, modifying, deleting and querying maintenance records.\n4. Vehicle departure management: including adding, modifying, deleting and querying departure records.\n5. Vehicle maintenance application management: including submitting, reviewing and querying maintenance applications.\n6. Vehicle repair shop management: including adding, modifying, deleting and querying repair shop information.\n7. Announcement information management: including publishing, modifying, deleting and querying announcements.\n8. Token information management: including token generation, verification and expiration processing.\n\nThe corresponding database model is as follows:\n\n1. User information table: including fields such as user ID, user name, password, role, etc.\n\n2. Vehicle information table: including fields such as vehicle ID, vehicle name, vehicle photo, vehicle status, vehicle category, etc.\n3. Vehicle maintenance table: including fields such as maintenance ID, vehicle ID, maintenance time, maintenance details, whether to review, review reply, etc.\n4. Vehicle departure table: including fields such as departure ID, vehicle ID, departure time, departure notes, etc.\n5. Vehicle maintenance application form: including fields such as application ID, vehicle ID, application time, application reason, whether to review, review reply, etc.\n6. Repair shop information table: including fields such as repair shop ID, shop name, contact person, contact number, etc.\n7. Announcement information table: including fields such as announcement ID, title, content, creation time, etc.\n8. Token information table: including fields such as tokenID, token value, creation time, expiration time, etc.", "answer": "CREATE TABLE User_Information (\n    Password VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Vehicle_Information (\n    Vehicle_Category VARCHAR(255),\n    Vehicle_ID INTEGER PRIMARY KEY,\n    Vehicle_Name VARCHAR(255),\n    Vehicle_Photo BLOB,\n    Vehicle_Status VARCHAR(255)\n);\n\nCREATE TABLE Repair_Shop_Information (\n    Contact_Number VARCHAR(255),\n    Contact_Person VARCHAR(255),\n    Repair_Shop_ID INTEGER PRIMARY KEY,\n    Shop_Name VARCHAR(255)\n);\n\nCREATE TABLE Announcement_Information (\n    Announcement_ID INTEGER PRIMARY KEY,\n    Content VARCHAR(255),\n    Creation_Time DATETIME,\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Token_Information (\n    Creation_Time DATETIME,\n    Expiration_Time DATETIME,\n    Token_ID INTEGER PRIMARY KEY,\n    Token_Value VARCHAR(255)\n);\n\nCREATE TABLE Vehicle_Maintenance (\n    Is_Reviewed BOOL,\n    Maintenance_Details VARCHAR(255),\n    Maintenance_ID INTEGER PRIMARY KEY,\n    Maintenance_Time DATETIME,\n    Review_Reply VARCHAR(255),\n    Vehicle_ID INTEGER NOT NULL,\n    FOREIGN KEY (Vehicle_ID) REFERENCES Vehicle_Information(Vehicle_ID)\n);\n\nCREATE TABLE Vehicle_Trip (\n    Trip_ID INTEGER PRIMARY KEY,\n    Trip_Remarks VARCHAR(255),\n    Trip_Time DATETIME,\n    Vehicle_ID INTEGER NOT NULL,\n    FOREIGN KEY (Vehicle_ID) REFERENCES Vehicle_Information(Vehicle_ID)\n);\n\nCREATE TABLE Vehicle_Maintenance_Application (\n    Application_ID INTEGER PRIMARY KEY,\n    Application_Reason VARCHAR(255),\n    Application_Time DATETIME,\n    Is_Reviewed BOOL,\n    Review_Reply VARCHAR(255),\n    Vehicle_ID INTEGER NOT NULL,\n    FOREIGN KEY (Vehicle_ID) REFERENCES Vehicle_Information(Vehicle_ID)\n);", "remarks": "", "assign_to": "szh", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a9dd", "question": "This is a customer management system. For customer management, the system maintains basic customer information (customer ID, customer name, contact person, etc.), records detailed customer information (address, phone, email, etc.), and manages customer classification information (customer type, credit rating). For product management, the system maintains basic product information (product ID, product name, specifications, etc.), records detailed product information (unit price, inventory quantity, production date, etc.), and manages product classification information (product category, brand, supplier, etc.). For purchase management, the system records order information (order time, order status, etc.), maintains order details (product quantity, unit price, total amount, etc.), and manages payment information (payment method, payment status, payment time, etc.).\n", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Contact_person VARCHAR(255),\n    Credit_rating VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_name VARCHAR(255),\n    Customer_type VARCHAR(255),\n    Email VARCHAR(255),\n    Phone INTEGER\n);\n\nCREATE TABLE Product (\n    Brand VARCHAR(255),\n    Inventory_quantity INTEGER,\n    Product_ID INTEGER PRIMARY KEY,\n    Product_category VARCHAR(255),\n    Product_name VARCHAR(255),\n    Production_date DATETIME,\n    Specifications VARCHAR(255),\n    Supplier VARCHAR(255),\n    Unit_price FLOAT\n);\n\nCREATE TABLE Customer_product_purchase (\n    Customer_ID INTEGER NOT NULL,\n    Order_status VARCHAR(255),\n    Order_time DATETIME,\n    Payment_method VARCHAR(255),\n    Payment_status VARCHAR(255),\n    Payment_time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Product_quantity INTEGER,\n    Total_amount FLOAT,\n    Unit_price FLOAT,\n    PRIMARY KEY (Customer_ID, Product_ID, Order_time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "cs", "domain": ["批发和零售业", "批发业"]}
{"id": "67552f0a13602ec03b41a9e6", "question": "Business Requirement Description:\nThe following describes a Sales Point Management System. The system’s main features might include:\n1.Sales Plan Management: The company creates reasonable sales plans for sales points. The main Attributes include sales plan name, sales plan description, start date, and end date.\n2.Sales Point Management: Each sales point includes a unique sales point ID, name, and address. Each sales point is associated with a specific venue, company, and city.\n3.Device Management: Each device includes a device ID, device name, and device model. Each device is assigned to a corresponding sales point for use.\n4.City Management: Each sales point is associated with a city, which includes a city ID, city name, and province.\n5.Company Management: Each sales point is associated with a company, which includes a company ID, company name, and company address.\n6.Venue Management: Each sales point is associated with a venue, which includes a venue ID, venue name, and venue description.", "answer": "CREATE TABLE City (\n    City_ID INTEGER PRIMARY KEY,\n    City_Name VARCHAR(255),\n    Province VARCHAR(255)\n);\n\nCREATE TABLE Company (\n    Company_Address VARCHAR(255),\n    Company_ID INTEGER PRIMARY KEY,\n    Company_Name VARCHAR(255)\n);\n\nCREATE TABLE Venue (\n    Venue_Description VARCHAR(255),\n    Venue_ID INTEGER PRIMARY KEY,\n    Venue_Name VARCHAR(255)\n);\n\nCREATE TABLE Sales_Point (\n    Address VARCHAR(255),\n    City_ID INTEGER NOT NULL,\n    Company_ID INTEGER NOT NULL,\n    Sales_Point_ID INTEGER PRIMARY KEY,\n    Sales_Point_Name VARCHAR(255),\n    Venue_ID INTEGER NOT NULL,\n    FOREIGN KEY (City_ID) REFERENCES City(City_ID),\n    FOREIGN KEY (Company_ID) REFERENCES Company(Company_ID),\n    FOREIGN KEY (Venue_ID) REFERENCES Venue(Venue_ID)\n);\n\nCREATE TABLE Sales_Plan (\n    Company_ID INTEGER NOT NULL,\n    End_Date DATETIME,\n    Sales_Plan_Description VARCHAR(255),\n    Sales_Plan_ID INTEGER PRIMARY KEY,\n    Sales_Plan_Name VARCHAR(255),\n    Sales_Point_ID INTEGER NOT NULL,\n    Start_Date DATETIME,\n    FOREIGN KEY (Company_ID) REFERENCES Company(Company_ID),\n    FOREIGN KEY (Sales_Point_ID) REFERENCES Sales_Point(Sales_Point_ID)\n);\n\nCREATE TABLE Device (\n    Device_ID INTEGER PRIMARY KEY,\n    Device_Model VARCHAR(255),\n    Device_Name VARCHAR(255),\n    Sales_Point_ID INTEGER NOT NULL,\n    FOREIGN KEY (Sales_Point_ID) REFERENCES Sales_Point(Sales_Point_ID)\n);", "remarks": "第二轮修改了模式0的主键", "assign_to": "gcc", "assign_to_round2": "cyx", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0a13602ec03b41a9f3", "question": "A network chat program is designed to implement network communication-related functions, with the following functional requirements:\n\nStore basic user information, including user ID, username, password, email, user IP address, user port number, and the time of the user's last login. This table can be used for user login verification, user information queries, etc.\n\nAdditionally, store the chat records of each user, including message ID, sender ID, receiver ID, message content, and sending time. This table can be used for historical message queries, message records, etc.\n\nFurthermore, it is necessary to store server configuration information, including server ID, server IP address, server port number, maximum client connections, receive buffer size, and the protocol used. This table can be used for server configuration management and dynamic adjustment of server parameters.", "answer": "CREATE TABLE User_Table (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Time_of_User's_Last_Login DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    User_IP_Address VARCHAR(255),\n    User_Port_Number INTEGER,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Server_Configuration_Table (\n    Maximum_Client_Connections INTEGER,\n    Protocol_Used VARCHAR(255),\n    Receive_Buffer_Size INTEGER,\n    Server_ID INTEGER PRIMARY KEY,\n    Server_IP_Address VARCHAR(255),\n    Server_Port_Number INTEGER\n);\n\nCREATE TABLE Chat_Record_Table (\n    Message_Content_and_Sending_Time VARCHAR(255),\n    Message_ID INTEGER PRIMARY KEY,\n    Receiver_ID INTEGER NOT NULL,\n    Sender_ID INTEGER NOT NULL,\n    User_ID INTEGER,\n    FOREIGN KEY (Receiver_ID) REFERENCES User_Table(User_ID),\n    FOREIGN KEY (Sender_ID) REFERENCES User_Table(User_ID)\n);", "remarks": "SZC 1/25 : 增加了消息schema的外键。", "assign_to": "cyx", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a9f6", "question": "Business Requirement Description:\nThe online job recruitment system mainly serves three types of users: job seekers, companies, and administrators. The system provides the following functionalities:\n1.User Information Management: Each registered user has a unique user ID, username, password, email, avatar, nickname, registration time, and role.\n2.Company Information Management: Each company includes basic information such as company ID, company name, company address, company profile, and contact information.\n3.Job Information Management: Companies can post job openings or save matching resumes from users. Users can view detailed job information and submit resumes to the company. Job information includes job ID, title, content, requirements, job category, salary, education level, and work location.\n4.Conversation Management: Users can communicate via conversations. Conversation details include conversation ID, message content, and send time.\n5.Message Board Management: Users can update the message board with new content. The message board includes message ID, message content, and message time.", "answer": "CREATE TABLE User (\n    Avatar VARCHAR(255),\n    Email VARCHAR(255),\n    Nickname VARCHAR(255),\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Company (\n    Company_Address VARCHAR(255),\n    Company_ID INTEGER PRIMARY KEY,\n    Company_Name VARCHAR(255),\n    Company_Profile VARCHAR(255),\n    Contact_Info VARCHAR(255)\n);\n\nCREATE TABLE Conversation (\n    Conversation_ID INTEGER PRIMARY KEY,\n    Message_Content VARCHAR(255),\n    Receiver_User_ID INTEGER NOT NULL,\n    Send_Time DATETIME,\n    Sender_User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Receiver_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Sender_User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Message_Board (\n    Message_Content VARCHAR(255),\n    Message_ID INTEGER PRIMARY KEY,\n    Message_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Job_Info (\n    Company_ID INTEGER NOT NULL,\n    Content VARCHAR(255),\n    Education_Level INTEGER,\n    Job_Category VARCHAR(255),\n    Job_Info_ID INTEGER PRIMARY KEY,\n    Requirements VARCHAR(255),\n    Salary FLOAT,\n    Title VARCHAR(255),\n    Work_Location VARCHAR(255),\n    FOREIGN KEY (Company_ID) REFERENCES Company(Company_ID)\n);\n\nCREATE TABLE User_and_Conversation (\n    Conversation_ID INTEGER NOT NULL,\n    Message_Content VARCHAR(255),\n    Receiver_User_ID INTEGER NOT NULL,\n    Send_Time DATETIME,\n    Sender_User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Conversation_ID, Receiver_User_ID, Sender_User_ID),\n    FOREIGN KEY (Conversation_ID) REFERENCES Conversation(Conversation_ID),\n    FOREIGN KEY (Receiver_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Sender_User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_and_Message (\n    Message_Content VARCHAR(255),\n    Message_ID INTEGER NOT NULL,\n    Message_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Message_ID, User_ID),\n    FOREIGN KEY (Message_ID) REFERENCES Message_Board(Message_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Resume_Submission (\n    Job_Info_ID INTEGER NOT NULL,\n    Submission_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Job_Info_ID),\n    FOREIGN KEY (Job_Info_ID) REFERENCES Job_Info(Job_Info_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Resume_Save (\n    Job_Info_ID INTEGER NOT NULL,\n    Save_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Job_Info_ID),\n    FOREIGN KEY (Job_Info_ID) REFERENCES Job_Info(Job_Info_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Company_and_Job_Info (\n    Company_ID INTEGER NOT NULL,\n    Content VARCHAR(255),\n    Education_Level INTEGER,\n    Job_Category VARCHAR(255),\n    Job_Info_ID INTEGER NOT NULL,\n    Requirements VARCHAR(255),\n    Salary FLOAT,\n    Title VARCHAR(255),\n    Work_Location VARCHAR(255),\n    PRIMARY KEY (Job_Info_ID, Company_ID),\n    FOREIGN KEY (Company_ID) REFERENCES Company(Company_ID),\n    FOREIGN KEY (Job_Info_ID) REFERENCES Job_Info(Job_Info_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a9ff", "question": "The functional requirements of a personal financial management system are as follows: The system shall manage user basic information, including the user's name, gender, age, contact information, address, email, login name, password, user type, status, security question, and answer. The system shall also record user income and expense information, including the user, name of income or expense, amount, type, remark, time, and status, with each record linked to a specific user and type. The system shall manage type information, including the type name and status. Additionally, the system shall publish announcement information, including the title, content, publication time, and status. Users shall be able to query and manage their financial information based on their needs and view announcements published by the system.", "answer": "CREATE TABLE User (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Answer VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Login_Name VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Security_Question VARCHAR(255),\n    Status VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Type VARCHAR(255)\n);\n\nCREATE TABLE Announcement (\n    Announcement_ID INTEGER PRIMARY KEY,\n    Content VARCHAR(255),\n    Publication_Time DATETIME,\n    Status VARCHAR(255),\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Type (\n    Status VARCHAR(255),\n    Type_ID INTEGER PRIMARY KEY,\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Income_Expense_Record (\n    Amount INTEGER,\n    Record_ID INTEGER PRIMARY KEY,\n    Record_Name VARCHAR(255),\n    Remark VARCHAR(255),\n    Status VARCHAR(255),\n    Time DATETIME,\n    Type_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Type_ID) REFERENCES Type(Type_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "第二轮增加了模式3的属性，完善了需求描述", "assign_to": "lzm", "assign_to_round2": "cyx", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41aa02", "question": "This is an online food ordering system. For dish management, the system supports maintaining basic dish information (dish ID, dish name, price, etc.), records detailed dish information (ingredients, taste, recommendation index, etc.), and manages dish classification information (cuisine type, special features, recommendation status, etc.). For user management, the system maintains basic user information (user ID, username, password, etc.), records detailed user information (name, phone, address, etc.), and manages user account information (registration time, account status, etc.). For order management, the system records order information (order ID, order time, order status, etc.), maintains order details (dish ID, dish quantity, unit price, total amount, etc.), and manages delivery information (delivery address, delivery time, delivery person, etc.). For shopping cart management, the system records shopping cart information (user ID, dish ID, quantity, etc.), and maintains shopping cart status (add time, settlement status, etc.).\n", "answer": "CREATE TABLE Dish (\n    Cuisine_type VARCHAR(255),\n    Dish_ID INTEGER PRIMARY KEY,\n    Dish_name VARCHAR(255),\n    Ingredients VARCHAR(255),\n    Price FLOAT,\n    Recommendation_index FLOAT,\n    Recommended VARCHAR(255),\n    Special_features VARCHAR(255),\n    Taste VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Account_status VARCHAR(255),\n    Address VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    Registration_time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Delivery_address VARCHAR(255),\n    Delivery_person VARCHAR(255),\n    Delivery_time DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_status VARCHAR(255),\n    Order_time DATETIME\n);\n\nCREATE TABLE Shopping_cart (\n    Add_time DATETIME,\n    Dish_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Settlement_status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Dish_ID, User_ID, Add_time),\n    FOREIGN KEY (Dish_ID) REFERENCES Dish(Dish_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Order_detail (\n    Dish_ID INTEGER NOT NULL,\n    Dish_quantity INTEGER,\n    Order_ID INTEGER NOT NULL,\n    Total_amount FLOAT,\n    Unit_price FLOAT,\n    PRIMARY KEY (Dish_ID, Order_ID),\n    FOREIGN KEY (Dish_ID) REFERENCES Dish(Dish_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0a13602ec03b41aa04", "question": "The business requirements for a property rental management system are described as follows: The system shall manage user basic information, including User ID, Username, Password, Email, Phone Number, Role, and the creation and update timestamps of the account. The system shall also manage property information, including Property ID, Property Title, Description, Location, Area, Rent, Images, Status, and the creation and update timestamps of the property, with each property record associated with a specific owner. Additionally, the system shall record rental transaction information, including the leased property, tenant, lease start date, end date, total rent, transaction status, and the creation and update timestamps of the transaction.", "answer": "CREATE TABLE User (\n    Account_Creation_Time DATETIME,\n    Account_Update_Time DATETIME,\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Property (\n    Images BLOB,\n    Owner INTEGER NOT NULL,\n    Property_Area VARCHAR(255),\n    Property_Creation_Time DATETIME,\n    Property_Description VARCHAR(255),\n    Property_ID INTEGER PRIMARY KEY,\n    Property_Location VARCHAR(255),\n    Property_Title VARCHAR(255),\n    Property_Update_Time DATETIME,\n    Rent FLOAT,\n    Status VARCHAR(255),\n    FOREIGN KEY (Owner) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Rental_Transaction_Record (\n    Lease_End_Date DATETIME,\n    Lease_Start_Date DATETIME,\n    Property_ID INTEGER NOT NULL,\n    Total_Rent FLOAT,\n    Transaction_Creation_Time DATETIME,\n    Transaction_Status VARCHAR(255),\n    Transaction_Update_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Property_ID, Lease_Start_Date),\n    FOREIGN KEY (Property_ID) REFERENCES Property(Property_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["租赁和商务服务业", "租赁业"]}
{"id": "67552f0a13602ec03b41aa07", "question": "The database is a software project management system primarily designed to manage the development process of software projects, task assignments for team members, code submissions, and project version management. The key tables involved in the system include: User Table, Project Table, Project Version Table, Task Table, Code Submission Table. Below is a brief description of the database function.\n\n1.User Management:   \nRecords the basic information of each user in the system, who may be a project manager, developer, or tester.  \nFields: User ID, User Name, Password, Email, Phone, Role, Registration Time, Last Login Time\n\n2.Project Management: \nRecords the basic information of software development projects, each project has a responsible person and manages its current status.  \nFields: Project ID, Project Name, Project Introduction, Responsible Person ID, Creation Time, Project Status\n\n3. Project Version Management:\nRecords the version information of each project, including version number, release date, etc. Each version is associated with a specific project.  \nFields: Version ID, Project ID, Version Name, Release Date, Version Description, Is Stable Version\n\n4. Task Management:\nRecords the assignment and progress of tasks within the project; tasks are the work that developers need to complete. Each task has a start time, end time, and task status.  \nFields: Project ID, Assigned To User ID, Task Name, Task Status, Start Time, End Time, Task Description\n\n5. Code Submission Management:  \nRecords the code information submitted by developers to the project, including submission time, submission description, code path, etc.  \nFields: User ID, Project ID, Submission Time, Submission Description, Code Path", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Last_Login_Time DATETIME,\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    Registration_Time DATETIME,\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Project (\n    Creation_Time DATETIME,\n    Introduction VARCHAR(255),\n    Name VARCHAR(255),\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Status VARCHAR(255),\n    Responsible_Person_ID INTEGER\n);\n\nCREATE TABLE Project_Version (\n    Is_Stable_Version null,\n    Project_ID null,\n    Release_Date null,\n    Version_Description null,\n    Version_ID null,\n    Version_Name null,\n    PRIMARY KEY (Version_ID, Project_ID)\n);\n\nCREATE TABLE Code_Submission (\n    Code_Path VARCHAR(255),\n    Project_ID INTEGER NOT NULL,\n    Submission_Description VARCHAR(255),\n    Submission_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Project_ID, Submission_Time),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Task (\n    Assigned_To_User_ID INTEGER NOT NULL,\n    End_Time DATETIME,\n    Project_ID INTEGER NOT NULL,\n    Start_Time DATETIME,\n    Task_Description VARCHAR(255),\n    Task_Name VARCHAR(255),\n    Task_Status VARCHAR(255),\n    PRIMARY KEY (Project_ID, Assigned_To_User_ID, Start_Time),\n    FOREIGN KEY (Assigned_To_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "CS 2025/1/16", "assign_to": "cs", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aa0c", "question": "This is an online education platform's course management system. For course management, the system supports maintaining basic course information (course ID, course name, course description, etc.), records detailed course information (number of lessons, total duration, difficulty level, etc.), and manages course classification information (course category, target audience, recommendation status, etc.). For chapter management, the system maintains basic chapter information (chapter ID, chapter name, chapter description, etc.), records detailed chapter information (video URL, course materials, duration, etc.), and manages chapter sequence (previous/next chapters, chapter hierarchy, etc.). For instructor management, the system maintains basic instructor information (instructor ID, name, avatar, etc.), records detailed instructor information (teaching experience, professional field, personal profile, etc.), and manages instructor courses (teaching list, ratings, student feedback, etc.). For student management, the system maintains basic student information, including basic data (student ID, name, avatar, gender, age, contact information) and account information (registration time, account status, membership level, points), while tracking learning progress, including course progress (selected courses, current learning chapter, last learning time), viewing records (viewing duration per lesson, number of views, completion status) and learning statistics (total learning duration, course completion rate).", "answer": "CREATE TABLE Course (\n    Course_ID INTEGER PRIMARY KEY,\n    Course_category VARCHAR(255),\n    Course_description VARCHAR(255),\n    Course_name VARCHAR(255),\n    Difficulty_level INTEGER,\n    Number_of_lessons INTEGER,\n    Recommended BOOL,\n    Target_audience VARCHAR(255),\n    Total_duration FLOAT\n);\n\nCREATE TABLE Chapter (\n    Chapter_ID INTEGER PRIMARY KEY,\n    Chapter_description VARCHAR(255),\n    Chapter_name VARCHAR(255),\n    Duration FLOAT,\n    Next_chapter_ID INTEGER NOT NULL,\n    Parent_chapter_ID INTEGER NOT NULL,\n    Previous_chapter_ID INTEGER NOT NULL,\n    Video_URL VARCHAR(255),\n    FOREIGN KEY (Next_chapter_ID) REFERENCES Chapter(Chapter_ID),\n    FOREIGN KEY (Parent_chapter_ID) REFERENCES Chapter(Chapter_ID),\n    FOREIGN KEY (Previous_chapter_ID) REFERENCES Chapter(Chapter_ID)\n);\n\nCREATE TABLE Instructor (\n    Avatar BLOB,\n    Instructor_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Personal_profile VARCHAR(255),\n    Professional_field VARCHAR(255),\n    Teaching_experience VARCHAR(255)\n);\n\nCREATE TABLE Student (\n    Account_status VARCHAR(255),\n    Age INTEGER,\n    Avatar BLOB,\n    Contact_information VARCHAR(255),\n    Gender VARCHAR(255),\n    Membership_level INTEGER,\n    Name VARCHAR(255),\n    Points INTEGER,\n    Registration_time DATETIME,\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Course_material (\n    Course_ID INTEGER NOT NULL,\n    Material_ID INTEGER PRIMARY KEY,\n    Material_URL VARCHAR(255),\n    Material_name VARCHAR(255),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)\n);\n\nCREATE TABLE Instructor_teaching (\n    Course_ID INTEGER NOT NULL,\n    Instructor_ID INTEGER NOT NULL,\n    Rating FLOAT,\n    Student_feedback VARCHAR(255),\n    PRIMARY KEY (Instructor_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Instructor_ID) REFERENCES Instructor(Instructor_ID)\n);\n\nCREATE TABLE Viewing_record (\n    Chapter_ID INTEGER NOT NULL,\n    Completion_status VARCHAR(255),\n    Student_ID INTEGER NOT NULL,\n    View_count INTEGER,\n    Viewing_duration FLOAT,\n    PRIMARY KEY (Student_ID, Chapter_ID),\n    FOREIGN KEY (Chapter_ID) REFERENCES Chapter(Chapter_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "上下章节，章节层级的relation写法不确定，当前为自引用", "assign_to": "hzb", "assign_to_round2": "szc", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa10", "question": "This is a comprehensive system management platform. For user management, the system maintains basic user information including user ID, username, password, phone number, and email, while recording user status information including account status, last login time, and login IP. For system management, the platform maintains basic system information including system ID, system name, system domain, and access time, records system configuration information including callback URL, secret key, and token validity period, and manages system status including whether enabled and whether approval is required. For login records, the system maintains basic login information including user ID, system ID, login time, and login IP, records session information including token and expiration time, and manages login status including validity and logout time. For system authorization relationships, the platform maintains authorization information including user ID, system ID, and authorization time, and manages authorization status including whether effective and expiration time.\n", "answer": "CREATE TABLE User (\n    Account_status VARCHAR(255),\n    Email VARCHAR(255),\n    Last_login_time DATETIME,\n    Login_IP VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_number VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE System (\n    Access_time DATETIME,\n    Approval_required BOOL,\n    Callback_URL VARCHAR(255),\n    Enabled BOOL,\n    Secret_key VARCHAR(255),\n    System_ID INTEGER PRIMARY KEY,\n    System_domain VARCHAR(255),\n    System_name VARCHAR(255),\n    Token_validity_period VARCHAR(255)\n);\n\nCREATE TABLE Login_record (\n    Expiration_time DATETIME,\n    Login_IP VARCHAR(255),\n    Login_time DATETIME,\n    Logout_time DATETIME,\n    System_ID INTEGER NOT NULL,\n    Token VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    Valid BOOL,\n    PRIMARY KEY (User_ID, System_ID),\n    FOREIGN KEY (System_ID) REFERENCES System(System_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE System_authorization (\n    Authorization_time DATETIME,\n    Effective BOOL,\n    Expiration_time DATETIME,\n    System_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, System_ID),\n    FOREIGN KEY (System_ID) REFERENCES System(System_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "dyq，删除无用属性：刷新token，修改模式名", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aa15", "question": "The student dormitory management system business requirement description:\nA student dormitory management system includes functions such as user management, building management, dormitory management, and student management. The system has users with different roles, such as administrators, dormitory managers, students, and maintenance staff. Each user has a unique ID, username, and password. Building information includes building ID, name, type, location, description, and the responsible dormitory manager. Dormitory information includes dormitory ID, name, type, number of beds, belonging building, supporting facilities, and the responsible dormitory manager. Student information includes student ID, name, gender, belonging dormitory, class, etc. Students can submit various applications (bed change, repair, absence registration, check-out application, etc.). The system records application ID, application type, applicant student ID, application content, application time, application status, and administrator's processing opinion. Administrators can process these applications, review and approve or reject them. Dormitory managers can handle students' leave and repair applications, and manage absence registration. Maintenance staff can handle repair applications and record maintenance information. Maintenance records include maintenance record ID, dormitory ID, fault description, repair time, maintenance staff ID, maintenance situation, and completion time. The system also includes announcement management for administrators to publish and manage announcement information. Announcement information includes announcement ID, announcement title, announcement content, release time, and the ID of the administrator who released the announcement.", "answer": "CREATE TABLE User (\n    Password VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Building (\n    Building_ID INTEGER PRIMARY KEY,\n    Description VARCHAR(255),\n    Dormitory_Supervisor_ID INTEGER NOT NULL,\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Type VARCHAR(255),\n    FOREIGN KEY (Dormitory_Supervisor_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Announcement (\n    Administrator_ID INTEGER NOT NULL,\n    Announcement_ID INTEGER PRIMARY KEY,\n    Content VARCHAR(255),\n    Release_Time DATETIME,\n    Title VARCHAR(255),\n    FOREIGN KEY (Administrator_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Dormitory (\n    Building_ID INTEGER NOT NULL,\n    Dormitory_ID INTEGER PRIMARY KEY,\n    Facilities VARCHAR(255),\n    Name VARCHAR(255),\n    Number_of_Beds INTEGER,\n    Type VARCHAR(255),\n    FOREIGN KEY (Building_ID) REFERENCES Building(Building_ID)\n);\n\nCREATE TABLE Student (\n    Class VARCHAR(255),\n    Dormitory_ID INTEGER NOT NULL,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Dormitory_ID) REFERENCES Dormitory(Dormitory_ID)\n);\n\nCREATE TABLE Maintenance_Record (\n    Completion_Time DATETIME,\n    Dormitory_ID INTEGER NOT NULL,\n    Fault_Description VARCHAR(255),\n    Maintenance_ID INTEGER PRIMARY KEY,\n    Maintenance_Staff_ID INTEGER NOT NULL,\n    Maintenance_Status VARCHAR(255),\n    Report_Time DATETIME,\n    FOREIGN KEY (Dormitory_ID) REFERENCES Dormitory(Dormitory_ID),\n    FOREIGN KEY (Maintenance_Staff_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Application (\n    Application_Content VARCHAR(255),\n    Application_ID INTEGER PRIMARY KEY,\n    Application_Time DATETIME,\n    Application_Type VARCHAR(255),\n    Processing_Opinion VARCHAR(255),\n    Processing_Status VARCHAR(255),\n    Student_ID INTEGER NOT NULL,\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa18", "question": "The mini-program shall allow users to register or log in via WeChat authorization. The system shall store each user's account information (such as account number, password, nickname, bio, etc.) and related authorization information, enabling users to view some attraction information after logging in, including attraction name, pictures, reference prices, and text descriptions. Users shall be able to bookmark attractions they are interested in and submit reservation information, recording the reservation time, ticket purchase time, number of tickets purchased, etc., for later viewing or modification. Users shall also be able to submit brief comments for attractions, including comment time, comment content, comment status, etc., which shall be displayed on the front-end only after back-end review.", "answer": "CREATE TABLE User (\n    Account VARCHAR(255) PRIMARY KEY,\n    Bio VARCHAR(255),\n    Nickname VARCHAR(255),\n    Password VARCHAR(255)\n);\n\nCREATE TABLE Attraction (\n    Attraction_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Picture_URL VARCHAR(255),\n    Reference_Price FLOAT,\n    Text_Description VARCHAR(255)\n);\n\nCREATE TABLE User_Bookmark (\n    Account VARCHAR(255) NOT NULL,\n    Attraction_ID INTEGER NOT NULL,\n    PRIMARY KEY (Account, Attraction_ID),\n    FOREIGN KEY (Account) REFERENCES User(Account),\n    FOREIGN KEY (Attraction_ID) REFERENCES Attraction(Attraction_ID)\n);\n\nCREATE TABLE Ticket_Reservation_Record (\n    Attraction_ID INTEGER NOT NULL,\n    Number_of_Tickets_Purchased INTEGER,\n    Reservation_Time DATETIME,\n    Ticket_Purchase_Time DATETIME,\n    User_Account VARCHAR(255) NOT NULL,\n    PRIMARY KEY (User_Account, Attraction_ID),\n    FOREIGN KEY (Attraction_ID) REFERENCES Attraction(Attraction_ID),\n    FOREIGN KEY (User_Account) REFERENCES User(Account)\n);\n\nCREATE TABLE User_Comment (\n    Attraction_ID INTEGER NOT NULL,\n    Comment_Content VARCHAR(255),\n    Comment_Status VARCHAR(255),\n    Comment_Time DATETIME,\n    User_Account VARCHAR(255) NOT NULL,\n    PRIMARY KEY (User_Account, Attraction_ID),\n    FOREIGN KEY (Attraction_ID) REFERENCES Attraction(Attraction_ID),\n    FOREIGN KEY (User_Account) REFERENCES User(Account)\n);", "remarks": "第二轮完善了需求描述，稍微修改了模式的属性", "assign_to": "zp", "assign_to_round2": "cyx", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0b13602ec03b41aa19", "question": "Course Selection System primarily targets students and teachers, providing functions such as course selection, viewing course information, managing student and teacher information, etc. The specific requirements are as follows:\n1.Student Information Management: Students need to register and log into the system, providing their student ID, name, gender, department, age, enrollment date, major, and login password. Students can view their personal information.\n2.Teacher Information Management: Teachers need to register and log into the system, providing their employee ID, name, gender, password, title, department, and course ID. Teachers can view their personal information.\n3.Course Information Management: The system should contain a course table, recording course ID, course name, prerequisite course ID, and credits. Both students and teachers can view course information.\n4.Course Selection: After logging in, students can select courses, recording their student ID, course ID, and grades. Students can view their course selection status.\n5.Teaching Information Management: Teachers can record the course ID they teach, the teaching location, and the class time. Students can view the teaching information of teachers.\n6.Student Timetable Management: The system should record the student’s ID, selected course IDs, class times, and locations to generate a student timetable. Students can view their timetable.", "answer": "CREATE TABLE Student (\n    Age INTEGER,\n    Department VARCHAR(255),\n    Enrollment_Date DATETIME,\n    Gender VARCHAR(255),\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Teacher (\n    Course_ID INTEGER,\n    Department VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Title VARCHAR(255)\n);\n\nCREATE TABLE Course (\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Name VARCHAR(255),\n    Credits FLOAT,\n    Prerequisite_Course_ID INTEGER\n);\n\nCREATE TABLE Student_Course_Selection (\n    Course_ID INTEGER NOT NULL,\n    Grade INTEGER,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Teacher_Teaching (\n    Class_Location VARCHAR(255),\n    Class_Time VARCHAR(255),\n    Course_ID INTEGER NOT NULL,\n    Employee_ID INTEGER NOT NULL,\n    PRIMARY KEY (Employee_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Teacher(Employee_ID)\n);\n\nCREATE TABLE Timetable (\n    Class_Location VARCHAR(255),\n    Class_Time VARCHAR(255),\n    Course_ID INTEGER NOT NULL,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cyx", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa2b", "question": "The system shall manage user basic information, including username, password, WeChat Open ID, name, QQ number, email, remarks, and the creation and update time of the account. The system shall also manage attraction information, including attraction name, details, reference price, images, era, type, region, and the creation and update time of the attraction. Users shall be able to book attraction tickets, with order information including user, attraction, booking date, ticket quantity, remarks, order status, and the creation and update time of the order. Users shall be able to comment on attractions, with comment information including user, attraction, comment content, review status, and the creation and update time of the comment. Users shall be able to leave messages on the platform, with message information including user, message content, and the creation and update time of the message. Additionally, users shall be able to favorite attractions of interest, with favorite information including user, attraction, and the creation and update time of the favorite.", "answer": "CREATE TABLE user (\n    account_creation_time DATETIME,\n    account_update_time DATETIME,\n    email VARCHAR(255),\n    full_name VARCHAR(255),\n    password VARCHAR(255),\n    qq_number INTEGER,\n    remarks INTEGER,\n    user_id INTEGER PRIMARY KEY,\n    user_name VARCHAR(255),\n    wechat_open_id INTEGER\n);\n\nCREATE TABLE attraction (\n    attraction_creation_time DATETIME,\n    attraction_id INTEGER PRIMARY KEY,\n    attraction_name VARCHAR(255),\n    details VARCHAR(255),\n    era VARCHAR(255),\n    images BLOB,\n    reference_price INTEGER,\n    region VARCHAR(255),\n    type VARCHAR(255),\n    update_time DATETIME\n);\n\nCREATE TABLE message (\n    message_content VARCHAR(255),\n    message_creation_time DATETIME,\n    message_id INTEGER PRIMARY KEY,\n    update_time DATETIME,\n    user_id INTEGER NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES user(user_id)\n);\n\nCREATE TABLE ticket_booking (\n    attraction_id INTEGER NOT NULL,\n    booking_date DATETIME,\n    order_creation_time DATETIME,\n    order_status VARCHAR(255),\n    order_update_time DATETIME,\n    remarks INTEGER,\n    ticket_quantity INTEGER,\n    user_id INTEGER NOT NULL,\n    PRIMARY KEY (user_id, attraction_id, order_update_time),\n    FOREIGN KEY (attraction_id) REFERENCES attraction(attraction_id),\n    FOREIGN KEY (user_id) REFERENCES user(user_id)\n);\n\nCREATE TABLE attraction_comment (\n    attraction_id INTEGER NOT NULL,\n    comment_content VARCHAR(255),\n    comment_creation_time DATETIME,\n    comment_update_time DATETIME,\n    review_status VARCHAR(255),\n    user_id INTEGER NOT NULL,\n    PRIMARY KEY (user_id, attraction_id, comment_creation_time),\n    FOREIGN KEY (attraction_id) REFERENCES attraction(attraction_id),\n    FOREIGN KEY (user_id) REFERENCES user(user_id)\n);\n\nCREATE TABLE attraction_favorite (\n    attraction_id INTEGER NOT NULL,\n    favorite_creation_time DATETIME,\n    favorite_update_time DATETIME,\n    user_id INTEGER NOT NULL,\n    PRIMARY KEY (user_id, attraction_id, favorite_creation_time),\n    FOREIGN KEY (attraction_id) REFERENCES attraction(attraction_id),\n    FOREIGN KEY (user_id) REFERENCES user(user_id)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "cs", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0b13602ec03b41aa32", "question": "The main functional requirements for the hospital appointment registration system are described as follows:\nDesign and implement a hospital appointment registration management system.\nThe system shall support displaying hospital department information (including department name, introduction, department doctors, etc.).\nThe system shall support querying doctor scheduling information (providing doctor name, department, consultation time, remaining appointments, etc.).\nThe system shall support online appointment registration (users can select doctor and appointment time), canceling appointments, and querying historical records (including registered and canceled appointment records).\nThe system shall support user information management (storing username, password, contact information, etc.), system management (administrators can maintain doctor information, department information, appointment records, etc.).\nThe system shall support statistical analysis (perform statistics and analysis on appointment status to provide decision support for the hospital). \nThe system shall ensure data security (adopt various measures to protect user information and data security).\nThe system shall optimize hospital service efficiency and user experience.", "answer": "CREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    Password VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Introduction VARCHAR(255)\n);\n\nCREATE TABLE Doctor (\n    Department_ID INTEGER NOT NULL,\n    Doctor_ID INTEGER PRIMARY KEY,\n    Doctor_Name VARCHAR(255),\n    Title VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Appointment (\n    Appointment_ID INTEGER PRIMARY KEY,\n    Appointment_Time DATETIME,\n    Doctor_ID INTEGER NOT NULL,\n    Status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Schedule (\n    Date DATETIME,\n    Doctor_ID INTEGER NOT NULL,\n    Remaining_Appointments INTEGER,\n    Schedule_ID INTEGER PRIMARY KEY,\n    Time_Slot VARCHAR(255),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID)\n);\n\nCREATE TABLE History (\n    Appointment_ID INTEGER NOT NULL,\n    History_ID INTEGER PRIMARY KEY,\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Appointment_ID) REFERENCES Appointment(Appointment_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0b13602ec03b41aa39", "question": "Business Requirements Description for the company's Business Management System: The company has multiple business modules, each containing various business entities. The information of each business entity includes type, module code, name, creation time, update time, and creator user ID. Each business entity can be associated with multiple attachments, and the attachment information includes attachment ID, file name, file size, file path, creation time, file status, and uploader user ID. The system needs to record the detailed information of the attachments and the business entities and module codes they belong to, to facilitate the management and tracking of various business entities and their related attachments across different business modules. Additionally, the system manages user information, including user ID, name, department, role, contact details, etc., to facilitate the association of the creation, update, and upload operations of business entities and attachments.\n", "answer": "CREATE TABLE Module (\n    Creation_Time DATETIME,\n    Module_Code VARCHAR(255) PRIMARY KEY,\n    Name VARCHAR(255),\n    Update_Time DATETIME\n);\n\nCREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    Department VARCHAR(255),\n    Name VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Business_Entity (\n    Creation_Time DATETIME,\n    Creator_User_ID INTEGER NOT NULL,\n    Entity_ID INTEGER PRIMARY KEY,\n    Module_Code VARCHAR(255) NOT NULL,\n    Name VARCHAR(255),\n    Type VARCHAR(255),\n    Update_Time DATETIME,\n    FOREIGN KEY (Creator_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Module_Code) REFERENCES Module(Module_Code)\n);\n\nCREATE TABLE Attachment (\n    Attachment_ID INTEGER PRIMARY KEY,\n    Belonging_Entity_ID INTEGER NOT NULL,\n    Creation_Time DATETIME,\n    File_Name VARCHAR(255),\n    File_Path VARCHAR(255),\n    File_Size FLOAT,\n    File_Status VARCHAR(255),\n    Uploader_User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Belonging_Entity_ID) REFERENCES Business_Entity(Entity_ID),\n    FOREIGN KEY (Uploader_User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aa3a", "question": "The functional requirements for a virtual maze game platform are as follows: The system shall manage user basic information, including User ID, Username, Password, Email, and Registration Date. The platform shall provide maze creation functionality, with maze information including Maze ID, Name, Description, Creation Date, and Last Modified Date. Each maze may contain multiple maps, with map information including Map ID, Associated Maze ID, Name, Map Data (e.g., in JSON format), Creation Date, and Last Modified Date. The system shall also support skybox management, with skybox information including Skybox ID, Name, File Path, Description, Creation Date, and Last Modified Date. Users can participate in maze games, with game information including User ID, Maze ID, User Score, Game Start Time, Game End Time, Game Status (e.g., In Progress, Completed, Failed), and Game Creation and Last Modified Date.", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Maze (\n    Creation_Date DATETIME,\n    Description VARCHAR(255),\n    Last_Modified_Date DATETIME,\n    Maze_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Skybox (\n    Creation_Date DATETIME,\n    Description VARCHAR(255),\n    File_Path VARCHAR(255),\n    Last_Modified_Date DATETIME,\n    Name VARCHAR(255),\n    Skybox_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Map (\n    Associated_Maze_ID INTEGER NOT NULL,\n    Creation_Date DATETIME,\n    Last_Modified_Date DATETIME,\n    Map_Data BLOB,\n    Map_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    FOREIGN KEY (Associated_Maze_ID) REFERENCES Maze(Maze_ID)\n);\n\nCREATE TABLE User_Game_Record (\n    Game_Creation_Time DATETIME,\n    Game_End_Time DATETIME,\n    Game_Last_Modified_Time DATETIME,\n    Game_Start_Time DATETIME,\n    Game_Status VARCHAR(255),\n    Maze_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    User_Score INTEGER,\n    PRIMARY KEY (User_ID, Maze_ID, Game_Creation_Time),\n    FOREIGN KEY (Maze_ID) REFERENCES Maze(Maze_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["文化、体育和娱乐业", "娱乐业"]}
{"id": "67552f0b13602ec03b41aa3d", "question": "This is a space exploration mission management system. For probe management, the system records basic probe information including probe ID, name, weight, launch date, and service life, maintains the scientific instrument configuration carried by the probe, and tracks the probe's operational status and remaining fuel.\n\nFor celestial target management, the system records basic information about observed celestial bodies, including celestial body ID, name, type (planet/asteroid/comet etc.), maintains orbital parameters and physical characteristics, while recording existing observational data (observation time, observation data, observation results, observation accuracy, etc.) and research value.\n\nFor scientific instrument management, the system records basic instrument information including instrument ID, name, weight, power consumption, accuracy, etc., and maintains instrument operating parameters and calibration data.\n\nFor exploration mission management, the system records the probe's flight trajectory and target celestial bodies, records mission execution status and scientific data acquisition status, while maintaining mission priority and resource allocation.\n", "answer": "CREATE TABLE Probe (\n    Launch_date DATETIME,\n    Name VARCHAR(255),\n    Operational_status VARCHAR(255),\n    Probe_ID INTEGER PRIMARY KEY,\n    Remaining_fuel FLOAT,\n    Service_life FLOAT,\n    Weight FLOAT\n);\n\nCREATE TABLE Scientific_instrument (\n    Accuracy FLOAT,\n    Calibration_data VARCHAR(255),\n    Instrument_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Operating_parameters FLOAT,\n    Power_consumption FLOAT,\n    Weight FLOAT\n);\n\nCREATE TABLE Celestial_body (\n    Celestial_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Orbital_parameters FLOAT,\n    Physical_characteristics VARCHAR(255),\n    Research_value VARCHAR(255),\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Probe_instrument_configuration (\n    Instrument_ID INTEGER NOT NULL,\n    Probe_ID INTEGER NOT NULL,\n    PRIMARY KEY (Probe_ID, Instrument_ID),\n    FOREIGN KEY (Instrument_ID) REFERENCES Scientific_instrument(Instrument_ID),\n    FOREIGN KEY (Probe_ID) REFERENCES Probe(Probe_ID)\n);\n\nCREATE TABLE Observation_record (\n    Celestial_ID INTEGER NOT NULL,\n    Observation_accuracy FLOAT,\n    Observation_data BLOB,\n    Observation_results VARCHAR(255),\n    Observation_time DATETIME,\n    Record_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Celestial_ID) REFERENCES Celestial_body(Celestial_ID)\n);\n\nCREATE TABLE Exploration_mission (\n    Celestial_ID INTEGER NOT NULL,\n    Execution_status VARCHAR(255),\n    Mission_priority INTEGER,\n    Mission_resource_allocation VARCHAR(255),\n    Probe_ID INTEGER NOT NULL,\n    Probe_flight_trajectory BLOB,\n    Scientific_data_acquisition_status VARCHAR(255),\n    PRIMARY KEY (Probe_ID, Celestial_ID),\n    FOREIGN KEY (Celestial_ID) REFERENCES Celestial_body(Celestial_ID),\n    FOREIGN KEY (Probe_ID) REFERENCES Probe(Probe_ID)\n);", "remarks": "第二轮完善了需求描述，稍微修改了模式中的属性名称，认为其他没有问题", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["科学研究和技术服务业", "研究和试验发展"]}
{"id": "67552f0b13602ec03b41aa43", "question": "The course design management system of a university shall record and manage student information, task assignments, simulation modules, simulation results, and thesis submissions. Student information includes Student ID, Name, Class, and Major. Task information includes Task ID, Task Title, Task Description, Task Start Date, Task End Date, and Task Location. Simulation module information includes Module ID, Module Name, Module Type (e.g., PCM, DPCM, ΔM), Module Description, and Module Code. Simulation result information includes Student ID, Module ID, Simulation Result Data, Result Analysis, and Simulation Date. Thesis information includes Thesis ID, Student ID, Thesis Title, Thesis Content, and Submission Date. The system shall support students in viewing tasks, conducting simulation experiments, submitting simulation results, and writing and submitting theses. The system shall generate reports based on tasks and simulation results and record the completion status of students' course designs.", "answer": "CREATE TABLE Student (\n    Class VARCHAR(255),\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Task (\n    Task_Description VARCHAR(255),\n    Task_End_Date DATETIME,\n    Task_ID INTEGER PRIMARY KEY,\n    Task_Location VARCHAR(255),\n    Task_Start_Date DATETIME,\n    Task_Title VARCHAR(255)\n);\n\nCREATE TABLE Simulation_Module (\n    Module_Code VARCHAR(255),\n    Module_Description VARCHAR(255),\n    Module_ID INTEGER PRIMARY KEY,\n    Module_Name VARCHAR(255),\n    Module_Type VARCHAR(255)\n);\n\nCREATE TABLE Thesis (\n    Student_ID INTEGER NOT NULL,\n    Submission_Date DATETIME,\n    Thesis_Content VARCHAR(255),\n    Thesis_ID INTEGER PRIMARY KEY,\n    Thesis_Title VARCHAR(255),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Student_Simulation_Experiment_Result (\n    Module_ID INTEGER NOT NULL,\n    Result_Analysis VARCHAR(255),\n    Simulation_Date DATETIME,\n    Simulation_Result_Data VARCHAR(255),\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Module_ID, Simulation_Date),\n    FOREIGN KEY (Module_ID) REFERENCES Simulation_Module(Module_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "szh2", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa44", "question": "Shopping Cart System Requirements: Based on the example of JD.com’s shopping cart, the system needs to implement the following functions:\n1.User Functions: Users can log in via multiple methods. Each user has a unique user ID, username, password, contact information, and registration time.\n2.Product Management: Each product includes a product ID, product name, price, stock quantity, and product description.\n3.Order Management: Each order includes an order ID, user ID, product ID, quantity, total price, order time, and order status.\n4.Purchase Management: Each user can add multiple products to the shopping cart and place multiple orders. Each order can contain multiple products.", "answer": "CREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    Password VARCHAR(255),\n    Registration_Time DATETIME,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Price FLOAT,\n    Product_Description VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Stock_Quantity INTEGER\n);\n\nCREATE TABLE Add_to_Cart (\n    Is_Selected BOOL,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Order (\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Total_Price FLOAT,\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_and_Order (\n    Order_ID INTEGER NOT NULL,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Total_Price FLOAT,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Order_ID, User_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Order_and_Product (\n    Order_ID INTEGER NOT NULL,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Total_Price FLOAT,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0b13602ec03b41aa45", "question": "\"The system is designed for a waste collection platform, requiring management of both user and merchant accounts, and allowing users to register and log in via mobile phone number or WeChat. Users can post recycling requests, including details of the waste items such as type, quantity, location, and time. Merchants can then accept and fulfill these orders. The system must record the status and payment information of each order and provide a rating function for users to grade and comment on the service after order completion. Administrators can access all user and merchant information and perform necessary maintenance operations.\"", "answer": "CREATE TABLE User (\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255),\n    WeChat_ID INTEGER\n);\n\nCREATE TABLE Merchant (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Merchant_Account VARCHAR(255) PRIMARY KEY,\n    Password VARCHAR(255)\n);\n\nCREATE TABLE Recycling_Request (\n    Order_ID INTEGER PRIMARY KEY,\n    Recycling_Location VARCHAR(255),\n    Recycling_Time DATETIME,\n    Request_Time DATETIME,\n    Request_User INTEGER NOT NULL,\n    FOREIGN KEY (Request_User) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Transaction_Order (\n    Accepting_Merchant VARCHAR(255) NOT NULL,\n    Order_ID INTEGER PRIMARY KEY NOT NULL,\n    Order_Status VARCHAR(255),\n    Payment_Amount FLOAT,\n    Payment_Method VARCHAR(255),\n    FOREIGN KEY (Accepting_Merchant) REFERENCES Merchant(Merchant_Account),\n    FOREIGN KEY (Order_ID) REFERENCES Recycling_Request(Order_ID)\n);\n\nCREATE TABLE Order_Review (\n    Order_ID INTEGER PRIMARY KEY NOT NULL,\n    Rating FLOAT,\n    Review_Content VARCHAR(255),\n    FOREIGN KEY (Order_ID) REFERENCES Recycling_Request(Order_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "szc", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0b13602ec03b41aa49", "question": "Device Management System Requirements: This is a device management system. In terms of device management, the system supports the input of device information via a mobile application, including product name, device model, person in charge, group, type, usage location, department, IP address, and device images. A unique QR code is generated for each device, enabling a one-device-one-code system, and records the creation and update times of each device. The system also supports the printing and pasting of QR code labels. In terms of user management, the system maintains each user’s basic information, including a unique user ID, name, role, contact information, and account status. For device inventory management, the system supports exporting in-use device information, including device ID, inventory person ID, inventory time, and device location. In terms of device maintenance, staff can submit maintenance requests, including device ID, requester ID, maintenance time, maintenance content, handling status, handling personnel, handling time, and remarks. After submitting a maintenance request, the system assigns maintenance personnel to handle it and records the maintenance details, including device ID, maintenance personnel ID, maintenance time, maintenance content, maintenance results, user satisfaction, and remarks. The system also regularly updates and records the status information for each device, including current status, last update time, and remarks, to ensure the accuracy and efficiency of device management.", "answer": "CREATE TABLE Device (\n    Creation_Time DATETIME,\n    Department VARCHAR(255),\n    Device_ID INTEGER PRIMARY KEY,\n    Device_Image BLOB,\n    Device_Model VARCHAR(255),\n    Group VARCHAR(255),\n    IP_Address VARCHAR(255),\n    Person_in_Charge VARCHAR(255),\n    Product_Name VARCHAR(255),\n    QR_Code BLOB,\n    Type VARCHAR(255),\n    Update_Time DATETIME,\n    Usage_Location VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Account_Status VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Device_Status (\n    Current_Status VARCHAR(255),\n    Device_ID INTEGER PRIMARY KEY NOT NULL,\n    Last_Update DATETIME,\n    Remarks VARCHAR(255),\n    FOREIGN KEY (Device_ID) REFERENCES Device(Device_ID)\n);\n\nCREATE TABLE Device_Maintenance (\n    Device_ID INTEGER NOT NULL,\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Person_ID INTEGER NOT NULL,\n    Maintenance_Result VARCHAR(255),\n    Maintenance_Time DATETIME,\n    Remarks VARCHAR(255),\n    User_Satisfaction VARCHAR(255),\n    PRIMARY KEY (Device_ID, Maintenance_Person_ID, Maintenance_Time),\n    FOREIGN KEY (Device_ID) REFERENCES Device(Device_ID),\n    FOREIGN KEY (Maintenance_Person_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Device_Repair_Request (\n    Device_ID INTEGER NOT NULL,\n    Handling_Personnel VARCHAR(255),\n    Handling_Status VARCHAR(255),\n    Handling_Time DATETIME,\n    Remarks VARCHAR(255),\n    Request_Content VARCHAR(255),\n    Request_Time DATETIME,\n    Requester_ID INTEGER NOT NULL,\n    PRIMARY KEY (Requester_ID, Device_ID, Request_Time),\n    FOREIGN KEY (Device_ID) REFERENCES Device(Device_ID),\n    FOREIGN KEY (Requester_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Device_Inventory (\n    Device_ID INTEGER NOT NULL,\n    Device_Location VARCHAR(255),\n    Inventory_Person_ID INTEGER NOT NULL,\n    Inventory_Time DATETIME,\n    PRIMARY KEY (Inventory_Person_ID, Device_ID, Inventory_Time),\n    FOREIGN KEY (Device_ID) REFERENCES Device(Device_ID),\n    FOREIGN KEY (Inventory_Person_ID) REFERENCES User(User_ID)\n);", "remarks": "调整功能描述格式，在报修、维修、盘点加上了时间作为组合主键", "assign_to": "gcc", "assign_to_round2": "hzb", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aa4e", "question": "\"The Research Grant Management System requires storing and managing basic information for all research projects, including Project ID, Project Name, Budget, and Remaining Funds. The system should be able to record changes in the use of funds for each project, with transaction records including Record ID, Record Time, Transaction Amount, Purpose Description, Transaction Operator, and Project ID, to track budget adjustments or internal allocations and provide warnings for potential overspending or idle funds. By analyzing historical funding data for projects, the system also needs to support simple analytical functionalities, assisting managers in multidimensional querying of fund usage or generating basic reports. Users have User IDs and names, and should be distinguished in the system as roles with different permissions (such as administrator or general user), performing data entry and approval operations based on the projects they are responsible for.\"", "answer": "CREATE TABLE User (\n    Name VARCHAR(255),\n    Permission VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Project (\n    Budget FLOAT,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Name VARCHAR(255),\n    Remaining_Funds FLOAT\n);\n\nCREATE TABLE Accounting_Record (\n    Project_ID INTEGER NOT NULL,\n    Purpose_Description VARCHAR(255),\n    Record_ID INTEGER PRIMARY KEY,\n    Record_Time DATETIME,\n    Transaction_Amount FLOAT,\n    Transaction_Operator INTEGER NOT NULL,\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID),\n    FOREIGN KEY (Transaction_Operator) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "szh2", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aa52", "question": "The system is a student attendance management system. In student management, the system maintains basic information for each student, including Student ID, name, age, phone number, game preference, and gender. In course management, the system records detailed information for each course, including Course ID, course name, location, credits, and instructor ID. In instructor management, the system maintains basic information for instructors, including Instructor ID, name, gender, title, and work duration. In attendance management, the system automatically records student attendance check-ins, including Student ID, Course ID, check-in time, attendance status, class time, and remarks, achieving automated attendance management. In leave management, the system tracks and records student leave requests, including Student ID, Course ID, leave time, class time, leave reason, and leave status, facilitating comprehensive management of student attendance by the school. The system achieves automated recording of student attendance, standardized management of leave requests, and unified maintenance of course and instructor information through the collaborative functioning of these functional modules.", "answer": "CREATE TABLE Student (\n    Age INTEGER,\n    Game_Preference VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Instructor (\n    Gender VARCHAR(255),\n    Instructor_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Title VARCHAR(255),\n    Work_Duration VARCHAR(255)\n);\n\nCREATE TABLE Course (\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Name VARCHAR(255),\n    Credits FLOAT,\n    Instructor_ID INTEGER NOT NULL,\n    Location VARCHAR(255),\n    FOREIGN KEY (Instructor_ID) REFERENCES Instructor(Instructor_ID)\n);\n\nCREATE TABLE Attendance_Record (\n    Attendance_Status VARCHAR(255),\n    Check-in_Time DATETIME,\n    Class_Time DATETIME,\n    Course_ID INTEGER NOT NULL,\n    Remarks VARCHAR(255),\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID, Check-in_Time),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Leave_Record (\n    Class_Time DATETIME,\n    Course_ID INTEGER NOT NULL,\n    Leave_Reason VARCHAR(255),\n    Leave_Status VARCHAR(255),\n    Leave_Time DATETIME,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Course_ID, Leave_Time),\n    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "调整了功能描述的结构", "assign_to": "cs", "assign_to_round2": "hzb", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa5a", "question": "Requirements:\n1.User Information Management: Each registered user in the financial system has a unique user ID, username, password, phone number, associated unit, and role.\n2.Financial Document Management: Collect and organize financial systems, accounting treatment FAQs, accounting practice tips, and other materials. Each financial document includes the document title, document number, issuing unit, issue date, document category, document level, validity status, remarks, document content, and attachment path. Administrators can perform operations on the document, recording the operation time and type.\n3.Notification Management: Users can publish notifications. The content of the notification includes the notification content, issue date, and notification status.\n4.Web System Configuration: Administrators can perform operations such as adding, modifying, or deleting database content. The configuration records the system name, database directory, data type, and file upload directory.", "answer": "CREATE TABLE User (\n    Associated_Unit VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Financial_Document (\n    Attachment_Path VARCHAR(255),\n    Document_Category VARCHAR(255),\n    Document_Content VARCHAR(255),\n    Document_ID INTEGER PRIMARY KEY,\n    Document_Level VARCHAR(255),\n    Document_Number VARCHAR(255),\n    Document_Title VARCHAR(255),\n    Issue_Date DATETIME,\n    Issuing_Unit VARCHAR(255),\n    Remarks VARCHAR(255),\n    Validity_Status VARCHAR(255)\n);\n\nCREATE TABLE Notification (\n    Issue_Date DATETIME,\n    Notification_Content VARCHAR(255),\n    Notification_ID INTEGER PRIMARY KEY,\n    Notification_Status VARCHAR(255),\n    Notification_Title VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE System_Configuration (\n    Admin_ID INTEGER NOT NULL,\n    Configuration_ID INTEGER PRIMARY KEY,\n    Data_Type VARCHAR(255),\n    Database_Directory VARCHAR(255),\n    File_Upload_Directory VARCHAR(255),\n    System_Name VARCHAR(255),\n    FOREIGN KEY (Admin_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Document_Management (\n    Admin_ID INTEGER NOT NULL,\n    Document_ID INTEGER NOT NULL,\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    PRIMARY KEY (Admin_ID, Document_ID),\n    FOREIGN KEY (Admin_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Document_ID) REFERENCES Financial_Document(Document_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cyx", "domain": ["金融业", "资本市场服务"]}
{"id": "67552f0b13602ec03b41aa5c", "question": "Business Requirements Description:\n1.User Management:\nManage user information, including user roles (Student, Teacher, Laboratory Administrator, Experimental Center Director Administrator, System Administrator), username, password, phone number, and associated unit.\n2.Experimental Equipment Management:\nEnter and manage the basic information of laboratory equipment, such as equipment name, model, category, manufacturer, status (inactive, in use, active), and acquisition time.\nUsage Records Management: Record the usage of equipment, including usage time, user, and purpose of use.\nCourse Association Management: Associate equipment with specific experimental courses for easier scheduling and management of the equipment.\n3.Laboratory Consumables Management:\nConsumables Management: Perform operations such as archiving, modifying, and querying consumables information. Manage the purchasing, storage, issuance, and return of consumables.\nRecord consumable name, category, inventory quantity, and status. Users can purchase consumables and record the purchase time.\n4.Hazardous Chemicals Management:\nArchive, modify, and query hazardous chemicals information. Manage the purchasing, storage, issuance, and return of hazardous chemicals to ensure safety.\nRecord chemical name, inventory quantity, issuance time, and status.\n5.Experimental Course Management:\nView and manage information for regular experimental courses, including course name, class time, and class location. Each course can have multiple students registered, and each course is assigned a corresponding teacher.", "answer": "CREATE TABLE User (\n    Associated_Unit VARCHAR(255),\n    Password VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Experimental_Equipment (\n    Acquisition_Time DATETIME,\n    Device_Category VARCHAR(255),\n    Device_ID INTEGER PRIMARY KEY,\n    Device_Model VARCHAR(255),\n    Device_Name VARCHAR(255),\n    Manufacturer VARCHAR(255),\n    Status VARCHAR(255)\n);\n\nCREATE TABLE Experimental_Consumables (\n    Category VARCHAR(255),\n    Consumable_ID INTEGER PRIMARY KEY,\n    Consumable_Name VARCHAR(255),\n    Inventory_Quantity INTEGER,\n    Status VARCHAR(255)\n);\n\nCREATE TABLE Hazardous_Chemicals (\n    Chemical_ID INTEGER PRIMARY KEY,\n    Chemical_Name VARCHAR(255),\n    Inventory_Quantity INTEGER,\n    Issuance_Time DATETIME,\n    Status VARCHAR(255)\n);\n\nCREATE TABLE Experimental_Course (\n    Class_Location VARCHAR(255),\n    Class_Time DATETIME,\n    Course_ID INTEGER PRIMARY KEY,\n    Course_Name VARCHAR(255),\n    Participants VARCHAR(255),\n    Teacher_ID INTEGER NOT NULL,\n    FOREIGN KEY (Teacher_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Usage_of_Equipment (\n    Device_ID INTEGER NOT NULL,\n    Usage_Purpose VARCHAR(255),\n    Usage_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Device_ID, User_ID, Usage_Time),\n    FOREIGN KEY (Device_ID) REFERENCES Experimental_Equipment(Device_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Purchase_Consumables (\n    Consumable_ID INTEGER NOT NULL,\n    Purchase_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Consumable_ID, User_ID, Purchase_Time),\n    FOREIGN KEY (Consumable_ID) REFERENCES Experimental_Consumables(Consumable_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Purchase_Hazardous_Chemicals (\n    Chemical_ID INTEGER NOT NULL,\n    Purchase_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Chemical_ID, User_ID, Purchase_Time),\n    FOREIGN KEY (Chemical_ID) REFERENCES Hazardous_Chemicals(Chemical_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE User_Participation_in_Course (\n    Course_ID INTEGER NOT NULL,\n    Experimental_Course_Grade FLOAT,\n    Participation_Status VARCHAR(255),\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Course_ID),\n    FOREIGN KEY (Course_ID) REFERENCES Experimental_Course(Course_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "SZC 1/25 : 为schema2 7 8 主键增加了时间，不然无法成为主键。", "assign_to": "gcc", "assign_to_round2": "szc", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa7f", "question": "This is an enterprise information network security management system. For intrusion detection, the system discovers potential intrusion behaviors through real-time network traffic monitoring, with each intrusion detection record having a unique record ID and recording information such as detection time, source IP address, destination IP address, source port number, destination port number, attack type and threat level. For intelligent control, the system generates response plans based on particle swarm algorithms and intelligent processing knowledge base, with each response plan having a unique plan ID and recording plan generation time, plan type (such as blocking, isolation, recording), detailed plan content and execution status. For knowledge base management, the system maintains a knowledge base for intrusion behavior judgment, with each piece of knowledge having a unique knowledge ID and recording knowledge category (such as intrusion behavior, security configuration, best practices), knowledge description, knowledge source and knowledge reliability. For alarm management, the system generates alarm information for each detected intrusion behavior, with each alarm having a unique alarm ID and recording alarm time, alarm level, alarm content and processing status. The system uses particle swarm optimization support vector machine models to improve detection accuracy and random forest algorithms to predict system security status.", "answer": "CREATE TABLE Intrusion_detection_record (\n    Attack_type VARCHAR(255),\n    Destination_IP VARCHAR(255),\n    Destination_port VARCHAR(255),\n    Detection_time DATETIME,\n    Record_ID INTEGER PRIMARY KEY,\n    Source_IP VARCHAR(255),\n    Source_port VARCHAR(255),\n    Threat_level INTEGER\n);\n\nCREATE TABLE Knowledge_base (\n    Knowledge_ID INTEGER PRIMARY KEY,\n    Knowledge_category VARCHAR(255),\n    Knowledge_description VARCHAR(255),\n    Knowledge_source VARCHAR(255),\n    Reliability VARCHAR(255)\n);\n\nCREATE TABLE Response_plan (\n    Execution_status VARCHAR(255),\n    Plan_ID INTEGER PRIMARY KEY,\n    Plan_content VARCHAR(255),\n    Plan_generation_time DATETIME,\n    Plan_type VARCHAR(255),\n    Record_ID INTEGER NOT NULL,\n    FOREIGN KEY (Record_ID) REFERENCES Intrusion_detection_record(Record_ID)\n);\n\nCREATE TABLE Alarm_information (\n    Alarm_ID INTEGER PRIMARY KEY,\n    Alarm_content VARCHAR(255),\n    Alarm_level INTEGER,\n    Alarm_time DATETIME,\n    Intrusion_detection_record_ID INTEGER NOT NULL,\n    Processing_status VARCHAR(255),\n    FOREIGN KEY (Intrusion_detection_record_ID) REFERENCES Intrusion_detection_record(Record_ID)\n);\n\nCREATE TABLE Plan_knowledge_base (\n    Knowledge_ID INTEGER NOT NULL,\n    Plan_ID INTEGER NOT NULL,\n    PRIMARY KEY (Plan_ID, Knowledge_ID),\n    FOREIGN KEY (Knowledge_ID) REFERENCES Knowledge_base(Knowledge_ID),\n    FOREIGN KEY (Plan_ID) REFERENCES Response_plan(Plan_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0b13602ec03b41aaa6", "question": "This is a product distribution center information management system. It records supermarket information including name, address, and contact information; records product information including name, inventory quantity, and last update date; records supplier information including name, address, and contact information.For supply request management, the system records each supply request submitted by chain supermarkets, including unique request ID, chain supermarket ID, product ID, requested quantity and request date. When receiving a supply request, the system checks product inventory - if inventory is sufficient, it generates a delivery notification including notification ID, corresponding request ID and delivery date; if inventory is insufficient, it generates a stock-out notification including notification ID, corresponding request ID and stock-out date. For procurement management, when the procurement department receives a stock-out notification, they proceed with product procurement, with each purchase recorded in a procurement list, including unique list ID, product ID, supplier ID, purchase quantity and purchase date.", "answer": "CREATE TABLE Chain_supermarket (\n    Address VARCHAR(255),\n    Contact_information VARCHAR(255),\n    Supermarket_ID INTEGER PRIMARY KEY,\n    Supermarket_name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Inventory_quantity INTEGER,\n    Last_update_date DATETIME,\n    Product_ID INTEGER PRIMARY KEY,\n    Product_name VARCHAR(255)\n);\n\nCREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Contact_information VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_name VARCHAR(255)\n);\n\nCREATE TABLE Supply_request (\n    Product_ID INTEGER NOT NULL,\n    Request_ID INTEGER PRIMARY KEY,\n    Request_date DATETIME,\n    Request_quantity INTEGER,\n    Supermarket_ID INTEGER NOT NULL,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supermarket_ID) REFERENCES Chain_supermarket(Supermarket_ID)\n);\n\nCREATE TABLE Procurement_list (\n    List_ID INTEGER PRIMARY KEY,\n    Product_ID INTEGER NOT NULL,\n    Purchase_date DATETIME,\n    Purchase_quantity INTEGER,\n    Supplier_ID INTEGER NOT NULL,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Delivery_notification (\n    Delivery_date DATETIME,\n    Notification_ID INTEGER PRIMARY KEY,\n    Supply_request_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supply_request_ID) REFERENCES Supply_request(Request_ID)\n);\n\nCREATE TABLE Stock-out_notification (\n    Notification_ID INTEGER PRIMARY KEY,\n    Stock-out_date DATETIME,\n    Supply_request_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supply_request_ID) REFERENCES Supply_request(Request_ID)\n);", "remarks": "第二轮完善了需求描述，认为模式设计比较完善", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["批发和零售业", "批发业"]}
{"id": "67552f0b13602ec03b41aaa7", "question": "The system is required to record the basic information of each member, including Member ID, Username, Password, Name, Address, Postal Code, Telephone, Expenditure, and Points. The system will manage book information, recording each book's Book ID, Type Name, Book Title, Author, Publisher, Publication Date, ISBN, and Price. The order management module records each order's Order ID, Username, Sales, Order Date, and Shipping Date. Each order may also contain multiple order details, recording information such as Order Detail ID, Order ID, Book ID, and Quantity. Through the storage and association of this information, the system can effectively manage the related data of members, books, orders, and order details.", "answer": "CREATE TABLE Address (\n    Address VARCHAR(255),\n    Address_ID INTEGER PRIMARY KEY,\n    Postal_Code INTEGER\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Book_Title VARCHAR(255),\n    ISBN VARCHAR(255),\n    Price FLOAT,\n    Publication_Date DATETIME,\n    Publisher VARCHAR(255),\n    Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Member (\n    Address_ID INTEGER NOT NULL,\n    Expenditure FLOAT,\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Points INTEGER,\n    Telephone INTEGER,\n    Username VARCHAR(255),\n    FOREIGN KEY (Address_ID) REFERENCES Address(Address_ID)\n);\n\nCREATE TABLE Order (\n    Member_ID INTEGER NOT NULL,\n    Order_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Shipping_Date DATETIME,\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);\n\nCREATE TABLE Order_Detail (\n    Book_ID INTEGER NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Book_ID),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "dyq", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0b13602ec03b41aab2", "question": "A retail enterprise has developed an integrated management system designed to achieve comprehensive management of stores, departments, employees, procurement, and suppliers. The system's primary functionalities include store management, which records basic information for each store such as Store ID, Store Name, Address, and Contact Number; department management, which records basic information for each department such as Department ID, Department Name, Location, and Contact Number; employee management, which records basic information for each employee such as Employee ID, Name, Position, Phone Number, and Salary, while ensuring that each employee can only belong to one department.", "answer": "CREATE TABLE Mall (\n    Address VARCHAR(255),\n    Contact_Number VARCHAR(255),\n    Mall_ID INTEGER PRIMARY KEY,\n    Mall_Name VARCHAR(255)\n);\n\nCREATE TABLE Department (\n    Contact_Number VARCHAR(255),\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Location_Distribution VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Position VARCHAR(255),\n    Salary FLOAT,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "hzb", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0b13602ec03b41aab5", "question": "The system is a product distribution center information management system. In terms of product management, the system maintains detailed information for each product, including Product ID, Name, Unit Price, Stock Quantity, Unit of Measurement, Category, Description, and Storage Location. In terms of distribution personnel management, the system records basic information for each distribution personnel, including Delivery Personnel ID, Name, Phone, Gender, and Position, to facilitate personnel scheduling. In terms of customer management, the system maintains basic information for customers, including Customer ID, Name, Gender, Age, Phone, and Address, ensuring accurate processing and delivery of orders. In terms of order management, the system records complete information for each order, including Customer ID, Product ID, Order Creation Time, Product Quantity, Total Order Price, Delivery Address, Order Status, Estimated Delivery Time, and Responsible Delivery Personnel ID, enabling comprehensive tracking and management of the order process. Through the collaborative operation of these functional modules, the system achieves precise management of product inventory, automation of order processing, and real-time monitoring of the delivery process.", "answer": "CREATE TABLE Product (\n    Category VARCHAR(255),\n    Description VARCHAR(255),\n    Location VARCHAR(255),\n    Name VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Stock_Quantity INTEGER,\n    Unit_Price FLOAT,\n    Unit_of_Measurement VARCHAR(255)\n);\n\nCREATE TABLE Delivery_Personnel (\n    Delivery_Personnel_ID INTEGER PRIMARY KEY,\n    Gender BOOL,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Address VARCHAR(255),\n    Age INTEGER,\n    Customer_ID INTEGER PRIMARY KEY,\n    Gender BOOL,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Delivery_Address VARCHAR(255),\n    Order_Creation_Time DATETIME,\n    Order_Number INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Total_Order_Price FLOAT,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Order_Product (\n    Order_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Product_Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_Number),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Order_Delivery (\n    Delivery_Personnel_ID INTEGER NOT NULL,\n    Estimated_Delivery_Time DATETIME,\n    Order_ID INTEGER NOT NULL,\n    PRIMARY KEY (Order_ID, Delivery_Personnel_ID),\n    FOREIGN KEY (Delivery_Personnel_ID) REFERENCES Delivery_Personnel(Delivery_Personnel_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_Number)\n);", "remarks": "订单schema包含多个实体，进行了拆分", "assign_to": "cs", "assign_to_round2": "hzb", "domain": ["交通运输、仓储和邮政业", "装卸搬运和仓储业"]}
{"id": "67552f0b13602ec03b41aab6", "question": "This is an online bookstore backend database system. For member management, the system records basic information for each member, including unique member ID, username, password, name, address, postal code, phone number, consumption amount and points. For book management, the system records basic information for each book, including unique book ID, category name, book title, author, publisher, publication date, ISBN and price. For order management, the system records basic information for each order, including unique order ID, member username, sales amount, order date and shipping date, where the order date cannot be later than the shipping date. Each order can contain multiple books, and the system needs to record the purchase quantity for each book.", "answer": "CREATE TABLE Member (\n    Address VARCHAR(255),\n    Consumption_amount FLOAT,\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone INTEGER,\n    Points FLOAT,\n    Postal_code INTEGER,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_title VARCHAR(255),\n    Category_name VARCHAR(255),\n    ISBN VARCHAR(255) PRIMARY KEY,\n    Price FLOAT,\n    Publication_date DATETIME,\n    Publisher VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Member_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_date DATETIME,\n    Sales_amount FLOAT,\n    Shipping_date DATETIME,\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);\n\nCREATE TABLE Purchase (\n    ISBN VARCHAR(255) NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Order_ID, ISBN),\n    FOREIGN KEY (ISBN) REFERENCES Book(ISBN),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "dyq，图书编号与ISBN重复，修改模式名", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0b13602ec03b41aab7", "question": "Business Requirements Description:\nGroup Company Business Operations Database System:\n1.Mall Management: The system records basic information for each mall, including mall ID, mall name, address, and contact number.\n2.Department Management: Each mall contains different departments. The system records information for each department, including department ID, department name, location distribution, and contact number.\n3.Employee Management: Each department hires multiple employees to handle daily affairs, and each employee can only belong to one department. The system records each employee’s information, including employee ID, name, position, phone number, and salary. Each department has a manager, and the system records the manager’s tenure.\n4.Emergency Contact Management: The system requires that each employee must and can only register one emergency contact’s name and phone number.", "answer": "CREATE TABLE Mall (\n    Address VARCHAR(255),\n    Contact_Number INTEGER,\n    Mall_ID INTEGER PRIMARY KEY,\n    Mall_Name VARCHAR(255)\n);\n\nCREATE TABLE Department (\n    Contact_Number INTEGER,\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Location_Distribution VARCHAR(255),\n    Mall_ID INTEGER NOT NULL,\n    Manager_Employee_ID INTEGER NOT NULL,\n    Tenure VARCHAR(255),\n    FOREIGN KEY (Mall_ID) REFERENCES Mall(Mall_ID),\n    FOREIGN KEY (Manager_Employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Emergency_Contact_Name VARCHAR(255),\n    Emergency_Contact_Phone INTEGER,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number INTEGER,\n    Position VARCHAR(255),\n    Salary FLOAT,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "dyq", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0b13602ec03b41aabd", "question": "This is an enterprise information system. For employee management, the system records basic information for each employee, including unique employee ID, name, salary, position and education level. For department management, the system records basic information for each department, including unique department ID and department name, with each department managed by one employee as manager. For project management, the system records basic information for each project, including unique project ID and project name, with each project belonging to one department and managed by one employee. Each employee can participate in multiple projects, and each project can have multiple participating employees.", "answer": "CREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Education_level VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Salary FLOAT,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_name VARCHAR(255),\n    Manager_employee_ID INTEGER NOT NULL,\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Project (\n    Department_ID INTEGER NOT NULL,\n    Manager_employee_ID INTEGER NOT NULL,\n    Project_ID INTEGER PRIMARY KEY,\n    Project_name VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Participation (\n    Employee_ID INTEGER NOT NULL,\n    Project_ID INTEGER NOT NULL,\n    PRIMARY KEY (Employee_ID, Project_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Project(Project_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aac3", "question": "The email management system is primarily used for managing user accounts, email information, and email attachments. The system supports sending and receiving emails while providing attachment management functionality. The system supports the following functionalities:  \n\n\nUser Management: Stores user account information, including email address, password, and account creation time.\n\nAttachment Information Management :Stores relevant information about email attachments, including attachment size, upload time, path, and file name.\n\nEmail Management: Stores detailed information about emails, recording the sender, recipient, send time, email subject, content, and related attachments for each email.\n\n\nMany-to-Many Relationship: There exists a many-to-many association between emails and attachments.", "answer": "CREATE TABLE User (\n    Account_Creation_Time DATETIME,\n    Email_Address VARCHAR(255) PRIMARY KEY,\n    Password VARCHAR(255)\n);\n\nCREATE TABLE Attachment_Information (\n    Attachment_ID INTEGER PRIMARY KEY,\n    File_Name VARCHAR(255),\n    File_Path VARCHAR(255),\n    File_Size VARCHAR(255),\n    Upload_Time DATETIME\n);\n\nCREATE TABLE Email (\n    Attachment_ID INTEGER NOT NULL,\n    Delivery_Time DATETIME,\n    Email_Content VARCHAR(255),\n    Email_ID INTEGER PRIMARY KEY,\n    Email_Subject VARCHAR(255),\n    Recipient_Email_Address VARCHAR(255) NOT NULL,\n    Send_Time DATETIME,\n    Sender_Email_Address VARCHAR(255) NOT NULL,\n    FOREIGN KEY (Attachment_ID) REFERENCES Attachment_Information(Attachment_ID),\n    FOREIGN KEY (Recipient_Email_Address) REFERENCES User(Email_Address),\n    FOREIGN KEY (Sender_Email_Address) REFERENCES User(Email_Address)\n);", "remarks": "CS 2025/1/19！！65", "assign_to": "cs", "assign_to_round2": "szc", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0b13602ec03b41aad3", "question": "The enterprise has developed a meal ordering system designed to provide convenient meal ordering services for employees and enable efficient management of restaurant staff, menus, and deliveries. The system’s primary functionalities include customer management, which records basic customer information such as Customer ID, Name, Contact Number, Address, and Payment Method; restaurant staff management, which records basic staff information such as Employee ID, Name, Contact Number, and Position; menu management, which records basic menu information such as Menu ID, Dish Name, and Price; and order management, which records detailed order information such as Customer ID, Menu ID, Order Quantity, Order Time, Delivery Time, Delivery Location, and Order Status.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Contact_Number INTEGER,\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Payment_Method VARCHAR(255)\n);\n\nCREATE TABLE Employee (\n    Contact_Number INTEGER,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Menu (\n    Dish_Name VARCHAR(255),\n    Menu_ID INTEGER PRIMARY KEY,\n    Price FLOAT\n);\n\nCREATE TABLE Customer_Order (\n    Customer_ID INTEGER NOT NULL,\n    Delivery_Location VARCHAR(255),\n    Delivery_Time DATETIME,\n    Menu_ID INTEGER NOT NULL,\n    Order_Quantity INTEGER,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    PRIMARY KEY (Customer_ID, Menu_ID, Order_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Menu_ID) REFERENCES Menu(Menu_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "hzb", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0b13602ec03b41aad7", "question": "The business requirements for the order processing system are described as follows: The enterprise has multiple customers, each with a customer ID, name, and contact information. The enterprise offers a variety of products, each with a product ID, product name, price, and inventory quantity. Customers can place orders, with each order having an order ID, product ID, customer ID who placed the order, order quantity, and order status. An order can include multiple products. For each order, a picking list is generated, which includes a picking list ID, order ID, product ID, picking quantity, and picking status. Based on the order and customer information, a delivery order is generated, which includes a delivery order ID, order ID, delivery time, and delivery status. Based on the order and customer information, a customer invoice is generated, which includes an invoice ID, order ID, invoice amount, and invoice date. Based on the customer and order information, an accounts receivable report is generated, which includes a report ID, order ID, receivable amount, and report date. The system ensures the entire process from customer order placement to product delivery and invoice generation is efficient and accurate through the collaborative work of multiple modules.", "answer": "CREATE TABLE Customer (\n    Customer_Contact_Information VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Inventory_Quantity INTEGER,\n    Product_Name VARCHAR(255),\n    Product_Price FLOAT\n);\n\nCREATE TABLE Order (\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    Ordering_Customer_ID INTEGER NOT NULL,\n    FOREIGN KEY (Ordering_Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Ordered_Product (\n    Order_ID INTEGER NOT NULL,\n    Ordered_Product_ID INTEGER NOT NULL,\n    Ordered_Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Ordered_Product_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Ordered_Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Picking_List (\n    Order_ID INTEGER NOT NULL,\n    Picking_List_ID INTEGER PRIMARY KEY,\n    Picking_Status VARCHAR(255),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);\n\nCREATE TABLE Delivery_Order (\n    Delivery_Order_ID INTEGER PRIMARY KEY NOT NULL,\n    Delivery_Status VARCHAR(255),\n    Delivery_Time DATETIME,\n    FOREIGN KEY (Delivery_Order_ID) REFERENCES Order(Order_ID)\n);\n\nCREATE TABLE Customer_Invoice (\n    Customer_Invoice_ID INTEGER PRIMARY KEY,\n    Invoice_Amount FLOAT,\n    Invoice_Date DATETIME,\n    Order_ID INTEGER NOT NULL,\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);\n\nCREATE TABLE Accounts_Receivable_Report (\n    Order_ID INTEGER NOT NULL,\n    Receivable_Amount FLOAT,\n    Report_Date DATETIME,\n    Report_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);\n\nCREATE TABLE Picked_Product (\n    Picked_Product_ID INTEGER NOT NULL,\n    Picked_Product_Quantity INTEGER,\n    Picking_List_ID INTEGER NOT NULL,\n    PRIMARY KEY (Picking_List_ID, Picked_Product_ID),\n    FOREIGN KEY (Picked_Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Picking_List_ID) REFERENCES Picking_List(Picking_List_ID)\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "hzb", "domain": ["批发和零售业", "批发业"]}
{"id": "67552f0b13602ec03b41aada", "question": "This is a residential property fee management system. For property owner management, the system records basic information for each owner, including unique owner ID, name, workplace and contact number. For housing management, the system records basic information for each housing unit, including unique house number and floor area, where one owner can own multiple housing units, but each unit can only belong to one owner. For department management, the system records basic information for each department, including unique department ID, department name and department phone number, with each department having one employee as the supervisor. For employee management, the system records basic information for each employee, including unique employee ID, name, date of birth, gender, address, contact number, position and password, where each employee can only belong to one department and has different permissions based on their position. For fee management, the system records detailed information for each fee collection, including fee type (property management fee, sanitation fee, water fee and electricity fee), quantity, and fee amount, where fee standards are calculated based on housing area and quantity, collected monthly. The system generates fee receipts and accounts receivable reports based on fee collection information.", "answer": "CREATE TABLE Property_owner (\n    Contact_number VARCHAR(255),\n    Name VARCHAR(255),\n    Owner_ID INTEGER PRIMARY KEY,\n    Workplace VARCHAR(255)\n);\n\nCREATE TABLE Housing (\n    Floor_area FLOAT,\n    House_number VARCHAR(255) PRIMARY KEY,\n    Owner_ID INTEGER NOT NULL,\n    FOREIGN KEY (Owner_ID) REFERENCES Property_owner(Owner_ID)\n);\n\nCREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_name VARCHAR(255),\n    Department_phone VARCHAR(255),\n    Supervisor_employee_ID INTEGER NOT NULL,\n    FOREIGN KEY (Supervisor_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Employee (\n    Address VARCHAR(255),\n    Contact_number VARCHAR(255),\n    Date_of_birth DATETIME,\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender BOOL,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Fee_collection (\n    Collection_date DATETIME,\n    Collection_employee_ID INTEGER NOT NULL,\n    Fee_amount FLOAT,\n    Fee_type VARCHAR(255),\n    House_number VARCHAR(255) NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (House_number, Collection_employee_ID, Collection_date),\n    FOREIGN KEY (Collection_employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (House_number) REFERENCES Housing(House_number)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["居民服务、修理和其他服务业", "居民服务业"]}
{"id": "67552f0b13602ec03b41aae9", "question": "The business requirements description for the ordering system is as follows: Enterprise employees can view menus and place orders through the system, while restaurant staff are responsible for preparing meals, generating payment requests, and requesting meal deliveries. The enterprise has multiple employees, each with an employee ID, name, phone number, and address. The system offers multiple menu items, each with a dish ID, dish name, price, and special offer indicator. Registered enterprise employees can place orders, with each order having an order number, employee ID, menu number, quantity, total price, delivery time, delivery address, and payment method. Each order requires recording delivery information, including a delivery record ID, order ID, delivery time, and delivery person ID. Delivery personnel have a delivery person ID, name, phone number, and address. Restaurant staff generate payment requests based on orders, with each payment request containing an order ID, employee ID, payment status, and payment amount.", "answer": "CREATE TABLE Enterprise_Employee (\n    Employee_Address VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Employee_Name VARCHAR(255),\n    Employee_Phone INTEGER\n);\n\nCREATE TABLE Menu (\n    Dish_ID INTEGER PRIMARY KEY,\n    Dish_Name VARCHAR(255),\n    Dish_Price FLOAT,\n    Dish_Special_Offer_Indicator BOOL\n);\n\nCREATE TABLE Delivery_Person (\n    Delivery_Person_Address VARCHAR(255),\n    Delivery_Person_ID INTEGER PRIMARY KEY,\n    Delivery_Person_Name VARCHAR(255),\n    Delivery_Person_Phone INTEGER\n);\n\nCREATE TABLE Order (\n    Delivery_Address VARCHAR(255),\n    Delivery_Time DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Payment_Method VARCHAR(255),\n    Order_Total_Price FLOAT,\n    Ordering_Employee INTEGER NOT NULL,\n    FOREIGN KEY (Ordering_Employee) REFERENCES Enterprise_Employee(Employee_ID)\n);\n\nCREATE TABLE Order_Dish (\n    Dish_ID INTEGER NOT NULL,\n    Dish_Quantity INTEGER,\n    Order_ID INTEGER NOT NULL,\n    PRIMARY KEY (Order_ID, Dish_ID),\n    FOREIGN KEY (Dish_ID) REFERENCES Menu(Dish_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);\n\nCREATE TABLE Delivery_Record (\n    Delivery_Order_ID INTEGER NOT NULL,\n    Delivery_Record_ID INTEGER PRIMARY KEY,\n    Delivery_Time DATETIME,\n    Responsible_Delivery_Person_ID INTEGER NOT NULL,\n    FOREIGN KEY (Delivery_Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Responsible_Delivery_Person_ID) REFERENCES Delivery_Person(Delivery_Person_ID)\n);\n\nCREATE TABLE Payment_Request (\n    Paying_Employee_ID INTEGER NOT NULL,\n    Paying_Order_ID INTEGER NOT NULL,\n    Payment_Request_ID INTEGER PRIMARY KEY,\n    Request_Payment_Amount FLOAT,\n    Request_Payment_Status VARCHAR(255),\n    FOREIGN KEY (Paying_Employee_ID) REFERENCES Enterprise_Employee(Employee_ID),\n    FOREIGN KEY (Paying_Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "szc", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0b13602ec03b41aaee", "question": "This is a credit card management system. For customer management, the system records basic information for each customer, including unique customer ID, name, address, contact number and application status. Non-credit card customers can fill out a credit card application form, specifying the type of credit card they want to apply for and the applicant's basic information. If the application is accepted, the system will record customer information and send a confirmation letter, informing the credit card's validity period and credit limit; otherwise, a rejection letter will be sent. For credit card management, the system records basic information for each credit card, including unique card number, type, validity period, credit limit and activation status. After receiving the credit card, customers need to activate it using the card number and password, and the system will send an activation notification to inform whether the activation is successful. For transaction management, the system records basic information for each transaction, including unique transaction ID, transaction date, transaction description, transaction amount and transaction status. Customers can query and modify their personal information online, as well as query and verify transaction information.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Application_status VARCHAR(255),\n    Contact_number INTEGER,\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Credit_card (\n    Activation_status VARCHAR(255),\n    Card_number INTEGER PRIMARY KEY,\n    Credit_limit FLOAT,\n    Customer_ID INTEGER NOT NULL,\n    Type VARCHAR(255),\n    Validity_period DATETIME,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Transaction_record (\n    Card_number INTEGER NOT NULL,\n    Transaction_ID INTEGER PRIMARY KEY,\n    Transaction_amount FLOAT,\n    Transaction_date DATETIME,\n    Transaction_description VARCHAR(255),\n    Transaction_status VARCHAR(255),\n    FOREIGN KEY (Card_number) REFERENCES Credit_card(Card_number)\n);", "remarks": "第二轮增加了模式2中交易描述这一属性", "assign_to": "hzb", "assign_to_round2": "cyx", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0b13602ec03b41aaf7", "question": "This is an online homework grading system. For student management, the system records basic information for each student, including unique student ID, name, class, phone number and email. For instructor management, the system records basic information for each instructor, including unique instructor ID, name, courses taught, phone number and email. For homework management, students can submit electronic homework online, and the system records basic information for each homework submission, including unique homework ID, homework content, submission time and grading status. After successful submission, the system notifies both the student and instructor. Instructors can download ungraded homework, score each question and provide overall feedback, then upload the graded homework back to the system. The system records grading information (scores and feedback), grading time and notifies students when their homework has been graded. Students can view their submitted homework, scores and feedback.", "answer": "CREATE TABLE Student (\n    Class VARCHAR(255),\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Instructor (\n    Course VARCHAR(255),\n    Email VARCHAR(255),\n    Instructor_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Homework (\n    Grading_status VARCHAR(255),\n    Homework_ID INTEGER PRIMARY KEY,\n    Homework_content VARCHAR(255),\n    Submission_time DATETIME,\n    Submitting_student_ID INTEGER NOT NULL,\n    FOREIGN KEY (Submitting_student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "dyq", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aaf9", "question": "A publishing house plans to develop an online store, ACShop, for selling academic publications. The functional requirements are as follows: The online academic publications include papers, academic reports, and lecture materials. Publication information includes Publication ID, Title, Author, Price, and Type. Customer information includes Customer ID, Name, Phone, Email, Password, and Registration Status. ACShop will automatically generate orders, with order information including Publication ID, Customer ID, Shipping Address, Payment Method, Order Status, and Order Time. Administrators are responsible for maintaining the online publication catalog, including adding new publications or updating information on available publications. Administrator information includes Administrator ID, Name, Phone, Email, and Password.", "answer": "CREATE TABLE Publication (\n    Author VARCHAR(255),\n    Price FLOAT,\n    Publication_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255),\n    Type VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    Registration_Status VARCHAR(255)\n);\n\nCREATE TABLE Administrator (\n    Administrator_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER NOT NULL,\n    Order_Status VARCHAR(255),\n    Order_Time DATETIME,\n    Payment_Method VARCHAR(255),\n    Publication_ID INTEGER NOT NULL,\n    Shipping_Address VARCHAR(255),\n    PRIMARY KEY (Customer_ID, Publication_ID, Order_Time),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Publication_ID) REFERENCES Publication(Publication_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "dyq", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0b13602ec03b41ab04", "question": "The online assignment management system of a university is designed as follows: The system allows students to submit electronic assignments. Student information includes Student ID, Name, and Class. Instructor information includes Instructor ID, Name, and Course. Instructors can download ungraded assignments. After verifying the Instructor ID, the system displays the submitted assignments on the screen for instructors to grade. While grading, instructors score each question according to the format and provide an overall evaluation. After grading, instructors upload the graded assignments (including scores and evaluations) to the system for storage. The system records the graded assignment scores and evaluations in the student information and notifies the students that the assignments have been graded. Students can view the graded assignments, including the submitted assignments, scores, and evaluations.", "answer": "CREATE TABLE Student (\n    Class VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Instructor (\n    Course VARCHAR(255),\n    Instructor_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Assignment (\n    Assignment_Content VARCHAR(255),\n    Assignment_ID INTEGER PRIMARY KEY,\n    Student_ID INTEGER NOT NULL,\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);\n\nCREATE TABLE Assignment_Grading (\n    Assignment_ID INTEGER NOT NULL,\n    Evaluation VARCHAR(255),\n    Grading_Time DATETIME,\n    Instructor_ID INTEGER NOT NULL,\n    Score FLOAT,\n    PRIMARY KEY (Assignment_ID, Instructor_ID, Grading_Time),\n    FOREIGN KEY (Assignment_ID) REFERENCES Assignment(Assignment_ID),\n    FOREIGN KEY (Instructor_ID) REFERENCES Instructor(Instructor_ID)\n);", "remarks": "", "assign_to": "lzm", "assign_to_round2": "cyx", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41ab17", "question": "The design of the information management system for a pizza shop is as follows:\nThe system includes Customer Management, Sales Order Processing, Production Planning, Raw Material Procurement, Product Inventory Management, Order Delivery, and Financial Records.\nCustomer information comprises Customer ID, Name, Contact Number, and Address.\nSales Order records the customer's order details, including Order ID, Customer ID, Expected Delivery Date, and Order Status.\nProduction Planning determines the production sequence and quantity based on Sales Orders and inventory status, and records the production status.  \nInventory Management tracks the quantity and status of pizzas and raw materials.\nPurchase Orders are used to order raw materials from suppliers, documenting Supplier ID, Raw Material ID, Order Quantity, Supply Quantity, and Order Status.\nDelivery Records track the delivery details of orders, including Delivery Time, Location, and Status.\nFinancial Records manage income and expenses, recording Transaction Type, Amount, Date, and Status.\nAdditionally, the system includes Supplier Information, Pizza Recipes, and Raw Material Details to ensure the smooth progression of production processes.", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Contact_Number VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Raw_Material (\n    Raw_Material_ID INTEGER PRIMARY KEY,\n    Raw_Material_Name VARCHAR(255),\n    Specification VARCHAR(255)\n);\n\nCREATE TABLE Financial_Record (\n    Amount INTEGER,\n    Date DATETIME,\n    Status VARCHAR(255),\n    Transaction_ID INTEGER PRIMARY KEY,\n    Transaction_Type VARCHAR(255)\n);\n\nCREATE TABLE Supplier (\n    Contact_Information VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_Name VARCHAR(255)\n);\n\nCREATE TABLE Pizza_Recipe (\n    Raw_Material_ID INTEGER,\n    Recipe_ID INTEGER PRIMARY KEY,\n    Usage_Amount INTEGER\n);\n\nCREATE TABLE Sales_Order (\n    Customer_ID INTEGER NOT NULL,\n    Expected_Delivery_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_Status VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Purchase_Order (\n    Order_Quantity INTEGER,\n    Order_Status VARCHAR(255),\n    Purchase_Order_ID INTEGER PRIMARY KEY,\n    Raw_Material_ID INTEGER NOT NULL,\n    Supplied_Quantity INTEGER,\n    Supplier_ID INTEGER NOT NULL,\n    FOREIGN KEY (Raw_Material_ID) REFERENCES Raw_Material(Raw_Material_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Recipe_ID INTEGER NOT NULL,\n    FOREIGN KEY (Recipe_ID) REFERENCES Pizza_Recipe(Recipe_ID)\n);\n\nCREATE TABLE Production_Plan (\n    Order_ID INTEGER NOT NULL,\n    Production_Plan_ID INTEGER PRIMARY KEY,\n    Production_Status VARCHAR(255),\n    FOREIGN KEY (Order_ID) REFERENCES Sales_Order(Order_ID)\n);\n\nCREATE TABLE Delivery_Record (\n    Delivery_Location VARCHAR(255),\n    Delivery_Record_ID INTEGER PRIMARY KEY,\n    Delivery_Time DATETIME,\n    Order_ID INTEGER NOT NULL,\n    Status VARCHAR(255),\n    FOREIGN KEY (Order_ID) REFERENCES Sales_Order(Order_ID)\n);\n\nCREATE TABLE Inventory_Management (\n    Inventory_ID INTEGER PRIMARY KEY,\n    Product_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Status VARCHAR(255),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "", "assign_to": "dyq", "assign_to_round2": "szc", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0b13602ec03b41ab36", "question": "System Description:\nThis is an information management platform used by M Group to effectively manage the employees of its subsidiaries, meeting the company’s various business management needs.\nBusiness Requirements Description:\n1.Subsidiary Management:\nThe system records information about each subsidiary, including subsidiary ID, name, manager ID, contact address, and phone number. Each subsidiary has a unique subsidiary ID, one manager, and multiple business departments.\n2.Business Department Management:\nThe system records information about each business department, including department ID, name, address, phone number, and affiliated subsidiary ID. Each business department has a unique department ID, one supervisor, and multiple employees.\n3.Employee Management:\nThe system records information about each employee, including employee ID, name, position, affiliated department ID, phone number, family member names, and relationships. Each employee has a unique employee ID and belongs to only one department.\n4.Identity Verification:\nUsers must undergo identity verification before logging into the system.\n5.Real Estate Information Management:\nReal estate agents can log into the system and enter information about the properties they are responsible for selling. However, this information must be approved by the system administrator.\n6.Real Estate Information Export:\nSystem administrators can export a list of all real estate information. They will periodically summarize and update the list, removing properties that are no longer for sale.", "answer": "CREATE TABLE Subsidiary (\n    Contact_Address VARCHAR(255),\n    Manager_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Subsidiary_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Manager_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Business_Department (\n    Address VARCHAR(255),\n    Department_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Subsidiary_ID INTEGER NOT NULL,\n    FOREIGN KEY (Subsidiary_ID) REFERENCES Subsidiary(Subsidiary_ID)\n);\n\nCREATE TABLE Employee (\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Family_Member_Name VARCHAR(255),\n    Family_Member_Relationship VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Business_Department(Department_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "dyq", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0b13602ec03b41ab37", "question": "This is a real estate information management system. For property management, the system records basic information for each property, including unique property ID, property certificate, address, construction year, built area, sale price, property photos and sales status (for sale, sold, off market), with additional apartment-specific information required for apartment-type properties. For real estate agent management, the system records basic information for each agent, including unique agent ID, name, home address and contact number. Each property can only be managed by one agent at a time, and the system needs to record the responsibility period (start time, end time). For user management, the system records basic information for each user, including unique user ID, username, password and role (real estate agent or system administrator). Users need to pass authentication before logging into the system. After logging in, real estate agents can enter information for properties they are responsible for selling, but this requires system administrator approval and authorization. All users can query property information, while system administrators can also export property information lists and periodically organize sales status, removing properties that are no longer for sale from the system.", "answer": "CREATE TABLE Property (\n    Address VARCHAR(255),\n    Built_area VARCHAR(255),\n    Construction_year DATETIME,\n    Is_apartment BOOL,\n    Property_ID INTEGER PRIMARY KEY,\n    Property_certificate VARCHAR(255),\n    Property_photos BLOB,\n    Sale_price FLOAT,\n    Sales_status VARCHAR(255)\n);\n\nCREATE TABLE Agent (\n    Agent_ID INTEGER PRIMARY KEY,\n    Contact_number VARCHAR(255),\n    Home_address VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Password VARCHAR(255),\n    Role VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Responsibility (\n    Agent_ID INTEGER NOT NULL,\n    Property_ID INTEGER NOT NULL,\n    Responsibility_end_time DATETIME,\n    Responsibility_start_time DATETIME,\n    PRIMARY KEY (Agent_ID, Property_ID),\n    FOREIGN KEY (Agent_ID) REFERENCES Agent(Agent_ID),\n    FOREIGN KEY (Property_ID) REFERENCES Property(Property_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "szh2", "domain": ["房地产业", "房地产业"]}
{"id": "67552f0b13602ec03b41ab46", "question": "This is an agricultural crop monitoring system used to track and manage crop, environmental, and sensor data based on pre-defined monitoring and processing rules.\nBusiness Requirements Description:\n1.Information Maintenance:\nAgricultural experts maintain the monitoring rules for crops, environments, and other monitoring data. The system records the crop ID, crop name, and crop type.\n2.Data Collection:\nThe system collects continuous monitoring data from sensors, which includes sensor ID, temperature, rainfall, light intensity, and sensor location. After parsing, the system records the data type, collection time, and data value.\n3.Data Processing:\nReal-time monitoring data is analyzed according to the monitoring rules, and the analysis results are visualized and stored. Historical monitoring data is statistically processed and predicted, with the prediction results also visualized and stored.", "answer": "CREATE TABLE Crop (\n    Crop_ID INTEGER PRIMARY KEY,\n    Crop_Name VARCHAR(255),\n    Crop_Type VARCHAR(255)\n);\n\nCREATE TABLE Sensor (\n    Light_Intensity INTEGER,\n    Rainfall INTEGER,\n    Sensor_ID INTEGER PRIMARY KEY,\n    Sensor_Location VARCHAR(255),\n    Temperature FLOAT\n);\n\nCREATE TABLE Sensor_Monitoring_Crop (\n    Collection_Time DATETIME,\n    Crop_ID INTEGER NOT NULL,\n    Data_Type VARCHAR(255),\n    Data_Value VARCHAR(255),\n    Sensor_ID INTEGER NOT NULL,\n    PRIMARY KEY (Crop_ID, Sensor_ID),\n    FOREIGN KEY (Crop_ID) REFERENCES Crop(Crop_ID),\n    FOREIGN KEY (Sensor_ID) REFERENCES Sensor(Sensor_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cyx", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0b13602ec03b41ab4a", "question": "Business Requirements Description for the Vehicle Maintenance Management System: The maintenance company manages multiple clients, each with a client number, client name, client type, discount rate, contact person, and contact phone number. The company manages multiple vehicles, each with a license plate number, model, color, and vehicle category. Each vehicle belongs to only one client. The company manages multiple employees, each with an employee number, employee name, position (such as salesperson, maintenance worker, and supervisor), phone number, and home address. Each employee belongs to only one department. The company manages multiple departments, each with a department number, name, supervisor, and phone number. Each maintenance task requires recording the maintenance order number, license plate number, maintenance content, man-hours, and the information of the maintenance worker performing the task.", "answer": "CREATE TABLE Client (\n    Client_Contact_Person VARCHAR(255),\n    Client_Name VARCHAR(255),\n    Client_Number VARCHAR(255) PRIMARY KEY,\n    Client_Type VARCHAR(255),\n    Contact_Phone_Number VARCHAR(255),\n    Discount_Rate FLOAT\n);\n\nCREATE TABLE Vehicle (\n    Client_Number VARCHAR(255) NOT NULL,\n    License_Plate_Number VARCHAR(255) PRIMARY KEY,\n    Vehicle_Category VARCHAR(255),\n    Vehicle_Color VARCHAR(255),\n    Vehicle_Model VARCHAR(255),\n    FOREIGN KEY (Client_Number) REFERENCES Client(Client_Number)\n);\n\nCREATE TABLE Employee (\n    Department_Number VARCHAR(255) NOT NULL,\n    Employee_Home_Address VARCHAR(255),\n    Employee_Name VARCHAR(255),\n    Employee_Number VARCHAR(255) PRIMARY KEY,\n    Employee_Phone_Number VARCHAR(255),\n    Employee_Position VARCHAR(255),\n    FOREIGN KEY (Department_Number) REFERENCES Department(Department_Number)\n);\n\nCREATE TABLE Department (\n    Department_Name VARCHAR(255),\n    Department_Number VARCHAR(255) PRIMARY KEY,\n    Department_Phone_Number VARCHAR(255),\n    Supervisor_Employee_Number VARCHAR(255) NOT NULL,\n    FOREIGN KEY (Supervisor_Employee_Number) REFERENCES Employee(Employee_Number)\n);\n\nCREATE TABLE Maintenance_Task (\n    License_Plate_Number VARCHAR(255) NOT NULL,\n    Maintenance_Content VARCHAR(255),\n    Maintenance_Man-Hours FLOAT,\n    Maintenance_Order_Number VARCHAR(255) PRIMARY KEY,\n    Maintenance_Worker_Number VARCHAR(255) NOT NULL,\n    FOREIGN KEY (License_Plate_Number) REFERENCES Vehicle(License_Plate_Number),\n    FOREIGN KEY (Maintenance_Worker_Number) REFERENCES Employee(Employee_Number)\n);", "remarks": "", "assign_to": "cyx", "assign_to_round2": "dyq", "domain": ["居民服务、修理和其他服务业", "机动车、电子产品和日用产品修理业"]}
{"id": "67552f0b13602ec03b41ab51", "question": "Business Requirements Description:\nThis system supports a payment platform for managing users, payment operations, intermediaries, and the status of user payments.\n1.Payment Platform:\nEach payment platform needs to record its basic information, including platform ID, platform name, and platform address.\n2.User:\nEach user needs to record their basic information, including user ID, name, contact information, and registration method.\n3.Intermediary:\nEach intermediary needs to record their basic information, including intermediary ID, intermediary name, intermediary status, and operation ID.\n4.Operation:\nEach operation needs to record detailed information, including operation ID, operation type, operation amount, operation time, and platform ID.\n5.User Payment Operation:\nRecords each payment operation a user participates in, including operation ID, user ID, payment status, and payment time. A user can participate in multiple payment operations, and each payment platform can include multiple operations.\n6.Each operation may contain multiple intermediaries.", "answer": "CREATE TABLE Payment_Platform (\n    Platform_Address VARCHAR(255),\n    Platform_ID INTEGER PRIMARY KEY,\n    Platform_Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    Registration_Method VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Operation (\n    Operation_Amount FLOAT,\n    Operation_ID INTEGER PRIMARY KEY,\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    Platform_ID INTEGER NOT NULL,\n    FOREIGN KEY (Platform_ID) REFERENCES Payment_Platform(Platform_ID)\n);\n\nCREATE TABLE Intermediary (\n    Intermediary_ID INTEGER PRIMARY KEY,\n    Intermediary_Name VARCHAR(255),\n    Intermediary_Status VARCHAR(255),\n    Operation_ID INTEGER NOT NULL,\n    FOREIGN KEY (Operation_ID) REFERENCES Operation(Operation_ID)\n);\n\nCREATE TABLE User_Payment_Operation (\n    Operation_ID INTEGER NOT NULL,\n    Payment_Status VARCHAR(255),\n    Payment_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (Operation_ID, User_ID),\n    FOREIGN KEY (Operation_ID) REFERENCES Operation(Operation_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "szh2", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0a13602ec03b41a7a9", "question": "The Agricultural Supply Chain Management System needs to manage multiple suppliers and customers.\nEach supplier has a Supplier ID, name, address, contact information, and can supply multiple products.\nEach customer has a Customer ID, name, address, contact information, and can purchase multiple products.\nEach product has a Product ID, product name, and unit price.\nRecord the products that a supplier can supply.\nRecord each purchase, including the purchase date, Supplier ID, Customer ID, Product ID, and quantity.", "answer": "CREATE TABLE Supplier (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY,\n    Supplier_Name VARCHAR(255)\n);\n\nCREATE TABLE Customer (\n    Address VARCHAR(255),\n    Contact_Information VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Customer_Name VARCHAR(255)\n);\n\nCREATE TABLE Product (\n    Product_ID INTEGER PRIMARY KEY,\n    Product_Name VARCHAR(255),\n    Unit_Price FLOAT\n);\n\nCREATE TABLE Supplier_Product_Supply (\n    Product_ID INTEGER NOT NULL,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supplier_ID, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Purchase_Record (\n    Customer_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Purchase_Date DATETIME,\n    Quantity INTEGER,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Purchase_Date, Supplier_ID, Customer_ID, Product_ID),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);", "remarks": "存在三元关系", "assign_to": "dyq", "assign_to_round2": "cs", "domain": ["农、林、牧、渔业", "农业"]}
{"id": "67552f0a13602ec03b41a8ce", "question": "This backend system is designed for managing work order processing information across different support departments.\n1.Department Management:The system allows you to create, modify, and delete different support departments. For each department, you can set:\nDepartment name, description, and email address.Sorting order. Whether the department only allows customers to submit work orders.Whether work orders are only responded to via email pipeline.Whether auto-replies are disabled.Whether the department is hidden from users.\n2.Email Configuration:For each department, configure the email server’s host address, port number, login username, and password, allowing the system to automatically handle emails.\n3.Employee Email Server Maintenance:\nEmployees can maintain the email server in real-time.", "answer": "CREATE TABLE Department (\n    Allow_Customer_Work_Orders VARCHAR(255),\n    Department_ID INTEGER PRIMARY KEY,\n    Description VARCHAR(255),\n    Disable_Auto_Reply BOOL,\n    Email VARCHAR(255),\n    Hide_Department VARCHAR(255),\n    Name VARCHAR(255),\n    Reply_by_Email_Only BOOL,\n    Request_Feedback VARCHAR(255),\n    Sorting_Order VARCHAR(255)\n);\n\nCREATE TABLE Employee_Table (\n    Department_ID INTEGER,\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Email_Configuration (\n    Configuration_ID INTEGER PRIMARY KEY,\n    Department_ID INTEGER NOT NULL,\n    Host_Address VARCHAR(255),\n    Login_Password VARCHAR(255),\n    Login_Username VARCHAR(255),\n    Port_Number INTEGER,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Employee_Maintenance_Email_Server (\n    Employee_ID INTEGER NOT NULL,\n    Maintenance_Time DATETIME,\n    Server_ID INTEGER NOT NULL,\n    PRIMARY KEY (Employee_ID, Server_ID, Maintenance_Time),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee_Table(Employee_ID),\n    FOREIGN KEY (Server_ID) REFERENCES Email_Configuration(Configuration_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["卫生和社会工作", "社会工作"]}
{"id": "67552f0a13602ec03b41a8d1", "question": "The database is a system for real-time communication or message push. The main functions include:\n\n1. Application management: The system should manage different applications, each with a unique AppID and name.\n2. Channel management: Manage channels in applications, support creation, closing, persistence, privatization, online status, and push notifications.\n3. Client management: Manage client users of applications, each with a unique ID and user name.\n4. Channel subscription: Manage channels subscribed by client users, ensuring that each client can only appear once in each channel.\n5. Event logging: Record various events in the channel, including event type, timestamp, and payload content, and support quick query of events by channel ID and timestamp.", "answer": "CREATE TABLE Application_Table (\n    Application_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE User_Table (\n    ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Channel_Table (\n    Belonging_Application INTEGER NOT NULL,\n    Channel_ID INTEGER PRIMARY KEY,\n    Creation_Time DATETIME,\n    Creator INTEGER NOT NULL,\n    Is_Private BOOL,\n    Status VARCHAR(255),\n    FOREIGN KEY (Belonging_Application) REFERENCES Application_Table(Application_ID),\n    FOREIGN KEY (Creator) REFERENCES User_Table(ID)\n);\n\nCREATE TABLE Channel_Event_Table (\n    Channel_ID INTEGER NOT NULL,\n    Event_ID INTEGER PRIMARY KEY,\n    Event_Type VARCHAR(255),\n    Payload_Content VARCHAR(255),\n    Timestamp DATETIME,\n    FOREIGN KEY (Channel_ID) REFERENCES Channel_Table(Channel_ID)\n);", "remarks": "删除了不合理的需求描述，修改了标注中的中英文描述", "assign_to": "szh", "assign_to_round2": "zp", "domain": ["信息传输、软件和信息技术服务业", "互联网和相关服务"]}
{"id": "67552f0a13602ec03b41a8e1", "question": "This is a supply chain management system, mainly used for managing parts, suppliers, customers and order information. For parts management, the system records basic information of parts, including part number, name, specifications, unit price, inventory level, etc., with each part being available from multiple suppliers. For supplier management, the system stores detailed supplier information, including supplier ID, name, contact person, phone, email, credit rating, etc., records supplier geographical location information (country, region), and manages the parts that suppliers can provide along with their quotations. For customer management, the system maintains customer information, including customer ID, name, contact information, payment method, etc., records customer geographical location (country, region), and tracks customer order history and credit records. For order management, the system records basic order information, including order ID, order time, customer ID, delivery date, order status, etc., manages order details including specific parts, suppliers, quantity, unit price, total amount, etc., and supports order creation, modification, cancellation and other operations. For geographical location management, the system maintains basic country and region data, supports supplier and customer location associations, facilitating cross-regional supply chain analysis and management.", "answer": "CREATE TABLE Part (\n    Inventory_level VARCHAR(255),\n    Name VARCHAR(255),\n    Part_ID INTEGER PRIMARY KEY,\n    Specifications VARCHAR(255),\n    Unit_price FLOAT\n);\n\nCREATE TABLE Geographic_location (\n    Country VARCHAR(255),\n    Location_ID INTEGER PRIMARY KEY,\n    Region VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Customer_ID INTEGER,\n    Delivery_date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_status VARCHAR(255),\n    Order_time DATETIME\n);\n\nCREATE TABLE Supplier (\n    Contact_person VARCHAR(255),\n    Country VARCHAR(255),\n    Credit_rating VARCHAR(255),\n    Email VARCHAR(255),\n    Location_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Region VARCHAR(255),\n    Supplier_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Location_ID) REFERENCES Geographic_location(Location_ID)\n);\n\nCREATE TABLE Customer (\n    Contact_information VARCHAR(255),\n    Country VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Location_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Payment_method VARCHAR(255),\n    Region VARCHAR(255),\n    FOREIGN KEY (Location_ID) REFERENCES Geographic_location(Location_ID)\n);\n\nCREATE TABLE Order_detail (\n    Order_ID INTEGER NOT NULL,\n    Order_detail_ID INTEGER PRIMARY KEY,\n    Part_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Supplier_ID INTEGER NOT NULL,\n    Total_amount INTEGER,\n    Unit_price FLOAT,\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID),\n    FOREIGN KEY (Part_ID) REFERENCES Part(Part_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);\n\nCREATE TABLE Supply (\n    Part_ID INTEGER NOT NULL,\n    Quote FLOAT,\n    Supplier_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supplier_ID, Part_ID),\n    FOREIGN KEY (Part_ID) REFERENCES Part(Part_ID),\n    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)\n);", "remarks": "没问题", "assign_to": "hzb", "assign_to_round2": "zp", "domain": ["生活生产和供应业", "电力、热力生产和供应业"]}
{"id": "67552f0a13602ec03b41a906", "question": "The system shall require explicit permission controls among different users, user groups, and roles to ensure security and compliance. The Access Control System (ACS) shall assist organizations in managing permissions across various levels, ensuring each user has appropriate access within the system, thereby preventing sensitive information leakage and misuse of operations.\n\nThe core objectives of the system include managing user information, roles, permissions, and policies. It shall provide system administrators with convenient user permission configuration tools while supporting the dynamic adjustment of permission relationships between users and roles. Common application scenarios include Content Management Systems (CMS), internal management platforms, and Customer Relationship Management (CRM) systems.\n\nPrimary functional requirements:\nUser management:\nRegistration, management, updating, and deletion of users.\nEach user shall possess a unique identifier (such as username or email) and personal information.\nRole management:\nThe system shall support the creation, management, and deletion of roles.\nEach role shall correspond to a set of permissions, which can be assigned to a role by an administrator, and then assigned to users.\nPermission management:\nPermissions may be set for operations, such as 'view', 'edit', 'delete', and 'create'.\nPermissions shall include access control to certain functional modules or data resources within the system.", "answer": "CREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY,\n    User_Name VARCHAR(255)\n);\n\nCREATE TABLE Role (\n    Role_Description VARCHAR(255),\n    Role_ID INTEGER PRIMARY KEY,\n    Role_Name VARCHAR(255)\n);\n\nCREATE TABLE Permission (\n    Permission_Description VARCHAR(255),\n    Permission_ID INTEGER PRIMARY KEY,\n    Permission_Name VARCHAR(255)\n);\n\nCREATE TABLE Role_Permission_Assignment (\n    Permission_Assignment_End_Time DATETIME,\n    Permission_Assignment_Start_Time DATETIME,\n    Permission_ID INTEGER,\n    Role_ID INTEGER,\n    PRIMARY KEY (Role_ID, Permission_ID, Permission_Assignment_Start_Time)\n);\n\nCREATE TABLE User_Role (\n    Role_Assignment_End_Time DATETIME,\n    Role_Assignment_Start_Time DATETIME,\n    Role_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Role_ID, Role_Assignment_Start_Time),\n    FOREIGN KEY (Role_ID) REFERENCES Role(Role_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "CS 2025/1/7！！！\nZP：用户角色表应该为多对多关系，否则通过外键即可确定某个用户的角色。修改了schema的某些表名", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["卫生和社会工作", "社会工作"]}
{"id": "67552f0a13602ec03b41a951", "question": "The business management system is described as follows:\nThe system manages multiple enterprises, with enterprise information including name and creation time.\nEach enterprise has multiple employees, with employee information including name, email, password, identification number, role, creation time, and update time.\nEach role has different hourly wages, daily working hours, and lunchtime.\nEach employee has multiple attendance records, with attendance record information including check-in time, remarks, and check-in location.\nAdditionally, employees can create to-do items, with to-do item information including task description, completion status, creation time, and update time.", "answer": "CREATE TABLE enterprise (\n    Creation_Time DATETIME,\n    Enterprise_ID INTEGER PRIMARY KEY,\n    Enterprise_Name VARCHAR(255)\n);\n\nCREATE TABLE role (\n    Daily_Working_Hours FLOAT,\n    Hourly_Wage FLOAT,\n    Lunch_Time VARCHAR(255),\n    Role_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE employee (\n    Creation_Time DATETIME,\n    Email VARCHAR(255),\n    Employee_ID INTEGER PRIMARY KEY,\n    Enterprise_ID INTEGER NOT NULL,\n    Identification_Number INTEGER,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Role_ID INTEGER NOT NULL,\n    Update_Time DATETIME,\n    FOREIGN KEY (Enterprise_ID) REFERENCES enterprise(Enterprise_ID),\n    FOREIGN KEY (Role_ID) REFERENCES role(Role_ID)\n);\n\nCREATE TABLE attendance_record (\n    Check-in_Location VARCHAR(255),\n    Check-in_Time DATETIME,\n    Employee_ID INTEGER NOT NULL,\n    Remarks INTEGER,\n    PRIMARY KEY (Employee_ID, Check-in_Time),\n    FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID)\n);\n\nCREATE TABLE to-do_item (\n    Completion_Status VARCHAR(255),\n    Creation_Time DATETIME,\n    Employee_ID INTEGER NOT NULL,\n    Task_Description VARCHAR(255),\n    Update_Time DATETIME,\n    PRIMARY KEY (Employee_ID, Creation_Time),\n    FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID)\n);", "remarks": "删除了实体中的冗余的关系属性，删除了考勤记录和代办事项schema中冗余的主键，修改了schema的表名", "assign_to": "dyq", "assign_to_round2": "zp", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0a13602ec03b41a97f", "question": "The database is a hospital management system, with primary functions including managing information of doctors, departments, wards, patients, and medicines, as well as recording patient and doctor visit records and medicine dispensing information. The system supports the management of various personnel within the hospital, records the patient diagnosis process, and tracks the usage of medications.\n\nThe system records all the doctors' information within the hospital, including the doctors' basic data and the department to which they belong. The system records doctor's ID, name, gender, title, years of service, phone number, and department ID.\n\nThe system records information of various departments within the hospital, including department name, person in charge, and basic department information, such as department ID, department name, total number of personnel, person in charge ID, location, and department phone number.\n\nThe system records the status of various wards within the hospital, including the number of beds and ward levels, such as ward ID, number of beds, ward level, and location.\n\nThe system records patients' basic information, diagnosis information, and ward information. Each patient has a unique ID. The patient's basic information includes patient ID, name, gender, age, contact information, consultation date, diagnosis description, and ward ID.\n\nThe system records information about medicines of the hospital, including medicine name, inventory quantity, and price, such as medicine ID, medicine name, inventory quantity, sales price, and remarks.\n\nThe system records the consultation information between patients and doctors, including consultation time, diagnosis description, and treatment results, such as patient ID, doctor ID, consultation time, diagnosis description, treatment results, and remarks.\n\nThe system records each patient's medication retrieval information, including medicine name, quantity retrieved, and retrieval time, such as patient ID, medicine ID, retrieval time, and retrieval quantity.", "answer": "CREATE TABLE Ward (\n    Location VARCHAR(255),\n    Number_of_Beds INTEGER,\n    Ward_ID INTEGER PRIMARY KEY,\n    Ward_Level INTEGER\n);\n\nCREATE TABLE Medicine (\n    Inventory_Quantity INTEGER,\n    Medicine_ID INTEGER PRIMARY KEY,\n    Medicine_Name VARCHAR(255),\n    Remarks VARCHAR(255),\n    Sales_Price FLOAT\n);\n\nCREATE TABLE Patient (\n    Age INTEGER,\n    Contact_Information VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Patient_ID INTEGER PRIMARY KEY,\n    Ward_ID INTEGER NOT NULL,\n    FOREIGN KEY (Ward_ID) REFERENCES Ward(Ward_ID)\n);\n\nCREATE TABLE Medication_Dispensing (\n    Medication_Retrieval_Time DATETIME,\n    Medicine_ID INTEGER NOT NULL,\n    Patient_ID INTEGER NOT NULL,\n    Quantity_Retrieved INTEGER,\n    PRIMARY KEY (Patient_ID, Medicine_ID, Medication_Retrieval_Time),\n    FOREIGN KEY (Medicine_ID) REFERENCES Medicine(Medicine_ID),\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);\n\nCREATE TABLE Doctor (\n    Department_ID INTEGER NOT NULL,\n    Gender VARCHAR(255),\n    ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Title VARCHAR(255),\n    Years_of_Service INTEGER,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Department_Phone_Number VARCHAR(255),\n    Location VARCHAR(255),\n    Person_in_Charge_ID INTEGER NOT NULL,\n    Total_Number_of_Personnel INTEGER,\n    FOREIGN KEY (Person_in_Charge_ID) REFERENCES Doctor(ID)\n);\n\nCREATE TABLE Consultation_Record (\n    Consultation_Time DATETIME,\n    Diagnosis_Description VARCHAR(255),\n    Doctor_ID INTEGER NOT NULL,\n    Patient_ID INTEGER NOT NULL,\n    Remarks VARCHAR(255),\n    Treatment_Results VARCHAR(255),\n    PRIMARY KEY (Patient_ID, Doctor_ID, Consultation_Time),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(ID),\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);", "remarks": "CS 2025/1/16\nZP：修改了就诊和配药的关系约束，删除了实体中冗余的关系属性，修改了schema的表名", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0a13602ec03b41a98b", "question": "This is a C2C (Consumer-to-Consumer) second-hand goods trading platform, aimed at providing users with a safe and convenient environment for trading used items. For user account management, the system supports quick registration and login through phone numbers and email, provides real-name authentication functionality requiring users to upload ID card photos (front and back) and complete facial recognition to ensure transaction security, supports personal information maintenance including avatar, nickname, gender, age, location, personal introduction and other basic information, and provides account security settings including phone binding and email binding. For product management, the system supports users in publishing second-hand product information, including product title, detailed description, condition description, original price, selling price, etc., provides product content editing functionality with support for uploading up to 9 actual product photos, supports setting product categories, transaction location, price negotiation range, validity period, etc., and manages real-time product status including on sale, sold, removed, pending review, etc. For transaction management, the system records buyer user information and product information, transaction status, transaction time, transaction amount, transaction location, transaction method, and transaction evaluation.", "answer": "CREATE TABLE User (\n    Age INTEGER,\n    Avatar_URL VARCHAR(255),\n    Email VARCHAR(255),\n    Gender VARCHAR(255),\n    Location VARCHAR(255),\n    Nickname VARCHAR(255),\n    Personal_introduction VARCHAR(255),\n    Phone_number VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Product (\n    Condition_description VARCHAR(255),\n    Detailed_description VARCHAR(255),\n    Original_price FLOAT,\n    Price_negotiation_range VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Product_category VARCHAR(255),\n    Product_status VARCHAR(255),\n    Product_title VARCHAR(255),\n    Seller_ID INTEGER NOT NULL,\n    Selling_price FLOAT,\n    Transaction_location VARCHAR(255),\n    Validity_period VARCHAR(255),\n    FOREIGN KEY (Seller_ID) REFERENCES User(User_ID)\n);\n\nCREATE TABLE Transaction (\n    Buyer_ID INTEGER NOT NULL,\n    Product_ID INTEGER NOT NULL,\n    Transaction_amount FLOAT,\n    Transaction_evaluation VARCHAR(255),\n    Transaction_location VARCHAR(255),\n    Transaction_method VARCHAR(255),\n    Transaction_status VARCHAR(255),\n    Transaction_time DATETIME,\n    PRIMARY KEY (Buyer_ID, Product_ID, Transaction_time),\n    FOREIGN KEY (Buyer_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);\n\nCREATE TABLE Product_image (\n    Image_ID INTEGER PRIMARY KEY,\n    Image_URL VARCHAR(255),\n    Product_ID INTEGER NOT NULL,\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)\n);", "remarks": "修改了无效的需求描述，修改了schema的表名", "assign_to": "hzb", "assign_to_round2": "zp", "domain": ["批发和零售业", "互联网零售业"]}
{"id": "67552f0a13602ec03b41a9bb", "question": "The database shall serve as a school sports event management system, managing information on various events, participants, results, and awards. It includes the following information:  \n\nRecords of participating students' basic information: Student ID, Name, Gender, Grade, Class, Contact Information  \n\nRecords of various school sports events: Event ID, Event Name, Event Type (such as running, long jump, throwing, etc.), Event Time  \n\nRecords of students registering for events: Student ID, Event ID, Registration Time  \n\nRecords of students' results in each event: Student ID, Event ID, Result, Event Date", "answer": "CREATE TABLE Student (\n    Class INTEGER,\n    Contact_Information VARCHAR(255),\n    Gender VARCHAR(255),\n    Grade INTEGER,\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Event (\n    Competition_Rules VARCHAR(255),\n    Event_ID INTEGER PRIMARY KEY,\n    Event_Time DATETIME,\n    Name VARCHAR(255),\n    Number_of_Participants INTEGER\n);\n\nCREATE TABLE Competition_Status (\n    Competition_Result VARCHAR(255),\n    Event_ID INTEGER NOT NULL,\n    Registration_Time DATETIME,\n    Student_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Event_ID, Registration_Time),\n    FOREIGN KEY (Event_ID) REFERENCES Event(Event_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)\n);", "remarks": "CS 2025/1/16\nZP：修改了不合理的需求描述，删除了冗余的关系和schema，修改了schema的表名", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9d6", "question": "This is a student management system. The system manages student information (student ID, name, gender, age, etc.), class information (class name, major, classroom, etc.), sports team information (team name, activity time, coach, etc.), and dormitory information (dormitory number, building number, administrator, number of residents, etc.). The system also maintains the relationships between students and classes, students and sports teams, and students and dormitories.\n", "answer": "CREATE TABLE Class (\n    Class_ID INTEGER PRIMARY KEY,\n    Class_name VARCHAR(255),\n    Classroom VARCHAR(255),\n    Major VARCHAR(255)\n);\n\nCREATE TABLE Sports_team (\n    Activity_time DATETIME,\n    Coach VARCHAR(255),\n    Team_ID INTEGER PRIMARY KEY,\n    Team_name VARCHAR(255)\n);\n\nCREATE TABLE Dormitory (\n    Administrator VARCHAR(255),\n    Building_number INTEGER,\n    Dormitory_number INTEGER,\n    Number_of_residents INTEGER,\n    PRIMARY KEY (Dormitory_number, Building_number)\n);\n\nCREATE TABLE Student (\n    Age INTEGER,\n    Building_number INTEGER NOT NULL,\n    Class_ID INTEGER NOT NULL,\n    Dormitory_number INTEGER NOT NULL,\n    Gender BOOL,\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Building_number) REFERENCES Dormitory(Building_number),\n    FOREIGN KEY (Class_ID) REFERENCES Class(Class_ID),\n    FOREIGN KEY (Dormitory_number) REFERENCES Dormitory(Dormitory_number)\n);\n\nCREATE TABLE Team_membership (\n    Student_ID INTEGER NOT NULL,\n    Team_ID INTEGER NOT NULL,\n    PRIMARY KEY (Student_ID, Team_ID),\n    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),\n    FOREIGN KEY (Team_ID) REFERENCES Sports_team(Team_ID)\n);", "remarks": "修改了schema的表名", "assign_to": "hzb", "assign_to_round2": "zp", "domain": ["教育", "教育"]}
{"id": "67552f0a13602ec03b41a9de", "question": "Business Requirements Description:\nThis is a task management system with the following main features:\n1.Task Management:Create, assign, track, and complete tasks.Each task includes:Task ID, Task Name, Task Description, Task Deadline, and Task Progress.Task Type, Task Status, and Task Priority.Each task is assigned to a user.\n2.User Management:Add, delete, and manage users.Each user has a unique User ID, Username, Password, and Email.Each user has a fixed role.\n3.Role Management:Define and assign user roles.Each role includes:Role ID, Role Name, and Role Description.\n4.Task Type Management:Define and manage different task types.Each task type includes:Task Type ID, Task Type Name, and Task Type Description.\n5.Task Status Management:Track task statuses (e.g., To Do, In Progress, Completed), including the status name and description.\n6.Task Priority Management:Set task priorities.Each priority includes:\nTask Priority ID, Task Priority Name, and Task Priority Description.", "answer": "CREATE TABLE Role_Table (\n    Role_Description VARCHAR(255),\n    Role_ID INTEGER PRIMARY KEY,\n    Role_Name VARCHAR(255)\n);\n\nCREATE TABLE Task_Type (\n    Task_Type_Description VARCHAR(255),\n    Task_Type_ID INTEGER PRIMARY KEY,\n    Task_Type_Name VARCHAR(255)\n);\n\nCREATE TABLE Task_Status (\n    Task_Status_Description VARCHAR(255),\n    Task_Status_ID INTEGER PRIMARY KEY,\n    Task_Status_Name VARCHAR(255)\n);\n\nCREATE TABLE Task_Priority (\n    Task_Priority_Description VARCHAR(255),\n    Task_Priority_ID INTEGER PRIMARY KEY,\n    Task_Priority_Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Email VARCHAR(255),\n    Password VARCHAR(255),\n    Role_ID INTEGER NOT NULL,\n    User_ID INTEGER PRIMARY KEY,\n    Username VARCHAR(255),\n    FOREIGN KEY (Role_ID) REFERENCES Role_Table(Role_ID)\n);\n\nCREATE TABLE Task_Table (\n    Assigned_User_ID INTEGER NOT NULL,\n    Task_Deadline DATETIME,\n    Task_Description VARCHAR(255),\n    Task_ID INTEGER PRIMARY KEY,\n    Task_Name VARCHAR(255),\n    Task_Priority_ID INTEGER NOT NULL,\n    Task_Progress VARCHAR(255),\n    Task_Status_ID INTEGER NOT NULL,\n    Task_Type_ID INTEGER NOT NULL,\n    FOREIGN KEY (Assigned_User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Task_Priority_ID) REFERENCES Task_Priority(Task_Priority_ID),\n    FOREIGN KEY (Task_Status_ID) REFERENCES Task_Status(Task_Status_ID),\n    FOREIGN KEY (Task_Type_ID) REFERENCES Task_Type(Task_Type_ID)\n);", "remarks": "修改了schema的表名，删除了1对多关系中的冗余属性", "assign_to": "gcc", "assign_to_round2": "zp", "domain": ["信息传输、软件和信息技术服务业", "软件和信息技术服务业"]}
{"id": "67552f0a13602ec03b41a9fc", "question": "the database is an aircraft information management system, primarily used for managing airlines' aircraft, flights, crew members, maintenance records, and passenger information. the main functions of the system include recording basic aircraft information, flight scheduling, crew allocation, maintenance records; tracking passengers' flight reservations and ticket purchases; providing inquiries into aircraft maintenance history and flight information.\n\nthe system stores basic aircraft information.\nfields: aircraft id, aircraft model, manufacture date, maximum passenger capacity, aircraft status, affiliated airline\nthe system records each aircraft's basic data, such as aircraft model, manufacture date, maximum passenger capacity, current status (e.g., under maintenance, awaiting flight, in-flight), and associates it with the affiliated airline.\n\nthe system stores information of the crew members (including captain, co-pilot, etc.).\nfields: crew member id, name, gender, position, phone\nthe system records crew members' personal information, including name, position, and contact details, facilitating the management of crew members for each flight.\n\nthe system stores basic passenger information.\nfields: passenger id, name, gender, identification number, phone\nthe system records detailed passenger information, such as name, gender, identification number, and contact details, supporting passenger identification management and flight arrangements.\n\nthe system records detailed flight information, including departure and landing times, flight number, etc.\nfields: flight id, aircraft id, responsible captain id, departure airport, landing airport, departure time, landing time\nthis data is used to manage basic flight information, including flight number, departure and landing airports, aircraft id, and flight times, associating the aircraft id with the aircraft table and responsible captain id with the crew member table.\n\nthe system records the maintenance history of aircraft.\nfields: maintenance personnel id, aircraft id, maintenance date, maintenance description, maintenance type\nthis data associates maintenance personnel (crew members) and aircraft, recording maintenance date, maintenance details, etc., to facilitate tracing the maintenance history of aircraft.\n\nthe system records passenger ticket purchase information.\nfields: passenger id, flight id, booking time, seat number, ticket price\nthe system records passenger booking information, including the purchased flight, seat number, ticket price, and booking time, associating passengers with flights.", "answer": "CREATE TABLE Aircraft (\n    Affiliated_Airline VARCHAR(255),\n    Aircraft_ID INTEGER PRIMARY KEY,\n    Aircraft_Model VARCHAR(255),\n    Aircraft_Status VARCHAR(255),\n    Manufacture_Date DATETIME,\n    Maximum_Passenger_Capacity INTEGER\n);\n\nCREATE TABLE Crew_Member (\n    Crew_Member_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone VARCHAR(255),\n    Position VARCHAR(255)\n);\n\nCREATE TABLE Passenger (\n    Gender VARCHAR(255),\n    Identification_Number VARCHAR(255),\n    Name VARCHAR(255),\n    Passenger_ID INTEGER PRIMARY KEY,\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Flight (\n    Aircraft_ID INTEGER NOT NULL,\n    Departure_Airport VARCHAR(255),\n    Departure_Time DATETIME,\n    Flight_ID INTEGER PRIMARY KEY,\n    Landing_Airport VARCHAR(255),\n    Landing_Time DATETIME,\n    Responsible_Captain_ID INTEGER NOT NULL,\n    FOREIGN KEY (Aircraft_ID) REFERENCES Aircraft(Aircraft_ID),\n    FOREIGN KEY (Responsible_Captain_ID) REFERENCES Crew_Member(Crew_Member_ID)\n);\n\nCREATE TABLE Maintenance_Record (\n    Aircraft_ID INTEGER NOT NULL,\n    Maintenance_Date DATETIME,\n    Maintenance_Description VARCHAR(255),\n    Maintenance_Personnel_ID INTEGER NOT NULL,\n    Maintenance_Type VARCHAR(255),\n    PRIMARY KEY (Maintenance_Personnel_ID, Aircraft_ID, Maintenance_Date),\n    FOREIGN KEY (Aircraft_ID) REFERENCES Aircraft(Aircraft_ID),\n    FOREIGN KEY (Maintenance_Personnel_ID) REFERENCES Crew_Member(Crew_Member_ID)\n);\n\nCREATE TABLE Ticket_Order (\n    Booking_Time DATETIME,\n    Flight_ID INTEGER NOT NULL,\n    Passenger_ID INTEGER NOT NULL,\n    Seat_Number INTEGER,\n    Ticket_Price FLOAT,\n    PRIMARY KEY (Passenger_ID, Flight_ID, Booking_Time),\n    FOREIGN KEY (Flight_ID) REFERENCES Flight(Flight_ID),\n    FOREIGN KEY (Passenger_ID) REFERENCES Passenger(Passenger_ID)\n);", "remarks": "CS 2025/1/16\n补充了缺少的关系，修改了schema的表名，购票关系应该为多对多关系，一个乘客可以买多趟航班，一趟航班也有多个乘客\n修改了不合理的需求描述", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["交通运输、仓储和邮政业", "航空运输业"]}
{"id": "67552f0b13602ec03b41aa2e", "question": "The database is a venue management system with primary functions of managing venues, users, equipment, reservations, and venue evaluations. The system allows users to reserve venues, assess venue facilities, and record equipment usage. The database includes the following main tables:\n\nRecords the basic information of venues, including venue name, type, area, address, and more. Key fields include: Venue ID, Name, Type, Area Size, Address, Status, Creation Time, Last Maintenance Time, Maximum Capacity. This data is used to manage the basic information of all venues.\n\nRecords all user information in the system, including user name, phone number, email, and more. Key fields include: User ID, Name, Phone Number, Email, Creation Time. This data is used to manage the identity information of system users.\n\nRecords equipment information related to venues, including equipment name, start usage time, last maintenance time, and the venue to which the equipment belongs. Key fields include: Equipment ID, Equipment Name, Start Usage Time, Last Maintenance Time, Venue ID. This data is used to manage the basic condition of equipment within venues.\n\nRecords user reservation information for venues, including reservation time, status, and reservation cancellation time. Key fields include: User ID, Venue ID, Start Time, End Time, Reservation Status, Reservation Success Time, Reservation Cancellation Time. This data is used to manage users' venue reservation records.\n\nRecords user evaluations of venues, including evaluation content and rating. Key fields include: User ID, Venue ID, Evaluation Time, Evaluation Content, Rating. This data is used to manage user feedback information on venues.", "answer": "CREATE TABLE Venue (\n    Address VARCHAR(255),\n    Area_Size VARCHAR(255),\n    Creation_Time DATETIME,\n    Last_Maintenance_Time DATETIME,\n    Maximum_Capacity INTEGER,\n    Name VARCHAR(255),\n    Status VARCHAR(255),\n    Type VARCHAR(255),\n    Venue_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE User (\n    Creation_Time DATETIME,\n    Email VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number INTEGER,\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Equipment (\n    Equipment_ID INTEGER PRIMARY KEY,\n    Equipment_Name VARCHAR(255),\n    Last_Maintenance_Time DATETIME,\n    Start_Usage_Time DATETIME,\n    Venue_ID INTEGER NOT NULL,\n    FOREIGN KEY (Venue_ID) REFERENCES Venue(Venue_ID)\n);\n\nCREATE TABLE Venue_Reservation (\n    End_Time DATETIME,\n    Reservation_Cancellation_Time DATETIME,\n    Reservation_Status VARCHAR(255),\n    Reservation_Success_Time DATETIME,\n    Start_Time DATETIME,\n    User_ID INTEGER NOT NULL,\n    Venue_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Venue_ID, Reservation_Success_Time),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Venue_ID) REFERENCES Venue(Venue_ID)\n);\n\nCREATE TABLE Venue_Evaluation (\n    Evaluation_Content VARCHAR(255),\n    Evaluation_Time DATETIME,\n    Rating FLOAT,\n    User_ID INTEGER NOT NULL,\n    Venue_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Venue_ID, Evaluation_Time),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID),\n    FOREIGN KEY (Venue_ID) REFERENCES Venue(Venue_ID)\n);", "remarks": "CS 2025/1/17\n修改了不合理的需求描述，删除了预约场地关系中的冗余主键，修改了schema的表名", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["租赁和商务服务业", "商务服务业"]}
{"id": "67552f0b13602ec03b41aa60", "question": "the database is a material terminal distribution management system, with its primary functions being the efficient management of material storage, dispatch, inventory management, and transportation processes. the system can record basic information of materials, inventory status, warehouse information, transportation vehicles, and driver situations, while also tracking the history of material transportation and storage to ensure controllable material circulation. below is the database table design and business requirements description of the system:\n\n\nfunction: used to record the basic information of all materials. material id is the unique identifier. each material includes information such as name, type, specification, weight, volume, and source location for management and tracking purposes.\n\n\nfunction: used to record information about the warehouses where materials are stored. includes warehouse id, name, address, type (e.g., storage, sorting), maximum capacity, current inventory level, and remaining capacity, helping manage the storage capacity and usage of warehouses.\n\n\nfunction: records information about all vehicles used for transporting materials, including vehicle type (e.g., truck, trailer), license plate number, maximum load, current load, and assigned driver id. this table helps manage transportation tools and their status.\n\n\nfunction: records information about all drivers, including name, gender, phone number, driving license number, and age.\n\nfunction: used to record the storage status of materials, including material id, the warehouse they are in, storage time, storage quantity, and notes, helping trace the storage history of materials and the increase in current inventory.\n\n\nfunction: records the dispatch status of materials, including material id, dispatch time, dispatch quantity, the warehouse they are in, and notes, used to track the outflow process of materials and ensure the accuracy of material inventory.\n\n\nfunction: records information for each material transportation task, including the materials transported, the vehicle used, transportation start time, destination, and driver id. this table is used to manage the transportation process of materials, ensuring materials arrive at their destination on time.", "answer": "CREATE TABLE Material (\n    Material_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Source_Location VARCHAR(255),\n    Specification VARCHAR(255),\n    Type VARCHAR(255),\n    Volume FLOAT,\n    Weight FLOAT\n);\n\nCREATE TABLE Warehouse (\n    Address VARCHAR(255),\n    Current_Inventory_Level INTEGER,\n    Maximum_Capacity FLOAT,\n    Name VARCHAR(255),\n    Remaining_Capacity FLOAT,\n    Type VARCHAR(255),\n    Warehouse_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Driver (\n    Age INTEGER,\n    Driver_ID INTEGER PRIMARY KEY,\n    Driving_License_Number VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255)\n);\n\nCREATE TABLE Material_Storage (\n    Material_ID INTEGER NOT NULL,\n    Notes VARCHAR(255),\n    Storage_Quantity INTEGER,\n    Storage_Time DATETIME,\n    Warehouse_ID INTEGER NOT NULL,\n    PRIMARY KEY (Material_ID, Warehouse_ID, Storage_Time),\n    FOREIGN KEY (Material_ID) REFERENCES Material(Material_ID),\n    FOREIGN KEY (Warehouse_ID) REFERENCES Warehouse(Warehouse_ID)\n);\n\nCREATE TABLE Material_Dispatch (\n    Dispatch_Quantity INTEGER,\n    Dispatch_Time DATETIME,\n    Material_ID INTEGER NOT NULL,\n    Notes VARCHAR(255),\n    Warehouse_ID INTEGER NOT NULL,\n    PRIMARY KEY (Material_ID, Warehouse_ID, Dispatch_Time),\n    FOREIGN KEY (Material_ID) REFERENCES Material(Material_ID),\n    FOREIGN KEY (Warehouse_ID) REFERENCES Warehouse(Warehouse_ID)\n);\n\nCREATE TABLE Vehicle (\n    Assigned_Driver_ID INTEGER NOT NULL,\n    Current_Load FLOAT,\n    License_Plate_Number VARCHAR(255),\n    Maximum_Load FLOAT,\n    Vehicle_ID INTEGER PRIMARY KEY,\n    Vehicle_Type VARCHAR(255),\n    FOREIGN KEY (Assigned_Driver_ID) REFERENCES Driver(Driver_ID)\n);\n\nCREATE TABLE Material_Transportation (\n    Destination VARCHAR(255),\n    Driver_ID INTEGER NOT NULL,\n    Material_ID INTEGER NOT NULL,\n    Transportation_Start_Time DATETIME,\n    Vehicle_ID INTEGER NOT NULL,\n    PRIMARY KEY (Vehicle_ID, Material_ID, Transportation_Start_Time),\n    FOREIGN KEY (Driver_ID) REFERENCES Driver(Driver_ID),\n    FOREIGN KEY (Material_ID) REFERENCES Material(Material_ID),\n    FOREIGN KEY (Vehicle_ID) REFERENCES Vehicle(Vehicle_ID)\n);", "remarks": "CS 2025/1/17\n修改了不合理的需求描述，补充了缺少的关系，修改了schema的表名\n特别说明：默认运输的司机不一定是车辆的责任司机", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["交通运输、仓储和邮政业", "装卸搬运和仓储业"]}
{"id": "67552f0b13602ec03b41aa64", "question": "The database is utilized for managing data on the network cultural relics protection platform. Its primary functions include recording basic relic information, repair history, exhibition information, and environmental monitoring data. Through the management and association of these data, the full lifecycle protection of cultural relics in a digital environment is ensured.\n\n1. Cultural Relic  \n   Function: Store basic information of the cultural relic.  \n   Fields: Cultural Relic ID, Name, Year, Category, Excavation Site  \n   Business Requirement: This data is used to store the basic information of all cultural relics on the platform, such as name and repair history, for the purpose of querying and management.\n\n2. Staff  \n   Function: Record information of staff on the cultural relics protection platform.  \n   Fields: Staff ID, Name, Phone Number, Gender  \n   Business Requirement: This data is used to record information of staff related to cultural relic protection, aiding administrators in tracking staff identity and contact information.\n\n3. Cultural Relic Exhibition  \n   Function: Record exhibition information of the cultural relic.  \n   Fields: Cultural Relic ID, Exhibition Start Time, Exhibition End Time, Exhibition Location  \n   Business Requirement: Record cultural relic exhibition events, including the time and location of the exhibition, facilitating management and querying of the cultural relic's exhibition history.\n\n4. Cultural Relic Repair  \n   Function: Record repair history of the cultural relic.  \n   Fields: Staff ID, Cultural Relic ID, Repair Start Time, Repair End Time, Repair Method, Notes  \n   Business Requirement: Used to record each repair activity of the cultural relic, including repair start and end times, repair method, and repairing staff, aiding cultural relic administrators in tracking the repair history.\n\n5. Cultural Relic Monitoring Record  \n   Function: Record environmental monitoring data of the cultural relic.  \n   Fields: Cultural Relic ID, Monitoring Time, Person in Charge ID, Temperature, Humidity, Light, Air Quality, Notes  \n   Business Requirement: Used to record the environmental data (such as temperature, humidity, light, etc.) of the cultural relic in specific time periods, ensuring the preservation environment of the cultural relic meets standards and documenting monitoring history.", "answer": "CREATE TABLE Cultural_Relic (\n    Category VARCHAR(255),\n    Cultural_Relic_ID INTEGER PRIMARY KEY,\n    Excavation_Site VARCHAR(255),\n    Last_Repair_Time DATETIME,\n    Name VARCHAR(255),\n    Year INTEGER\n);\n\nCREATE TABLE Staff (\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Phone_Number VARCHAR(255),\n    Staff_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Cultural_Relic_Exhibition (\n    Cultural_Relic_ID INTEGER,\n    Exhibition_End_Time DATETIME,\n    Exhibition_Location VARCHAR(255),\n    Exhibition_Start_Time DATETIME,\n    PRIMARY KEY (Cultural_Relic_ID, Exhibition_Start_Time)\n);\n\nCREATE TABLE Cultural_Relic_Repair_Record (\n    Cultural_Relic_ID INTEGER NOT NULL,\n    Notes VARCHAR(255),\n    Repair_End_Time DATETIME,\n    Repair_Method VARCHAR(255),\n    Repair_Start_Time DATETIME,\n    Staff_ID INTEGER NOT NULL,\n    PRIMARY KEY (Staff_ID, Cultural_Relic_ID, Repair_Start_Time),\n    FOREIGN KEY (Cultural_Relic_ID) REFERENCES Cultural_Relic(Cultural_Relic_ID),\n    FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID)\n);\n\nCREATE TABLE Cultural_Relic_Monitoring_Record (\n    Air_Quality INTEGER,\n    Cultural_Relic_ID INTEGER NOT NULL,\n    Humidity FLOAT,\n    Light FLOAT,\n    Monitoring_Time DATETIME,\n    Notes VARCHAR(255),\n    Person_In_Charge_ID INTEGER NOT NULL,\n    Temperature FLOAT,\n    PRIMARY KEY (Cultural_Relic_ID, Monitoring_Time, Person_In_Charge_ID),\n    FOREIGN KEY (Cultural_Relic_ID) REFERENCES Cultural_Relic(Cultural_Relic_ID),\n    FOREIGN KEY (Person_In_Charge_ID) REFERENCES Staff(Staff_ID)\n);", "remarks": "CS 2025/1/17\n修改了文物修复和监测的关系约束，补充了缺少的schema，修改了不合理的需求描述", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0b13602ec03b41aa68", "question": "The university's digitized archive management system shall store and manage basic information such as student records, faculty and staff records, and research project records. It shall provide users with flexible search and query functions while meeting the requirements for security and stability in terms of access control, operation auditing, and data backup. The system shall record information such as name, major, and grades in student records, and store personal information, job title, and work history of teachers in faculty and staff records. For research projects, the system shall record information such as project name, principal investigator, funding, and research outcomes. Users shall be granted different system access permissions based on their roles, and the system shall perform granular management of these permissions and retain user operation logs for auditing purposes. To ensure the security of records, the system shall perform regular backups and support incremental or differential backup mechanisms for rapid recovery in case of failures.", "answer": "CREATE TABLE User (\n    Account VARCHAR(255) PRIMARY KEY,\n    Password VARCHAR(255),\n    Role VARCHAR(255)\n);\n\nCREATE TABLE Student (\n    Average_Grade FLOAT,\n    Major VARCHAR(255),\n    Name VARCHAR(255),\n    Student_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Teacher (\n    Age INTEGER,\n    Contact_Information VARCHAR(255),\n    Gender BOOL,\n    Job_Title VARCHAR(255),\n    Name VARCHAR(255),\n    Teacher_ID INTEGER PRIMARY KEY,\n    Work_History VARCHAR(255)\n);\n\nCREATE TABLE Log_Information (\n    Detailed_Description VARCHAR(255),\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    User_Account VARCHAR(255) NOT NULL,\n    PRIMARY KEY (User_Account, Operation_Time),\n    FOREIGN KEY (User_Account) REFERENCES User(Account)\n);\n\nCREATE TABLE Research_Project (\n    Funding FLOAT,\n    Outcome VARCHAR(255),\n    Project_ID INTEGER PRIMARY KEY,\n    Project_Name VARCHAR(255),\n    Responsible_Teacher INTEGER NOT NULL,\n    FOREIGN KEY (Responsible_Teacher) REFERENCES Teacher(Teacher_ID)\n);\n\nCREATE TABLE Teacher_Responsible_for_Research_Project (\n    Project_ID INTEGER NOT NULL,\n    Teacher_ID INTEGER NOT NULL,\n    PRIMARY KEY (Project_ID, Teacher_ID),\n    FOREIGN KEY (Project_ID) REFERENCES Research_Project(Project_ID),\n    FOREIGN KEY (Teacher_ID) REFERENCES Teacher(Teacher_ID)\n);", "remarks": "", "assign_to": "zp", "assign_to_round2": "cs", "domain": ["教育", "教育"]}
{"id": "67552f0b13602ec03b41aa95", "question": "This is an online bookstore backend database system. For member management, the system records basic information for each member, including unique member ID, username, password, name, address, postal code, phone number, consumption amount and points. For book management, the system records basic information for each book, including unique book ID, category name, book title, author, publisher, publication date, ISBN and price. For order management, the system records basic information for each order, including unique order ID, member username, sales amount, order date and shipping date. Each order can contain multiple books, and the system needs to record the purchase quantity for each book.", "answer": "CREATE TABLE Member (\n    Address VARCHAR(255),\n    Consumption_amount INTEGER,\n    Member_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Phone VARCHAR(255),\n    Points INTEGER,\n    Postal_code VARCHAR(255),\n    Username VARCHAR(255)\n);\n\nCREATE TABLE Book (\n    Author VARCHAR(255),\n    Book_ID INTEGER PRIMARY KEY,\n    Book_title VARCHAR(255),\n    Category_name VARCHAR(255),\n    ISBN VARCHAR(255),\n    Price FLOAT,\n    Publication_date DATETIME,\n    Publisher VARCHAR(255)\n);\n\nCREATE TABLE Order (\n    Member_ID INTEGER NOT NULL,\n    Order_ID INTEGER PRIMARY KEY,\n    Order_date DATETIME,\n    Sales_amount INTEGER,\n    Shipping_date DATETIME,\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID)\n);\n\nCREATE TABLE Order_book (\n    Book_ID INTEGER NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    PRIMARY KEY (Order_ID, Book_ID),\n    FOREIGN KEY (Book_ID) REFERENCES Book(Book_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);\n\nCREATE TABLE Place_order (\n    Member_ID INTEGER NOT NULL,\n    Order_ID INTEGER NOT NULL,\n    PRIMARY KEY (Member_ID, Order_ID),\n    FOREIGN KEY (Member_ID) REFERENCES Member(Member_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Order(Order_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "cs", "domain": ["文化、体育和娱乐业", "文化艺术业"]}
{"id": "67552f0b13602ec03b41aaad", "question": "The database is an inpatient information management system used to record inpatient information, medical processes, and manage related resources (such as wards, departments, doctors, etc.). The system assists hospitals in efficiently managing patient hospitalization status, doctors' treatment processes, ward resource usage, and other information to ensure smooth medical operations. The system primarily includes the following tables:\n\n1. Patient  \nFields: Patient ID, Name, Gender, Age, Hospitalization Time, Ward, Phone, Identity Card Number, Medical Record Number, Emergency Contact Phone  \nBusiness Requirement: Record basic patient information, including patient name, contact information, hospitalization time, and ward, etc. Through this table, hospitals can manage and query basic patient details to facilitate subsequent treatment, medical advice, and tracking of medical records.\n\n2. Department  \nFields: Department ID, Department Name, Department Head ID, Contact Phone, Location  \nBusiness Requirement: Record information of each hospital department, including department name, head, and department location, etc. Through this table, hospitals can manage departments and allocate resources such as doctors and nurses.\n\n3. Doctor  \nFields: Doctor ID, Name, Gender, Contact Phone, Title, Department ID  \nBusiness Requirement: Record doctor information, including name, title, contact information, and department affiliation. The doctor table is associated with the department table to help hospitals manage doctor resources and arrange patient consultations.\n\n4. Ward  \nFields: Ward ID, Location, Head ID, Bed Count, Remaining Bed Count  \nBusiness Requirement: Record basic ward information, including ward location, head (doctor), bed count, and remaining bed count. Through this table, hospitals can efficiently manage ward resources, allocate beds reasonably, and ensure patients can be accommodated promptly.\n\n5. Nurse  \nFields: Nurse ID, Name, Gender, Phone, Department ID, Duties, Title  \nBusiness Requirement: Record basic nurse information, including name, contact information, title, duties, and department affiliation. The nurse table is associated with the department table for managing nurse allocation, duties, and patient care relationships.", "answer": "CREATE TABLE Patient (\n    Age INTEGER,\n    Emergency_Contact_Phone VARCHAR(255),\n    Gender VARCHAR(255),\n    Identity_Card_Number VARCHAR(255),\n    Medical_Record_Number VARCHAR(255),\n    Name VARCHAR(255),\n    Patient_ID INTEGER PRIMARY KEY,\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Department (\n    Contact_Phone VARCHAR(255),\n    Department_Head_ID INTEGER NOT NULL,\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Location VARCHAR(255),\n    FOREIGN KEY (Department_Head_ID) REFERENCES Doctor(Doctor_ID)\n);\n\nCREATE TABLE Doctor (\n    Contact_Phone VARCHAR(255),\n    Department_ID INTEGER NOT NULL,\n    Doctor_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Title VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Ward (\n    Bed_Count INTEGER,\n    Head_ID INTEGER NOT NULL,\n    Location VARCHAR(255),\n    Remaining_Bed_Count INTEGER,\n    Ward_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Head_ID) REFERENCES Doctor(Doctor_ID)\n);\n\nCREATE TABLE Hospitalization_Record (\n    Attending_Physician_ID INTEGER NOT NULL,\n    Bed_Number VARCHAR(255),\n    Discharge_Time DATETIME,\n    Hospitalization_Start_Time DATETIME,\n    Patient_ID INTEGER NOT NULL,\n    Ward_ID INTEGER NOT NULL,\n    PRIMARY KEY (Patient_ID, Ward_ID, Hospitalization_Start_Time),\n    FOREIGN KEY (Attending_Physician_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID),\n    FOREIGN KEY (Ward_ID) REFERENCES Ward(Ward_ID)\n);\n\nCREATE TABLE Registration_Record (\n    Consultation_Time DATETIME,\n    Diagnosis_Result VARCHAR(255),\n    Doctor_ID INTEGER NOT NULL,\n    Patient_ID INTEGER NOT NULL,\n    PRIMARY KEY (Patient_ID, Doctor_ID, Consultation_Time),\n    FOREIGN KEY (Doctor_ID) REFERENCES Doctor(Doctor_ID),\n    FOREIGN KEY (Patient_ID) REFERENCES Patient(Patient_ID)\n);\n\nCREATE TABLE Nurse (\n    Department_ID INTEGER NOT NULL,\n    Duties VARCHAR(255),\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Nurse_ID INTEGER PRIMARY KEY,\n    Phone VARCHAR(255),\n    Title VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);", "remarks": "CS 2025/1/19\n修改了需求描述，删除了实体冗余属性，修改了实体名，修改了关系的约束，修改了schema的表名", "assign_to": "cs", "assign_to_round2": "zp", "domain": ["卫生和社会工作", "卫生"]}
{"id": "67552f0b13602ec03b41aab9", "question": "System: Parking lot management system\n\nDescription of required functions:\n1. Parking space management:\nThe system queries available parking spaces, and when a vehicle enters, it marks the parking space as occupied.\nWhen a vehicle exits from the exit, it marks the parking space as empty.\n\n2. Parking space owner management:\nThe system needs to record the information of certain car owners who have purchased parking spaces, including their license plate number, name, and contact information.", "answer": "CREATE TABLE Vehicle_information_table (\n    Contact_information VARCHAR(255),\n    License_plate_number VARCHAR(255) PRIMARY KEY,\n    Owner_name VARCHAR(255)\n);\n\nCREATE TABLE Parking_space_table (\n    Owner VARCHAR(255) NOT NULL,\n    Parking_space_number INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    FOREIGN KEY (Owner) REFERENCES Vehicle_information_table(License_plate_number)\n);", "remarks": "修改了需求描述，添加了合适的实体和关系约束", "assign_to": "szh", "assign_to_round2": "zp", "domain": ["居民服务、修理和其他服务业", "其他服务业"]}
{"id": "67552f0b13602ec03b41aacf", "question": "System name: Community property fee management system\n\nDemand function description:\n1. Owner management:\nAdd owner record: record the basic information of the owner, including owner number, name, room number, house area, work unit, contact number, etc.\nQuery owner information: query the owner's information according to the room number.\n\n2. Department management:\nAdd department record: record the basic information of the department, including department number, department name, department head, department phone number, etc.\nQuery department information: query department information according to department number.\n\n3. Employee management:\nAdd employee record: record the basic information of employees, including employee number, name, date of birth, gender, address, contact number, department number, position and password, etc.\nQuery employee information: query employee information according to employee number.\nPermission management: employees can have different permissions according to their positions. Employees with the position of \"Manager\" can change the information of employees in this department, and employees with the position of \"Charge\" can only perform charging operations.\n\n4. Charge management:\nRecord charge information: including room number, owner number, charge date, charge type, quantity, charge amount, employee number, etc.\nGenerate charge slip: Generate charge slip based on charge information and record charge status.", "answer": "CREATE TABLE Owner_Table (\n    Contact_Number VARCHAR(255),\n    Employer VARCHAR(255),\n    House_Area FLOAT,\n    Name VARCHAR(255),\n    Owner_ID INTEGER PRIMARY KEY,\n    Room_Number VARCHAR(255)\n);\n\nCREATE TABLE Department_Table (\n    Department_Head VARCHAR(255),\n    Department_ID INTEGER PRIMARY KEY,\n    Department_Name VARCHAR(255),\n    Department_Phone VARCHAR(255)\n);\n\nCREATE TABLE Employee_Table (\n    Address VARCHAR(255),\n    Contact_Number VARCHAR(255),\n    Date_of_Birth DATETIME,\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Gender VARCHAR(255),\n    Name VARCHAR(255),\n    Password VARCHAR(255),\n    Position VARCHAR(255),\n    FOREIGN KEY (Department_ID) REFERENCES Department_Table(Department_ID)\n);\n\nCREATE TABLE Charge_Table (\n    Charge_Amount INTEGER,\n    Charge_Date DATETIME,\n    Charge_Type VARCHAR(255),\n    Employee_ID INTEGER NOT NULL,\n    Owner_ID INTEGER NOT NULL,\n    Quantity INTEGER,\n    Room_Number VARCHAR(255),\n    PRIMARY KEY (Room_Number, Owner_ID, Charge_Date),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee_Table(Employee_ID),\n    FOREIGN KEY (Owner_ID) REFERENCES Owner_Table(Owner_ID)\n);", "remarks": "删除了实体中的冗余属性，修改了schema的表名", "assign_to": "szh", "assign_to_round2": "zp", "domain": ["居民服务、修理和其他服务业", "居民服务业"]}
{"id": "67552f0b13602ec03b41ab03", "question": "Business Requirements:\n1.Customer: Each customer needs to record their basic information, including customer ID, name, ID number, and contact phone number.\n2.Account: Each customer can have multiple accounts. Each account needs to record the account number, the customer ID associated with the account, and the account balance.\n3.Transaction: Each account can perform multiple transactions. Each transaction record needs to contain a transaction ID, the associated account number, transaction type (such as deposit, withdrawal, etc.), transaction amount, transaction time, and transaction status. Each account can have multiple transactions, recording every transaction for each account.", "answer": "CREATE TABLE Customer (\n    Contact_Phone VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    ID_Number INTEGER,\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Account (\n    Account_Number VARCHAR(255) PRIMARY KEY,\n    Balance INTEGER,\n    Customer_ID INTEGER NOT NULL,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Transaction (\n    Account_Number VARCHAR(255) NOT NULL,\n    Transaction_Amount FLOAT,\n    Transaction_ID INTEGER PRIMARY KEY,\n    Transaction_Status VARCHAR(255),\n    Transaction_Time DATETIME,\n    Transaction_Type VARCHAR(255),\n    FOREIGN KEY (Account_Number) REFERENCES Account(Account_Number)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0b13602ec03b41ab0a", "question": "Design a voting management system:\nVoter Management: Each individual can be a legitimate voter or an invalid voter. Each legitimate voter must register their voting area (i.e., district) through the system. Each legitimate voter can only register in one district.\nDistrict Management: The district to which a voter belongs is determined by their residential address. An address can be a town or a city. Some districts may include multiple towns; whereas some larger cities may also contain multiple districts.\n", "answer": "CREATE TABLE Constituency (\n    Constituency_ID INTEGER PRIMARY KEY,\n    Description VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE District (\n    Constituency_ID INTEGER NOT NULL,\n    District_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Type VARCHAR(255),\n    FOREIGN KEY (Constituency_ID) REFERENCES Constituency(Constituency_ID)\n);\n\nCREATE TABLE Address (\n    Address_ID INTEGER PRIMARY KEY,\n    District_ID INTEGER NOT NULL,\n    Street VARCHAR(255),\n    FOREIGN KEY (District_ID) REFERENCES District(District_ID)\n);\n\nCREATE TABLE Voter (\n    Address_ID INTEGER NOT NULL,\n    Name VARCHAR(255),\n    Status VARCHAR(255),\n    Voter_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Address_ID) REFERENCES Address(Address_ID)\n);", "remarks": "修改了所有关系的约束", "assign_to": "dyq", "assign_to_round2": "zp", "domain": ["公共管理、社会保障和社会组织", "国家机构"]}
{"id": "67552f0b13602ec03b41ab15", "question": "System: Securities Trading Platform\nFunctional Requirements:\n1.Account Opening: Based on the account opening information submitted by the customer service assistant, the system will open an account and store the customer information in the customer records, while the account information (such as balance) will be stored in the account records. Customer information includes Customer ID, Name, Contact Number, Email, and Account Opening Date. The account includes a unique Account ID, the Customer ID of the account holder, and the balance. Each customer can apply for multiple accounts.\n2.Transaction: Customers can deposit money into their account, and the system will update the account balance based on the deposit amount. Customers can also withdraw money from their account, and the system will update the account balance based on the withdrawal amount. Therefore, the transaction process of each customer needs to be recorded. Each customer can create multiple transaction records. Each record includes a Transaction ID, Customer ID, Transaction Type, Transaction Amount, Transaction Time, and Transaction Status.\n", "answer": "CREATE TABLE Customer (\n    Account_Opening_Date DATETIME,\n    Contact_Number VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Email VARCHAR(255),\n    Name VARCHAR(255)\n);\n\nCREATE TABLE Account (\n    Account_ID INTEGER PRIMARY KEY,\n    Balance VARCHAR(255),\n    Customer_ID INTEGER NOT NULL,\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Transaction (\n    Customer_ID INTEGER NOT NULL,\n    Transaction_Amount INTEGER,\n    Transaction_ID INTEGER PRIMARY KEY,\n    Transaction_Status VARCHAR(255),\n    Transaction_Time DATETIME,\n    Transaction_Type VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);", "remarks": "修改了关系类型，修改了schema表名", "assign_to": "gcc", "assign_to_round2": "zp", "domain": ["金融业", "货币金融服务"]}
{"id": "67552f0b13602ec03b41ab25", "question": "This is a bike-sharing management system. For user management, the system records basic information for each user, including unique phone number, verification code, and credit status. After registration, users can view available bikes nearby. For bike management, the system records basic information for each bike, including unique bike ID, QR code, unlock password, location information and bike status. For trip management, when users obtain the unlock password by scanning QR code or manually entering the code, the system unlocks the bike and starts recording the trip, including start time, end time, riding trajectory and other information. During the ride, the bike periodically uploads location to update trip information. After users end their trips, the system automatically calculates fees based on billing rules and records payment status. Users can view their trip list and detailed information, and can also report bike malfunctions. Merchants can manage bike information, set billing rules, monitor bike status, malfunctions and trips, and manage user credit and status.", "answer": "CREATE TABLE User (\n    Credit_status VARCHAR(255),\n    Phone_number VARCHAR(255) PRIMARY KEY,\n    Verification_code VARCHAR(255)\n);\n\nCREATE TABLE Bike (\n    Bike_ID INTEGER PRIMARY KEY,\n    Bike_status VARCHAR(255),\n    Location_info VARCHAR(255),\n    QR_code BLOB,\n    Unlock_password VARCHAR(255)\n);\n\nCREATE TABLE Trip (\n    Bike_ID INTEGER NOT NULL,\n    End_time DATETIME,\n    Fee FLOAT,\n    Payment_status VARCHAR(255),\n    Start_time DATETIME,\n    Trip_ID INTEGER PRIMARY KEY,\n    User_phone_number VARCHAR(255) NOT NULL,\n    FOREIGN KEY (Bike_ID) REFERENCES Bike(Bike_ID),\n    FOREIGN KEY (User_phone_number) REFERENCES User(Phone_number)\n);\n\nCREATE TABLE Malfunction (\n    Bike_ID INTEGER NOT NULL,\n    Malfunction_description VARCHAR(255),\n    Report_time DATETIME,\n    User_phone_number VARCHAR(255) NOT NULL,\n    PRIMARY KEY (User_phone_number, Bike_ID, Report_time),\n    FOREIGN KEY (Bike_ID) REFERENCES Bike(Bike_ID),\n    FOREIGN KEY (User_phone_number) REFERENCES User(Phone_number)\n);\n\nCREATE TABLE User_trip (\n    Trip INTEGER NOT NULL,\n    User_phone_number VARCHAR(255) NOT NULL,\n    PRIMARY KEY (User_phone_number, Trip),\n    FOREIGN KEY (Trip) REFERENCES Trip(Trip_ID),\n    FOREIGN KEY (User_phone_number) REFERENCES User(Phone_number)\n);\n\nCREATE TABLE Use_bike (\n    Bike_ID INTEGER NOT NULL,\n    Trip_ID INTEGER NOT NULL,\n    PRIMARY KEY (Trip_ID, Bike_ID),\n    FOREIGN KEY (Bike_ID) REFERENCES Bike(Bike_ID),\n    FOREIGN KEY (Trip_ID) REFERENCES Trip(Trip_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "cs", "domain": ["居民服务、修理和其他服务业", "其他服务业"]}
{"id": "67552f0b13602ec03b41ab2c", "question": "Business Requirements:\n1.Customer: Each customer needs to record basic information, including Customer ID, Name, Phone, and Address.\n2.Sales Order: Each customer can have multiple sales orders. Each sales order contains Order ID, Customer ID, Pizza ID, Quantity, Expected Delivery Date, and Order Status.\n3.Pizza: Each type of pizza needs to record Pizza ID, Flavor, Ingredients, and Stock. Pizza ID is the Primary key used to uniquely identify each pizza.\n4.Production Plan: A production plan is generated based on sales orders. Each production plan records Order ID, Pizza ID, Production Sequence, and Production Quantity.\n5.Income/Expenditure: Records each income or expenditure. The record includes Record ID, Type (Income or Expenditure), Amount, Time, Description, and the related Pizza ID. Each income/expenditure record can be associated with multiple pizzas, for tracking and analyzing financial data related to pizzas.\n6.Delivery Content: Records the delivery information for each order, including Record ID, Order ID, Delivery Time, and Delivery Status. Each delivery record is associated with a sales order and records the delivery details.\n\n", "answer": "CREATE TABLE Customer (\n    Address VARCHAR(255),\n    Customer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Phone VARCHAR(255)\n);\n\nCREATE TABLE Pizza (\n    Flavor VARCHAR(255),\n    Ingredients VARCHAR(255),\n    Pizza_ID INTEGER PRIMARY KEY,\n    Stock INTEGER\n);\n\nCREATE TABLE Sales_Order (\n    Customer_ID INTEGER NOT NULL,\n    Expected_Delivery_Date DATETIME,\n    Order_ID INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)\n);\n\nCREATE TABLE Income/Expenditure (\n    Amount FLOAT,\n    Description VARCHAR(255),\n    Pizza_ID INTEGER NOT NULL,\n    Record_ID INTEGER PRIMARY KEY,\n    Time DATETIME,\n    Type VARCHAR(255),\n    FOREIGN KEY (Pizza_ID) REFERENCES Pizza(Pizza_ID)\n);\n\nCREATE TABLE Production_Plan (\n    Order_ID INTEGER NOT NULL,\n    Pizza_ID INTEGER NOT NULL,\n    Production_Quantity INTEGER,\n    Production_Sequence VARCHAR(255),\n    PRIMARY KEY (Order_ID, Pizza_ID),\n    FOREIGN KEY (Order_ID) REFERENCES Sales_Order(Order_ID),\n    FOREIGN KEY (Pizza_ID) REFERENCES Pizza(Pizza_ID)\n);\n\nCREATE TABLE Delivery_Content (\n    Delivery_Time DATETIME,\n    Order_ID INTEGER NOT NULL,\n    Record_ID INTEGER PRIMARY KEY,\n    Status VARCHAR(255),\n    FOREIGN KEY (Order_ID) REFERENCES Sales_Order(Order_ID)\n);", "remarks": "删除了冗余的库存实体，修改了对应的需求描述，修改了schema及其对应的表名", "assign_to": "gcc", "assign_to_round2": "zp", "domain": ["住宿和餐饮业", "餐饮业"]}
{"id": "67552f0b13602ec03b41ab2f", "question": "This is a supermarket management system. For supermarket management, the system records basic information for each supermarket, including unique supermarket name, manager, address and phone number. For department management, each supermarket has multiple departments, and the system records basic information for each department, including unique department name and manager, with each department responsible for managing its own employees. For employee management, the system records basic information for each employee, including unique employee ID, name, position, contact information and salary, with each employee belonging to only one department. For product management, the system records basic information for each product, including unique product ID, product name, model, unit price and quantity. Sales representatives are responsible for the allocation of multiple products, and the system records the time and quantity of each allocation.", "answer": "CREATE TABLE Product (\n    Model VARCHAR(255),\n    Product_ID INTEGER PRIMARY KEY,\n    Product_name VARCHAR(255),\n    Quantity INTEGER,\n    Unit_price FLOAT\n);\n\nCREATE TABLE Supermarket (\n    Address VARCHAR(255),\n    Manager_employee_ID INTEGER NOT NULL,\n    Phone VARCHAR(255),\n    Supermarket_ID INTEGER PRIMARY KEY,\n    Supermarket_name VARCHAR(255),\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Department (\n    Department_ID INTEGER PRIMARY KEY,\n    Department_name VARCHAR(255),\n    Department_responsibility VARCHAR(255),\n    Employee_count INTEGER,\n    Establishment_time DATETIME,\n    Manager_employee_ID INTEGER NOT NULL,\n    Supermarket_ID INTEGER NOT NULL,\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Supermarket_ID) REFERENCES Supermarket(Supermarket_ID)\n);\n\nCREATE TABLE Employee (\n    Contact_info VARCHAR(255),\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Position VARCHAR(255),\n    Salary FLOAT,\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)\n);\n\nCREATE TABLE Allocation (\n    Allocation_quantity INTEGER,\n    Allocation_time DATETIME,\n    Product_ID INTEGER NOT NULL,\n    Sales_employee_ID INTEGER NOT NULL,\n    PRIMARY KEY (Sales_employee_ID, Allocation_time, Product_ID),\n    FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID),\n    FOREIGN KEY (Sales_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Establish (\n    Department_ID INTEGER NOT NULL,\n    Supermarket_ID INTEGER NOT NULL,\n    PRIMARY KEY (Supermarket_ID, Department_ID),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Supermarket_ID) REFERENCES Supermarket(Supermarket_ID)\n);\n\nCREATE TABLE Manage_supermarket (\n    Manager_employee_ID INTEGER NOT NULL,\n    Supermarket_ID INTEGER NOT NULL,\n    PRIMARY KEY (Manager_employee_ID, Supermarket_ID),\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID),\n    FOREIGN KEY (Supermarket_ID) REFERENCES Supermarket(Supermarket_ID)\n);\n\nCREATE TABLE Manage_department (\n    Department_ID INTEGER NOT NULL,\n    Manager_employee_ID INTEGER NOT NULL,\n    PRIMARY KEY (Manager_employee_ID, Department_ID),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Manager_employee_ID) REFERENCES Employee(Employee_ID)\n);\n\nCREATE TABLE Work (\n    Department_ID INTEGER NOT NULL,\n    Employee_ID INTEGER NOT NULL,\n    PRIMARY KEY (Employee_ID, Department_ID),\n    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),\n    FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID)\n);", "remarks": "", "assign_to": "hzb", "assign_to_round2": "cs", "domain": ["批发和零售业", "零售业"]}
{"id": "67552f0b13602ec03b41ab53", "question": "Business Requirements:\n1.Maze: Each maze needs to record its basic information, including Maze ID, Maze Name, and Maze File Path.\n2.Robot: Each robot needs to record its basic information, including Robot ID, Robot Type, Current Position, Timer Status, and Maze ID. Robot ID is the unique identifier for each robot, and Maze ID is a Foreign key pointing to the Maze ID in the Maze table.\n3.Forward Sensor: Each forward sensor needs to record its basic information, including Sensor ID, Robot ID, Left Status, Right Status, and Front Status.\n4.Proximity Sensor: Each proximity sensor needs to record its basic information, including Sensor ID, Robot ID, Coin Status, and Ghost Status.\n5.Timer: Each timer needs to record its basic information, including Timer ID, Robot ID, Timer Event Description, and Timer Event Time.\n6.User: Each user needs to record their basic information, including User ID, Name, and Contact Information.\n7.User Robot Operation: Each user can perform operations on a robot. This operation records User ID, Operation Type, Operation Time, and Robot ID.", "answer": "CREATE TABLE Maze (\n    Maze_File_Path VARCHAR(255),\n    Maze_ID INTEGER PRIMARY KEY,\n    Maze_Name VARCHAR(255)\n);\n\nCREATE TABLE User (\n    Contact_Information VARCHAR(255),\n    Name VARCHAR(255),\n    User_ID INTEGER PRIMARY KEY\n);\n\nCREATE TABLE Robot (\n    Current_Position VARCHAR(255),\n    Maze_ID INTEGER NOT NULL,\n    Robot_ID INTEGER PRIMARY KEY,\n    Robot_Type VARCHAR(255),\n    Timer_Status VARCHAR(255),\n    FOREIGN KEY (Maze_ID) REFERENCES Maze(Maze_ID)\n);\n\nCREATE TABLE Forward_Sensor (\n    Front_Status VARCHAR(255),\n    Left_Status VARCHAR(255),\n    Right_Status VARCHAR(255),\n    Robot_ID INTEGER NOT NULL,\n    Sensor_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Robot_ID) REFERENCES Robot(Robot_ID)\n);\n\nCREATE TABLE Proximity_Sensor (\n    Coin_Status VARCHAR(255),\n    Ghost_Status VARCHAR(255),\n    Robot_ID INTEGER NOT NULL,\n    Sensor_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Robot_ID) REFERENCES Robot(Robot_ID)\n);\n\nCREATE TABLE Timer (\n    Robot_ID INTEGER NOT NULL,\n    Timer_Event_Description VARCHAR(255),\n    Timer_Event_Time DATETIME,\n    Timer_ID INTEGER PRIMARY KEY,\n    FOREIGN KEY (Robot_ID) REFERENCES Robot(Robot_ID)\n);\n\nCREATE TABLE User_Robot_Operation (\n    Operation_Time DATETIME,\n    Operation_Type VARCHAR(255),\n    Robot_ID INTEGER NOT NULL,\n    User_ID INTEGER NOT NULL,\n    PRIMARY KEY (User_ID, Robot_ID),\n    FOREIGN KEY (Robot_ID) REFERENCES Robot(Robot_ID),\n    FOREIGN KEY (User_ID) REFERENCES User(User_ID)\n);", "remarks": "", "assign_to": "gcc", "assign_to_round2": "cs", "domain": ["科学研究和技术服务业", "研究和试验发展"]}
